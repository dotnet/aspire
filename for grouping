[1mdiff --git a/src/Aspire.Cli/Backchannel/AppHostBackchannel.cs b/src/Aspire.Cli/Backchannel/AppHostBackchannel.cs[m
[1mindex ba23c03..2c2dc32 100644[m
[1m--- a/src/Aspire.Cli/Backchannel/AppHostBackchannel.cs[m
[1m+++ b/src/Aspire.Cli/Backchannel/AppHostBackchannel.cs[m
[36m@@ -1,9 +1,9 @@[m
 // Licensed to the .NET Foundation under one or more agreements.[m
 // The .NET Foundation licenses this file to you under the MIT license.[m
 [m
[31m-using System.Diagnostics;[m
 using System.Net.Sockets;[m
 using System.Runtime.CompilerServices;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Microsoft.Extensions.Logging;[m
 using StreamJsonRpc;[m
 [m
[36m@@ -23,13 +23,11 @@[m [minternal interface IAppHostBackchannel[m
 internal sealed class AppHostBackchannel(ILogger<AppHostBackchannel> logger, CliRpcTarget target) : IAppHostBackchannel[m
 {[m
     private const string BaselineCapability = "baseline.v2";[m
[31m-[m
[31m-    private readonly ActivitySource _activitySource = new(nameof(AppHostBackchannel));[m
     private readonly TaskCompletionSource<JsonRpc> _rpcTaskCompletionSource = new();[m
 [m
     public async Task<long> PingAsync(long timestamp, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var rpc = await _rpcTaskCompletionSource.Task;[m
 [m
[36m@@ -49,7 +47,7 @@[m [mpublic async Task RequestStopAsync(CancellationToken cancellationToken)[m
         // of the AppHost process. The AppHost process will then trigger the shutdown[m
         // which will allow the CLI to await the pending run.[m
 [m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var rpc = await _rpcTaskCompletionSource.Task;[m
 [m
[36m@@ -63,7 +61,7 @@[m [mawait rpc.InvokeWithCancellationAsync([m
 [m
     public async Task<(string BaseUrlWithLoginToken, string? CodespacesUrlWithLoginToken)> GetDashboardUrlsAsync(CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var rpc = await _rpcTaskCompletionSource.Task;[m
 [m
[36m@@ -79,7 +77,7 @@[m [mawait rpc.InvokeWithCancellationAsync([m
 [m
     public async IAsyncEnumerable<RpcResourceState> GetResourceStatesAsync([EnumeratorCancellation]CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var rpc = await _rpcTaskCompletionSource.Task;[m
 [m
[36m@@ -102,7 +100,7 @@[m [mpublic async Task ConnectAsync(string socketPath, CancellationToken cancellation[m
     {[m
         try[m
         {[m
[31m-            using var activity = _activitySource.StartActivity();[m
[32m+[m[32m            using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
             if (_rpcTaskCompletionSource.Task.IsCompleted)[m
             {[m
[36m@@ -145,7 +143,7 @@[m [mpublic async Task ConnectAsync(string socketPath, CancellationToken cancellation[m
 [m
     public async IAsyncEnumerable<(string Id, string StatusText, bool IsComplete, bool IsError)> GetPublishingActivitiesAsync([EnumeratorCancellation]CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var rpc = await _rpcTaskCompletionSource.Task;[m
 [m
[36m@@ -166,7 +164,7 @@[m [mpublic async Task ConnectAsync(string socketPath, CancellationToken cancellation[m
 [m
     public async Task<string[]> GetCapabilitiesAsync(CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var rpc = await _rpcTaskCompletionSource.Task.ConfigureAwait(false);[m
 [m
[1mdiff --git a/src/Aspire.Cli/Certificates/CertificateService.cs b/src/Aspire.Cli/Certificates/CertificateService.cs[m
[1mindex 9dca1f5..9a74c97 100644[m
[1m--- a/src/Aspire.Cli/Certificates/CertificateService.cs[m
[1m+++ b/src/Aspire.Cli/Certificates/CertificateService.cs[m
[36m@@ -3,6 +3,7 @@[m
 [m
 using System.Diagnostics;[m
 using Aspire.Cli.Interaction;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Aspire.Cli.Utils;[m
 [m
 namespace Aspire.Cli.Certificates;[m
[36m@@ -14,11 +15,10 @@[m [minternal interface ICertificateService[m
 [m
 internal sealed class CertificateService(IInteractionService interactionService) : ICertificateService[m
 {[m
[31m-    private readonly ActivitySource _activitySource = new ActivitySource(nameof(CertificateService));[m
 [m
     public async Task EnsureCertificatesTrustedAsync(IDotNetCliRunner runner, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity(nameof(EnsureCertificatesTrustedAsync), ActivityKind.Client);[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity(nameof(EnsureCertificatesTrustedAsync), ActivityKind.Client);[m
 [m
         var ensureCertificateCollector = new OutputCollector();[m
         var checkExitCode = await interactionService.ShowStatusAsync([m
[1mdiff --git a/src/Aspire.Cli/Commands/AddCommand.cs b/src/Aspire.Cli/Commands/AddCommand.cs[m
[1mindex 64c8aa6..aa3925e 100644[m
[1m--- a/src/Aspire.Cli/Commands/AddCommand.cs[m
[1m+++ b/src/Aspire.Cli/Commands/AddCommand.cs[m
[36m@@ -2,11 +2,11 @@[m
 // The .NET Foundation licenses this file to you under the MIT license.[m
 [m
 using System.CommandLine;[m
[31m-using System.Diagnostics;[m
 using System.Text;[m
 using Aspire.Cli.Interaction;[m
 using Aspire.Cli.NuGet;[m
 using Aspire.Cli.Projects;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Aspire.Cli.Utils;[m
 using Semver;[m
 using Spectre.Console;[m
[36m@@ -15,7 +15,6 @@[m [mnamespace Aspire.Cli.Commands;[m
 [m
 internal sealed class AddCommand : BaseCommand[m
 {[m
[31m-    private readonly ActivitySource _activitySource = new ActivitySource(nameof(AddCommand));[m
     private readonly IDotNetCliRunner _runner;[m
     private readonly INuGetPackageCache _nuGetPackageCache;[m
     private readonly IInteractionService _interactionService;[m
[36m@@ -57,7 +56,7 @@[m [mpublic AddCommand(IDotNetCliRunner runner, INuGetPackageCache nuGetPackageCache,[m
 [m
     protected override async Task<int> ExecuteAsync(ParseResult parseResult, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var outputCollector = new OutputCollector();[m
 [m
[1mdiff --git a/src/Aspire.Cli/Commands/NewCommand.cs b/src/Aspire.Cli/Commands/NewCommand.cs[m
[1mindex 3cc2f53..0294060 100644[m
[1m--- a/src/Aspire.Cli/Commands/NewCommand.cs[m
[1m+++ b/src/Aspire.Cli/Commands/NewCommand.cs[m
[36m@@ -2,18 +2,17 @@[m
 // The .NET Foundation licenses this file to you under the MIT license.[m
 [m
 using System.CommandLine;[m
[31m-using System.Diagnostics;[m
 using System.Text.RegularExpressions;[m
 using Aspire.Cli.Certificates;[m
 using Aspire.Cli.Interaction;[m
 using Aspire.Cli.NuGet;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Aspire.Cli.Templating;[m
 using Spectre.Console;[m
 namespace Aspire.Cli.Commands;[m
 [m
 internal sealed class NewCommand : BaseCommand[m
 {[m
[31m-    private readonly ActivitySource _activitySource = new ActivitySource(nameof(NewCommand));[m
     private readonly IDotNetCliRunner _runner;[m
     private readonly INuGetPackageCache _nuGetPackageCache;[m
     private readonly ICertificateService _certificateService;[m
[36m@@ -84,7 +83,7 @@[m [mprivate async Task<ITemplate> GetProjectTemplateAsync(ParseResult parseResult, C[m
 [m
     protected override async Task<int> ExecuteAsync(ParseResult parseResult, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var template = await GetProjectTemplateAsync(parseResult, cancellationToken);[m
         var exitCode = await template.ApplyTemplateAsync(parseResult, cancellationToken);[m
[1mdiff --git a/src/Aspire.Cli/Commands/PublishCommandBase.cs b/src/Aspire.Cli/Commands/PublishCommandBase.cs[m
[1mindex ed90999..926ce7e 100644[m
[1m--- a/src/Aspire.Cli/Commands/PublishCommandBase.cs[m
[1m+++ b/src/Aspire.Cli/Commands/PublishCommandBase.cs[m
[36m@@ -3,10 +3,10 @@[m
 [m
 using System.CommandLine;[m
 using System.CommandLine.Parsing;[m
[31m-using System.Diagnostics;[m
 using Aspire.Cli.Backchannel;[m
 using Aspire.Cli.Interaction;[m
 using Aspire.Cli.Projects;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Aspire.Cli.Utils;[m
 using Aspire.Hosting;[m
 using Spectre.Console;[m
[36m@@ -15,7 +15,6 @@[m [mnamespace Aspire.Cli.Commands;[m
 [m
 internal abstract class PublishCommandBase : BaseCommand[m
 {[m
[31m-    private readonly ActivitySource _activitySource;[m
     protected readonly IDotNetCliRunner _runner;[m
     protected readonly IInteractionService _interactionService;[m
     protected readonly IProjectLocator _projectLocator;[m
[36m@@ -27,7 +26,6 @@[m [mprotected PublishCommandBase(string name, string description, IDotNetCliRunner r[m
         ArgumentNullException.ThrowIfNull(interactionService);[m
         ArgumentNullException.ThrowIfNull(projectLocator);[m
 [m
[31m-        _activitySource = new ActivitySource(GetType().Name);[m
         _runner = runner;[m
         _interactionService = interactionService;[m
         _projectLocator = projectLocator;[m
[36m@@ -63,7 +61,7 @@[m [mprotected override async Task<int> ExecuteAsync(ParseResult parseResult, Cancell[m
 [m
         try[m
         {[m
[31m-            using var activity = _activitySource.StartActivity();[m
[32m+[m[32m            using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
             var passedAppHostProjectFile = parseResult.GetValue<FileInfo?>("--project");[m
             var effectiveAppHostProjectFile = await _projectLocator.UseOrFindAppHostProjectFileAsync(passedAppHostProjectFile, cancellationToken);[m
[1mdiff --git a/src/Aspire.Cli/Commands/RunCommand.cs b/src/Aspire.Cli/Commands/RunCommand.cs[m
[1mindex 7ea5fbe..1a616eb 100644[m
[1m--- a/src/Aspire.Cli/Commands/RunCommand.cs[m
[1m+++ b/src/Aspire.Cli/Commands/RunCommand.cs[m
[36m@@ -2,11 +2,11 @@[m
 // The .NET Foundation licenses this file to you under the MIT license.[m
 [m
 using System.CommandLine;[m
[31m-using System.Diagnostics;[m
 using Aspire.Cli.Backchannel;[m
 using Aspire.Cli.Certificates;[m
 using Aspire.Cli.Interaction;[m
 using Aspire.Cli.Projects;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Aspire.Cli.Utils;[m
 using Aspire.Hosting;[m
 using Spectre.Console;[m
[36m@@ -17,7 +17,6 @@[m [mnamespace Aspire.Cli.Commands;[m
 [m
 internal sealed class RunCommand : BaseCommand[m
 {[m
[31m-    private readonly ActivitySource _activitySource = new ActivitySource(nameof(RunCommand));[m
     private readonly IDotNetCliRunner _runner;[m
     private readonly IInteractionService _interactionService;[m
     private readonly ICertificateService _certificateService;[m
[36m@@ -58,7 +57,7 @@[m [mprotected override async Task<int> ExecuteAsync(ParseResult parseResult, Cancell[m
         (bool IsCompatibleAppHost, bool SupportsBackchannel, string? AspireHostingSdkVersion)? appHostCompatibilityCheck = null;[m
         try[m
         {[m
[31m-            using var activity = _activitySource.StartActivity();[m
[32m+[m[32m            using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
             var passedAppHostProjectFile = parseResult.GetValue<FileInfo?>("--project");[m
             var effectiveAppHostProjectFile = await _projectLocator.UseOrFindAppHostProjectFileAsync(passedAppHostProjectFile, cancellationToken);[m
[1mdiff --git a/src/Aspire.Cli/DotNetCliRunner.cs b/src/Aspire.Cli/DotNetCliRunner.cs[m
[1mindex 68ed2fa..bcdd9d5 100644[m
[1m--- a/src/Aspire.Cli/DotNetCliRunner.cs[m
[1m+++ b/src/Aspire.Cli/DotNetCliRunner.cs[m
[36m@@ -8,6 +8,7 @@[m
 using System.Text;[m
 using System.Text.Json;[m
 using Aspire.Cli.Backchannel;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Aspire.Hosting;[m
 using Microsoft.Extensions.DependencyInjection;[m
 using Microsoft.Extensions.Logging;[m
[36m@@ -38,13 +39,12 @@[m [minternal sealed class DotNetCliRunnerInvocationOptions[m
 [m
 internal class DotNetCliRunner(ILogger<DotNetCliRunner> logger, IServiceProvider serviceProvider) : IDotNetCliRunner[m
 {[m
[31m-    private readonly ActivitySource _activitySource = new ActivitySource(nameof(DotNetCliRunner));[m
 [m
     internal Func<int> GetCurrentProcessId { get; set; } = () => Environment.ProcessId;[m
 [m
     public async Task<(int ExitCode, bool IsAspireHost, string? AspireHostingSdkVersion)> GetAppHostInformationAsync(FileInfo projectFile, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         string[] cliArgs = ["msbuild", "-getproperty:IsAspireHost,AspireHostingSDKVersion", projectFile.FullName];[m
 [m
[36m@@ -102,7 +102,7 @@[m [minternal class DotNetCliRunner(ILogger<DotNetCliRunner> logger, IServiceProvider[m
 [m
     public async Task<(int ExitCode, JsonDocument? Output)> GetProjectItemsAndPropertiesAsync(FileInfo projectFile, string[] items, string[] properties, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
         [m
         string[] cliArgs = [[m
             "msbuild",[m
[36m@@ -156,7 +156,7 @@[m [minternal class DotNetCliRunner(ILogger<DotNetCliRunner> logger, IServiceProvider[m
 [m
     public async Task<int> RunAsync(FileInfo projectFile, bool watch, bool noBuild, string[] args, IDictionary<string, string>? env, TaskCompletionSource<IAppHostBackchannel>? backchannelCompletionSource, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         if (watch && noBuild)[m
         {[m
[36m@@ -182,7 +182,7 @@[m [mpublic async Task<int> RunAsync(FileInfo projectFile, bool watch, bool noBuild,[m
 [m
     public async Task<int> CheckHttpCertificateAsync(DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         string[] cliArgs = ["dev-certs", "https", "--check", "--trust"];[m
         return await ExecuteAsync([m
[36m@@ -196,7 +196,7 @@[m [mpublic async Task<int> CheckHttpCertificateAsync(DotNetCliRunnerInvocationOption[m
 [m
     public async Task<int> TrustHttpCertificateAsync(DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         string[] cliArgs = ["dev-certs", "https", "--trust"];[m
         return await ExecuteAsync([m
[36m@@ -210,7 +210,7 @@[m [mpublic async Task<int> TrustHttpCertificateAsync(DotNetCliRunnerInvocationOption[m
 [m
     public async Task<(int ExitCode, string? TemplateVersion)> InstallTemplateAsync(string packageName, string version, string? nugetSource, bool force, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity(nameof(InstallTemplateAsync), ActivityKind.Client);[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity(nameof(InstallTemplateAsync), ActivityKind.Client);[m
 [m
         List<string> cliArgs = ["new", "install", $"{packageName}::{version}"];[m
 [m
[36m@@ -321,7 +321,7 @@[m [mprivate static bool TryParsePackageVersionFromStdout(string stdout, [NotNullWhen[m
 [m
     public async Task<int> NewProjectAsync(string templateName, string name, string outputPath, string[] extraArgs, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         string[] cliArgs = ["new", templateName, "--name", name, "--output", outputPath, ..extraArgs];[m
         return await ExecuteAsync([m
[36m@@ -350,7 +350,7 @@[m [minternal static string GetBackchannelSocketPath()[m
 [m
     public virtual async Task<int> ExecuteAsync(string[] args, IDictionary<string, string>? env, DirectoryInfo workingDirectory, TaskCompletionSource<IAppHostBackchannel>? backchannelCompletionSource, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var startInfo = new ProcessStartInfo("dotnet")[m
         {[m
[36m@@ -469,7 +469,7 @@[m [masync Task ForwardStreamToLoggerAsync(StreamReader reader, string identifier, Pr[m
 [m
     private async Task StartBackchannelAsync(Process process, string socketPath, TaskCompletionSource<IAppHostBackchannel> backchannelCompletionSource, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         using var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(50));[m
 [m
[36m@@ -543,7 +543,7 @@[m [mprivate async Task StartBackchannelAsync(Process process, string socketPath, Tas[m
 [m
     public async Task<int> BuildAsync(FileInfo projectFilePath, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         string[] cliArgs = ["build", projectFilePath.FullName];[m
         return await ExecuteAsync([m
[36m@@ -556,7 +556,7 @@[m [mpublic async Task<int> BuildAsync(FileInfo projectFilePath, DotNetCliRunnerInvoc[m
     }[m
     public async Task<int> AddPackageAsync(FileInfo projectFilePath, string packageName, string packageVersion, string? nugetSource, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         var cliArgsList = new List<string>[m
         {[m
[36m@@ -600,7 +600,7 @@[m [mpublic async Task<int> AddPackageAsync(FileInfo projectFilePath, string packageN[m
 [m
     public async Task<(int ExitCode, NuGetPackage[]? Packages)> SearchPackagesAsync(DirectoryInfo workingDirectory, string query, bool prerelease, int take, int skip, string? nugetSource, DotNetCliRunnerInvocationOptions options, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
         List<string> cliArgs = [[m
             "package",[m
             "search",[m
[1mdiff --git a/src/Aspire.Cli/NuGet/NuGetPackageCache.cs b/src/Aspire.Cli/NuGet/NuGetPackageCache.cs[m
[1mindex 4833c7f..eabf706 100644[m
[1m--- a/src/Aspire.Cli/NuGet/NuGetPackageCache.cs[m
[1m+++ b/src/Aspire.Cli/NuGet/NuGetPackageCache.cs[m
[36m@@ -1,7 +1,7 @@[m
 // Licensed to the .NET Foundation under one or more agreements.[m
 // The .NET Foundation licenses this file to you under the MIT license.[m
 [m
[31m-using System.Diagnostics;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Microsoft.Extensions.Caching.Memory;[m
 using Microsoft.Extensions.Logging;[m
 [m
[36m@@ -15,7 +15,6 @@[m [minternal interface INuGetPackageCache[m
 [m
 internal sealed class NuGetPackageCache(ILogger<NuGetPackageCache> logger, IDotNetCliRunner cliRunner, IMemoryCache memoryCache) : INuGetPackageCache[m
 {[m
[31m-    private readonly ActivitySource _activitySource = new(nameof(NuGetPackageCache));[m
 [m
     private const int SearchPageSize = 1000;[m
 [m
[36m@@ -38,7 +37,7 @@[m [mpublic async Task<IEnumerable<NuGetPackage>> GetIntegrationPackagesAsync(Directo[m
 [m
     internal async Task<IEnumerable<NuGetPackage>> GetPackagesAsync(DirectoryInfo workingDirectory, string query, bool prerelease, string? source, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         logger.LogDebug("Getting integrations from NuGet");[m
 [m
[1mdiff --git a/src/Aspire.Cli/Program.cs b/src/Aspire.Cli/Program.cs[m
[1mindex dfe92ce..9196eb4 100644[m
[1m--- a/src/Aspire.Cli/Program.cs[m
[1m+++ b/src/Aspire.Cli/Program.cs[m
[36m@@ -2,7 +2,6 @@[m
 // The .NET Foundation licenses this file to you under the MIT license.[m
 [m
 using System.CommandLine;[m
[31m-using System.Diagnostics;[m
 using System.Text;[m
 using Aspire.Cli.Backchannel;[m
 using Aspire.Cli.Certificates;[m
[36m@@ -18,6 +17,7 @@[m
 using Aspire.Cli.Configuration;[m
 using Microsoft.Extensions.DependencyInjection.Extensions;[m
 using Aspire.Cli.Utils;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 [m
 #if DEBUG[m
 using OpenTelemetry;[m
[36m@@ -31,7 +31,6 @@[m [mnamespace Aspire.Cli;[m
 [m
 public class Program[m
 {[m
[31m-    private static readonly ActivitySource s_activitySource = new ActivitySource(nameof(Program));[m
 [m
     private static string GetGlobalSettingsPath()[m
     {[m
[36m@@ -62,17 +61,7 @@[m [mprivate static IHost BuildApplication(string[] args)[m
         var otelBuilder = builder.Services[m
             .AddOpenTelemetry()[m
             .WithTracing(tracing => {[m
[31m-                tracing.AddSource([m
[31m-                    nameof(NuGetPackageCache),[m
[31m-                    nameof(AppHostBackchannel),[m
[31m-                    nameof(DotNetCliRunner),[m
[31m-                    nameof(Program),[m
[31m-                    nameof(NewCommand),[m
[31m-                    nameof(RunCommand),[m
[31m-                    nameof(AddCommand),[m
[31m-                    nameof(PublishCommand),[m
[31m-                    nameof(DeployCommand)[m
[31m-                    );[m
[32m+[m[32m                tracing.AddSource("Aspire.Cli");[m
 [m
                 tracing.SetResourceBuilder(ResourceBuilder.CreateDefault().AddService("aspire-cli"));[m
             });[m
[36m@@ -174,7 +163,7 @@[m [mpublic static async Task<int> Main(string[] args)[m
         var config = new CommandLineConfiguration(rootCommand);[m
         config.EnableDefaultExceptionHandler = true;[m
 [m
[31m-        using var activity = s_activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
         var exitCode = await config.InvokeAsync(args);[m
 [m
         await app.StopAsync().ConfigureAwait(false);[m
[1mdiff --git a/src/Aspire.Cli/Projects/ProjectLocator.cs b/src/Aspire.Cli/Projects/ProjectLocator.cs[m
[1mindex a07e646..4afe1d1 100644[m
[1m--- a/src/Aspire.Cli/Projects/ProjectLocator.cs[m
[1m+++ b/src/Aspire.Cli/Projects/ProjectLocator.cs[m
[36m@@ -1,10 +1,10 @@[m
 // Licensed to the .NET Foundation under one or more agreements.[m
 // The .NET Foundation licenses this file to you under the MIT license.[m
 [m
[31m-using System.Diagnostics;[m
 using System.Text.Json;[m
 using Aspire.Cli.Configuration;[m
 using Aspire.Cli.Interaction;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Microsoft.Extensions.Logging;[m
 [m
 namespace Aspire.Cli.Projects;[m
[36m@@ -16,11 +16,10 @@[m [minternal interface IProjectLocator[m
 [m
 internal sealed class ProjectLocator(ILogger<ProjectLocator> logger, IDotNetCliRunner runner, DirectoryInfo currentDirectory, IInteractionService interactionService, IConfigurationService configurationService) : IProjectLocator[m
 {[m
[31m-    private readonly ActivitySource _activitySource = new(nameof(ProjectLocator));[m
 [m
     private async Task<List<FileInfo>> FindAppHostProjectFilesAsync(DirectoryInfo searchDirectory, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = _activitySource.StartActivity();[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity();[m
 [m
         return await interactionService.ShowStatusAsync("Searching", async () =>[m
         {[m
[1mdiff --git a/src/Aspire.Cli/Telemetry/AspireCliActivitySource.cs b/src/Aspire.Cli/Telemetry/AspireCliActivitySource.cs[m
[1mnew file mode 100644[m
[1mindex 0000000..12ee7fa[m
[1m--- /dev/null[m
[1m+++ b/src/Aspire.Cli/Telemetry/AspireCliActivitySource.cs[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m// Licensed to the .NET Foundation under one or more agreements.[m
[32m+[m[32m// The .NET Foundation licenses this file to you under the MIT license.[m
[32m+[m
[32m+[m[32musing System.Diagnostics;[m
[32m+[m
[32m+[m[32mnamespace Aspire.Cli.Telemetry;[m
[32m+[m
[32m+[m[32m/// <summary>[m
[32m+[m[32m/// Provides a single ActivitySource for all Aspire CLI components.[m
[32m+[m[32m/// </summary>[m
[32m+[m[32minternal static class AspireCliActivitySource[m
[32m+[m[32m{[m
[32m+[m[32m    /// <summary>[m
[32m+[m[32m    /// The shared ActivitySource instance for all CLI components.[m
[32m+[m[32m    /// </summary>[m
[32m+[m[32m    public static readonly ActivitySource Instance = new("Aspire.Cli");[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/Aspire.Cli/Utils/AppHostHelper.cs b/src/Aspire.Cli/Utils/AppHostHelper.cs[m
[1mindex 8c3b1ad..2b910ab 100644[m
[1m--- a/src/Aspire.Cli/Utils/AppHostHelper.cs[m
[1m+++ b/src/Aspire.Cli/Utils/AppHostHelper.cs[m
[36m@@ -2,6 +2,7 @@[m
 // The .NET Foundation licenses this file to you under the MIT license.[m
 [m
 using Aspire.Cli.Interaction;[m
[32m+[m[32musing Aspire.Cli.Telemetry;[m
 using Semver;[m
 using System.Diagnostics;[m
 [m
[36m@@ -9,7 +10,6 @@[m [mnamespace Aspire.Cli.Utils;[m
 [m
 internal static class AppHostHelper[m
 {[m
[31m-    private static readonly ActivitySource s_activitySource = new ActivitySource(nameof(AppHostHelper));[m
 [m
     internal static async Task<(bool IsCompatibleAppHost, bool SupportsBackchannel, string? AspireHostingSdkVersion)> CheckAppHostCompatibilityAsync(IDotNetCliRunner runner, IInteractionService interactionService, FileInfo projectFile, CancellationToken cancellationToken)[m
     {[m
[36m@@ -49,7 +49,7 @@[m [minternal static class AppHostHelper[m
 [m
     internal static async Task<(int ExitCode, bool IsAspireHost, string? AspireHostingSdkVersion)> GetAppHostInformationAsync(IDotNetCliRunner runner, IInteractionService interactionService, FileInfo projectFile, CancellationToken cancellationToken)[m
     {[m
[31m-        using var activity = s_activitySource.StartActivity(nameof(GetAppHostInformationAsync), ActivityKind.Client);[m
[32m+[m[32m        using var activity = AspireCliActivitySource.Instance.StartActivity(nameof(GetAppHostInformationAsync), ActivityKind.Client);[m
 [m
         var appHostInformationResult = await interactionService.ShowStatusAsync([m
             ":microscope: Checking project type...",[m
