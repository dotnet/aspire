@inject BasketServiceClient BasketClient
@inject NavigationManager Navigation

<div class="justify-content-end">
    @if (basketIsAvailable)
    {
        <EditForm action="@Navigation.ToAbsolutePath(Navigation.Uri)" Model="this" FormName="checkout" OnSubmit="HandleCheckout" data-enhance>
            <button type="submit" class="align-content-end cart-button">
                <span class="fa-stack fa-lg cart-stack pa-4">
                    <i class="fa fa-shopping-cart fa-stack-4x"></i>
                    <i class="fa fa-stack-1x badge">
                        @itemsInCart
                    </i>
                </span>
            </button>
        </EditForm>
    }
</div>

@code {
    bool basketIsAvailable;
    int itemsInCart = 0;

    [Parameter]
    public EventCallback<bool> BasketAvailabilityChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var (basket, isAvailable) = await BasketClient.GetBasketAsync("user");

        if (basket is not null)
        {
            itemsInCart = basket.TotalItemCount;
        }
        basketIsAvailable = isAvailable;
        await BasketAvailabilityChanged.InvokeAsync(basketIsAvailable);
    }

    private async Task HandleCheckout()
    {
        await BasketClient.CheckoutBasketAsync("user");

        // Preserve query string
        Navigation.NavigateTo($"/{new Uri(Navigation.Uri).Query}");
    }
}
