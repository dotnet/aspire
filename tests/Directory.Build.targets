<Project>
  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))" />

  <Import Project="$(TestsSharedRepoTestingDir)Aspire.RepoTesting.targets" />

  <PropertyGroup>
    <!-- Use a separate xunit.runner.json for helix that disables parallel test runs -->
    <XunitRunnerJson Condition="'$(XunitRunnerJson)' == '' and '$(PrepareForHelix)' == 'true'">$(RepoRoot)tests\helix\xunit.runner.json</XunitRunnerJson>
    <XunitRunnerJson Condition="'$(XunitRunnerJson)' == ''">$(RepositoryEngineeringDir)testing\xunit.runner.json</XunitRunnerJson>

    <!-- Properties to allow control tests to run, useful for local command line runs -->
    <TestingPlatformCommandLineArguments Condition="'$(TestMethod)' != ''">$(TestingPlatformCommandLineArguments) --filter-method $(TestMethod)</TestingPlatformCommandLineArguments>
    <TestingPlatformCommandLineArguments Condition="'$(TestClass)' != ''">$(TestingPlatformCommandLineArguments) --filter-class $(TestClass)</TestingPlatformCommandLineArguments>
    <TestingPlatformCommandLineArguments Condition="'$(TestNamespace)' != ''">$(TestingPlatformCommandLineArguments) --filter-namespace $(TestNamespace)</TestingPlatformCommandLineArguments>

    <TestCaptureOutput Condition="'$(TestCaptureOutput)' == '' and '$(ContinuousIntegrationBuild)' == 'true'">true</TestCaptureOutput>
    <!-- don't capture on local runs -->
    <TestCaptureOutput Condition="'$(TestCaptureOutput)' == ''">false</TestCaptureOutput>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(XunitRunnerJson)" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <Target Name="ZipTestArchive" AfterTargets="Build"
          Condition=" '$(IsTestProject)' == 'true' and '$(PrepareForHelix)' == 'true' and '$(RunOnAzdoHelix)' == 'true' and '$(IsTestUtilityProject)' != 'true' and '$(IsCrossTargetingBuild)' != 'true'">
    <Error Condition="'$(TestArchiveTestsDir)' == ''" Text="TestArchiveTestsDir property to archive the test folder must be set." />
    <PropertyGroup>
      <TestsArchiveSourceDir Condition="'$(TestsArchiveSourceDir)' == ''">$(OutDir)</TestsArchiveSourceDir>
      <ZipTestArchiveTfm></ZipTestArchiveTfm>
      <ZipTestArchiveTfm Condition="'$(TargetFramework)' != '$(DefaultTargetFramework)'">-$(TargetFramework)</ZipTestArchiveTfm>
    </PropertyGroup>

    <MakeDir Directories="$(TestArchiveTestsDir)" />
    <ZipDirectory SourceDirectory="$(TestsArchiveSourceDir)"
                  DestinationFile="$([MSBuild]::NormalizePath($(TestArchiveTestsDir), '$(MSBuildProjectName)$(ZipTestArchiveTfm).zip'))"
                  Overwrite="true" />
  </Target>

  <!-- Used for running one helix job per test class (legacy mechanism) -->
  <Target Name="ExtractTestClassNames"
          Condition=" '$(IsTestProject)' == 'true' and '$(ExtractTestClassNamesForHelix)' == 'true' and '$(PrepareForHelix)' == 'true' and '$(IsTestUtilityProject)' != 'true' and '$(SplitTestsOnCI)' != 'true'"
          BeforeTargets="ZipTestArchive">

    <Error Condition="'$(ExtractTestClassNamesPrefix)' == ''"
           Text="%24(ExtractTestClassNamesPrefix) should be set, for example - Aspire.Templates.Tests" />

    <Exec Command="&quot;$(RunCommand)&quot; --filter-not-trait category=failing --list-tests" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="_ListOfTestsLines" />
    </Exec>

    <PropertyGroup>
      <_Regex>^\s*($(ExtractTestClassNamesPrefix)[^\($]+)</_Regex>
    </PropertyGroup>
    <ItemGroup>
      <_TestLines0 Include="$([System.Text.RegularExpressions.Regex]::Match('%(_ListOfTestsLines.Identity)', '$(_Regex)'))" />
      <TestClassName Include="$([System.IO.Path]::GetFileNameWithoutExtension('%(_TestLines0.Identity)'))" />
    </ItemGroup>

    <ItemGroup>
      <UniqueTestClassNamesFiltered Include="@(TestClassName->Distinct())" Exclude="@(TestClassNamesToSkipTests)" />
    </ItemGroup>

    <Error Text="No $(ExtractTestClassNamesPrefix) test classes found!" Condition="'@(TestClassName)' == ''" />

    <WriteLinesToFile File="$(TestArchiveTestsDir)$(MSBuildProjectName).tests.list"
                      Lines="@(UniqueTestClassNamesFiltered)"
                      Overwrite="true" />
  </Target>

  <!-- v3 auto-detection mechanism for test splitting -->
  <Target Name="ExtractTestMetadataV3"
          Condition=" '$(IsTestProject)' == 'true' and '$(SplitTestsOnCI)' == 'true' and '$(PrepareForHelix)' == 'true' and '$(IsTestUtilityProject)' != 'true'"
          BeforeTargets="ZipTestArchive"
          AfterTargets="Build">

    <Error Condition="'$(TestClassNamesPrefix)' == ''"
           Text="%24(TestClassNamesPrefix) must be set when SplitTestsOnCI=true (e.g., Aspire.Templates.Tests)" />

    <PropertyGroup>
      <_TestMetadataOutputDir>$(TestArchiveTestsDir)</_TestMetadataOutputDir>
      <_TestListFile>$(_TestMetadataOutputDir)$(MSBuildProjectName).tests.list</_TestListFile>
      <_TestMetadataJsonFile>$(_TestMetadataOutputDir)$(MSBuildProjectName).tests.metadata.json</_TestMetadataJsonFile>
      <_TestOutputTempFile>$(IntermediateOutputPath)test-list-output.tmp</_TestOutputTempFile>
      <_TestCollectionsToSkip Condition="'$(TestCollectionsToSkip)' != ''">$(TestCollectionsToSkip)</_TestCollectionsToSkip>
      <_TestCollectionsToSkip Condition="'$(_TestCollectionsToSkip)' == ''"></_TestCollectionsToSkip>
    </PropertyGroup>

    <MakeDir Directories="$(_TestMetadataOutputDir)" />
    <MakeDir Directories="$(IntermediateOutputPath)" />

    <!-- Run --list-tests and capture output to temp file -->
    <Exec Command="&quot;$(RunCommand)&quot; --filter-not-trait category=failing --list-tests &gt; &quot;$(_TestOutputTempFile)&quot;"
          WorkingDirectory="$(OutDir)"
          IgnoreExitCode="false" />

    <!-- Create metadata JSON with project-specific settings -->
    <PropertyGroup>
      <_MetadataContent>
{
  "projectName": "$(MSBuildProjectName)",
  "testClassNamesPrefix": "$(TestClassNamesPrefix)",
  "testProjectPath": "tests/$(MSBuildProjectName)/$(MSBuildProjectName).csproj",
  "requiresNugets": "$(RequiresNugetsForSplitTests)",
  "requiresTestSdk": "$(RequiresTestSdkForSplitTests)",
  "enablePlaywrightInstall": "$(EnablePlaywrightInstallForSplitTests)",
  "testSessionTimeout": "$(TestSessionTimeoutForSplitTests)",
  "testHangTimeout": "$(TestHangTimeoutForSplitTests)",
  "uncollectedTestsSessionTimeout": "$(UncollectedTestsSessionTimeoutForSplitTests)",
  "uncollectedTestsHangTimeout": "$(UncollectedTestsHangTimeoutForSplitTests)"
}
      </_MetadataContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(_TestMetadataJsonFile)"
                      Lines="$(_MetadataContent)"
                      Overwrite="true"
                      Encoding="UTF-8" />

    <!-- Invoke PowerShell script to process test list -->
    <PropertyGroup>
      <_ExtractScriptPath>$(RepoRoot)eng/scripts/extract-test-metadata.ps1</_ExtractScriptPath>
      <_PwshCommand>pwsh -NoProfile -ExecutionPolicy Bypass -File &quot;$(_ExtractScriptPath)&quot;</_PwshCommand>
      <_PwshCommand>$(_PwshCommand) -TestAssemblyOutputFile &quot;$(_TestOutputTempFile)&quot;</_PwshCommand>
      <_PwshCommand>$(_PwshCommand) -TestClassNamesPrefix &quot;$(TestClassNamesPrefix)&quot;</_PwshCommand>
      <_PwshCommand>$(_PwshCommand) -TestCollectionsToSkip &quot;$(_TestCollectionsToSkip)&quot;</_PwshCommand>
      <_PwshCommand>$(_PwshCommand) -OutputListFile &quot;$(_TestListFile)&quot;</_PwshCommand>
      <_PwshCommand>$(_PwshCommand) -MetadataJsonFile &quot;$(_TestMetadataJsonFile)&quot;</_PwshCommand>
    </PropertyGroup>

    <Exec Command="$(_PwshCommand)"
          WorkingDirectory="$(RepoRoot)"
          IgnoreExitCode="false" />

    <Message Text="Test metadata extracted: $(_TestListFile)" Importance="high" />
    <Message Text="Metadata JSON updated: $(_TestMetadataJsonFile)" Importance="high" />
  </Target>

  <Target Name="GetRunTestsOnGithubActions" Returns="@(TestProject)">
    <ItemGroup>
      <TestProject Condition="'$(BuildOs)' == 'windows'" Include="$(MSBuildProjectFullPath)" RunTestsOnGithubActions="$(RunOnGithubActionsWindows)" />
      <TestProject Condition="'$(BuildOs)' == 'linux'" Include="$(MSBuildProjectFullPath)" RunTestsOnGithubActions="$(RunOnGithubActionsLinux)" />
      <TestProject Condition="'$(BuildOs)' == 'darwin'" Include="$(MSBuildProjectFullPath)" RunTestsOnGithubActions="$(RunOnGithubActionsMacOS)" />
    </ItemGroup>
  </Target>

  <Import Project="$(TestsSharedDir)Aspire.Templates.Testing.targets" Condition="'$(IsTemplateTestProject)' == 'true'" />
  <Import Project="$(RepositoryEngineeringDir)Testing.targets" />
</Project>
