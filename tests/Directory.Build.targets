<Project>
  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))" />

  <Import Project="$(TestsSharedRepoTestingDir)Aspire.RepoTesting.targets" />

  <PropertyGroup>
    <!-- Use a separate xunit.runner.json for helix that disables parallel test runs -->
    <XunitRunnerJson Condition="'$(XunitRunnerJson)' == '' and '$(PrepareForHelix)' == 'true'">$(RepoRoot)tests\helix\xunit.runner.json</XunitRunnerJson>
    <XunitRunnerJson Condition="'$(XunitRunnerJson)' == ''">$(RepositoryEngineeringDir)testing\xunit.runner.json</XunitRunnerJson>

    <!-- Properties to allow control tests to run, useful for local command line runs -->
    <TestingPlatformCommandLineArguments Condition="'$(TestMethod)' != ''">$(TestingPlatformCommandLineArguments) --filter-method $(TestMethod)</TestingPlatformCommandLineArguments>
    <TestingPlatformCommandLineArguments Condition="'$(TestClass)' != ''">$(TestingPlatformCommandLineArguments) --filter-class $(TestClass)</TestingPlatformCommandLineArguments>
    <TestingPlatformCommandLineArguments Condition="'$(TestNamespace)' != ''">$(TestingPlatformCommandLineArguments) --filter-namespace $(TestNamespace)</TestingPlatformCommandLineArguments>

    <TestCaptureOutput Condition="'$(TestCaptureOutput)' == '' and '$(ContinuousIntegrationBuild)' == 'true'">true</TestCaptureOutput>
    <!-- don't capture on local runs -->
    <TestCaptureOutput Condition="'$(TestCaptureOutput)' == ''">false</TestCaptureOutput>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(XunitRunnerJson)" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <Target Name="ZipTestArchive" AfterTargets="Build"
          Condition=" '$(IsTestProject)' == 'true' and '$(PrepareForHelix)' == 'true' and '$(RunOnAzdoHelix)' == 'true' and '$(IsTestUtilityProject)' != 'true' and '$(IsCrossTargetingBuild)' != 'true'">
    <Error Condition="'$(TestArchiveTestsDir)' == ''" Text="TestArchiveTestsDir property to archive the test folder must be set." />
    <PropertyGroup>
      <TestsArchiveSourceDir Condition="'$(TestsArchiveSourceDir)' == ''">$(OutDir)</TestsArchiveSourceDir>
      <ZipTestArchiveTfm></ZipTestArchiveTfm>
      <ZipTestArchiveTfm Condition="'$(TargetFramework)' != '$(DefaultTargetFramework)'">-$(TargetFramework)</ZipTestArchiveTfm>
    </PropertyGroup>

    <MakeDir Directories="$(TestArchiveTestsDir)" />
    <ZipDirectory SourceDirectory="$(TestsArchiveSourceDir)"
                  DestinationFile="$([MSBuild]::NormalizePath($(TestArchiveTestsDir), '$(MSBuildProjectName)$(ZipTestArchiveTfm).zip'))"
                  Overwrite="true" />
  </Target>

  <!-- Enhanced test splitting with auto-detection -->
  <Target Name="ExtractTestClassNames"
          BeforeTargets="ZipTestArchive"
          Condition=" '$(IsTestProject)' == 'true' and '$(SplitTestsOnCI)' == 'true' and ('$(PrepareForHelix)' == 'true' or '$(GenerateCIPartitions)' == 'true') and '$(IsTestUtilityProject)' != 'true'">

    <Error Condition="'$(TestClassNamesPrefix)' == ''"
           Text="%24(TestClassNamesPrefix) must be set when SplitTestsOnCI=true. Example: -p:TestClassNamesPrefix=Aspire.Hosting.Tests" />

    <Message Text="[$(MSBuildProjectName)] Starting test metadata extraction with auto-detection..." Importance="High" />

    <PropertyGroup>
      <!-- Path to discovery helper script -->
      <_DiscoveryScriptPath>$(RepoRoot)eng\scripts\split-test-projects-for-ci.ps1</_DiscoveryScriptPath>

      <!-- Output files -->
      <_TestListFile>$(TestArchiveTestsDir)$(MSBuildProjectName).tests.list</_TestListFile>
      <_TestListFileAbs>$([MSBuild]::NormalizePath('$(RepoRoot)', '$(_TestListFile)'))</_TestListFileAbs>
      <_MetadataFile>$(TestArchiveTestsDir)$(MSBuildProjectName).tests.metadata.json</_MetadataFile>
      <_MetadataFileAbs>$([MSBuild]::NormalizePath('$(RepoRoot)', '$(_MetadataFile)'))</_MetadataFileAbs>

      <!-- Normalize path separators for cross-platform compatibility -->
      <_RelativeProjectPath>$(MSBuildProjectDirectory.Replace('$(RepoRoot)', ''))</_RelativeProjectPath>
      <_RelativeProjectPath>$(_RelativeProjectPath.Replace('\', '/'))</_RelativeProjectPath>

      <!-- Collections to skip (if any) -->
      <_CollectionsToSkip Condition="'$(TestCollectionsToSkipSplitting)' != ''">$(TestCollectionsToSkipSplitting)</_CollectionsToSkip>
      <_CollectionsToSkip Condition="'$(TestCollectionsToSkipSplitting)' == ''"></_CollectionsToSkip>
    </PropertyGroup>

    <!-- Ensure output directory exists -->
    <MakeDir Directories="$(TestArchiveTestsDir)" />

    <!-- Write initial metadata file for the script to update -->
    <ItemGroup>
      <_InitialMetadataLines Include="{" />
      <_InitialMetadataLines Include="  &quot;projectName&quot;: &quot;$(MSBuildProjectName)&quot;," />
      <_InitialMetadataLines Include="  &quot;testClassNamesPrefix&quot;: &quot;$(TestClassNamesPrefix)&quot;," />
      <_InitialMetadataLines Include="  &quot;testProjectPath&quot;: &quot;$(_RelativeProjectPath)/$(MSBuildProjectFile)&quot;," />
      <_InitialMetadataLines Include="  &quot;requiresNugets&quot;: &quot;$(RequiresNugets)&quot;," />
      <_InitialMetadataLines Include="  &quot;requiresTestSdk&quot;: &quot;$(RequiresTestSdk)&quot;," />
      <_InitialMetadataLines Include="  &quot;testSessionTimeout&quot;: &quot;$(TestSessionTimeout)&quot;," />
      <_InitialMetadataLines Include="  &quot;testHangTimeout&quot;: &quot;$(TestHangTimeout)&quot;," />
      <_InitialMetadataLines Include="  &quot;uncollectedTestsSessionTimeout&quot;: &quot;$(UncollectedTestsSessionTimeout)&quot;," />
      <_InitialMetadataLines Include="  &quot;uncollectedTestsHangTimeout&quot;: &quot;$(UncollectedTestsHangTimeout)&quot;" />
      <_InitialMetadataLines Include="}" />
    </ItemGroup>

    <WriteLinesToFile File="$(_MetadataFileAbs)"
                      Lines="@(_InitialMetadataLines)"
                      Overwrite="true" />

    <!-- Call PowerShell discovery helper (optimized to only run list-tests when needed) -->
    <Message Text="[$(MSBuildProjectName)] Running discovery helper..." Importance="High" />

    <PropertyGroup>
      <_PwshCommand>pwsh</_PwshCommand>
      <_PwshCommand Condition="'$(OS)' == 'Windows_NT'">powershell</_PwshCommand>
      <_TestAssemblyPath>$(TargetDir)$(TargetFileName)</_TestAssemblyPath>
      <_DiscoveryCommand>$(_PwshCommand) -NoProfile -ExecutionPolicy Bypass -File &quot;$(_DiscoveryScriptPath)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -TestAssemblyPath &quot;$(_TestAssemblyPath)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -RunCommand &quot;$(RunCommand)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -TestClassNamesPrefix &quot;$(TestClassNamesPrefix)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand Condition="'$(_CollectionsToSkip)' != ''">$(_DiscoveryCommand) -TestCollectionsToSkip &quot;$(_CollectionsToSkip)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -OutputListFile &quot;$(_TestListFileAbs)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -MetadataJsonFile &quot;$(_MetadataFileAbs)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -RepoRoot &quot;$(RepoRoot)&quot;</_DiscoveryCommand>
    </PropertyGroup>

    <Exec Command="$(_DiscoveryCommand)"
          IgnoreExitCode="false"
          WorkingDirectory="$(RepoRoot)" />

    <!-- Verify output file was created -->
    <Error Condition="!Exists('$(_TestListFileAbs)')"
           Text="Discovery helper failed to generate test list file: $(_TestListFileAbs)" />

    <Message Text="[$(MSBuildProjectName)] âœ… Test metadata extraction complete!" Importance="High" />
    <Message Text="[$(MSBuildProjectName)] Files: $(_TestListFile), $(_MetadataFile)" Importance="High" />
  </Target>

  <Import Project="$(TestsSharedDir)Aspire.Templates.Testing.targets" Condition="'$(IsTemplateTestProject)' == 'true'" />
  <Import Project="$(RepositoryEngineeringDir)Testing.targets" />
</Project>
