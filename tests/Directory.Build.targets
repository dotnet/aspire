<Project>

  <!---

    1. runscript template .sh/.cmd in eng
      - configurable path for this to have custom ones
      - template has hooks for adding in commands, setup, post stuff
    2. target that generates the script
      - by running replacetext on the script with the commands
    3. csproj has the commands

    4. default command is just `dotnet test ..`
    5. default helix targets file that invokes runtests.sh

  -->
  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))" />

  <Import Project="$(TestsSharedRepoTestingDir)Aspire.RepoTesting.targets" />

  <PropertyGroup>
    <!-- forward the settings file path to RunTests target in arcade -->
    <VSTestRunSettingsFile Condition="'$(VSTestRunSettingsFile)' == ''">$(RunSettingsFilePath)</VSTestRunSettingsFile>

    <DeployRunSettingsFile Condition="'$(DeployRunSettingsFile)' == ''">true</DeployRunSettingsFile>
    <XunitRunnerJson Condition="'$(XunitRunnerJson)' == ''">$(RepositoryEngineeringDir)testing\xunit.runner.json</XunitRunnerJson>

    <RunTestsScriptTemplatePath Condition="'$(RunTestsScriptTemplatePath)' == '' and '$(OS)' == 'Windows_NT'">$(RepositoryEngineeringDir)testing\RunTestsTemplate.cmd.in</RunTestsScriptTemplatePath>
    <RunTestsScriptTemplatePath Condition="'$(RunTestsScriptTemplatePath)' == '' and '$(OS)' != 'Windows_NT'">$(RepositoryEngineeringDir)testing\RunTestsTemplate.sh.in</RunTestsScriptTemplatePath>

    <RunTestsOnHelix Condition="'$(RunTestsOnHelix)' == '' and ('$(IsTestProject)' == 'true' and '$(IsTestSupportProject)' != 'true')">true</RunTestsOnHelix>
    <SkipTests Condition="'$(SkipTests)' == '' and ('$(IsTestSupportProject)' == 'true' or '$(RunTestsOnHelix)' == 'true')">true</SkipTests>

    <!-- FIXME: allow running without cov locally? -->
    <RunWithCodeCoverage Condition="'$(RunWithCodeCoverage)' == '' and '$(ContinuousIntegrationBuild)' == 'true'">true</RunWithCodeCoverage>
    <!-- FIXME: move here from helix targets? -->
    <TestSessionTimeoutForHelix Condition="'$(TestSessionTimeoutForHelix)' == ''">600000</TestSessionTimeoutForHelix>

    <RunScriptOutputRelativePath Condition="'$(RunScriptOutputRelativePath)' == '' and '$(OS)' != 'Windows_NT'">RunTests.sh</RunScriptOutputRelativePath>
    <RunScriptOutputRelativePath Condition="'$(RunScriptOutputRelativePath)' == '' and '$(OS)' == 'Windows_NT'">RunTests.cmd</RunScriptOutputRelativePath>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(RunSettingsFilePath)" CopyToOutputDirectory="PreserveNewest" Condition="'$(DeployRunSettingsFile)' == 'true'" />
    <None Include="$(XunitRunnerJson)" CopyToOutputDirectory="PreserveNewest" />
    <None Condition="'$(RunWithCodeCoverage)' == 'true'" Include="$(RepoRoot)eng\CodeCoverage.config" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <PropertyGroup Condition="'$(RunTestsOnHelix)' == 'true' and '$(IsTestProject)' == 'true'">
    <_ExtraTestArgsEnvVar Condition="'$(OS)' != 'Windows_NT'">$ExtraTestArgs</_ExtraTestArgsEnvVar>
    <_ExtraTestArgsEnvVar Condition="'$(OS)' == 'Windows_NT'">%ExtraTestArgs%</_ExtraTestArgsEnvVar>

    <_TestFilterArgEnvVar Condition="'$(OS)' != 'Windows_NT'">$TestFilterArg</_TestFilterArgEnvVar>
    <_TestFilterArgEnvVar Condition="'$(OS)' == 'Windows_NT'">%TestFilterArg%</_TestFilterArgEnvVar>

    <_HelixCorrelationPayloadEnvVar Condition="'$(OS)' != 'Windows_NT'">$HELIX_CORRELATION_PAYLOAD</_HelixCorrelationPayloadEnvVar>
    <_HelixCorrelationPayloadEnvVar Condition="'$(OS)' == 'Windows_NT'">%HELIX_CORRELATION_PAYLOAD%</_HelixCorrelationPayloadEnvVar>

    <_CodeCoverageToolEnvVar Condition="'$(OS)' != 'Windows_NT'">$COVERAGE_TOOL_CMD</_CodeCoverageToolEnvVar>
    <_CodeCoverageToolEnvVar Condition="'$(OS)' == 'Windows_NT'">%COVERAGE_TOOL_CMD%</_CodeCoverageToolEnvVar>

    <_CodeCoverageReportFileNameSuffixEnvVar Condition="'$(OS)' != 'Windows_NT'">${CODE_COV_FILE_SUFFIX}</_CodeCoverageReportFileNameSuffixEnvVar>
    <_CodeCoverageReportFileNameSuffixEnvVar Condition="'$(OS)' == 'Windows_NT'">%CODE_COV_FILE_SUFFIX%</_CodeCoverageReportFileNameSuffixEnvVar>

    <_LogsPathEnvVar Condition="'$(OS)' != 'Windows_NT'">$LOGS_PATH</_LogsPathEnvVar>
    <_LogsPathEnvVar Condition="'$(OS)' == 'Windows_NT'">%LOGS_PATH%</_LogsPathEnvVar>
  </PropertyGroup>

  <ItemGroup Condition="'$(RunTestsOnHelix)' == 'true' and '$(IsTestProject)' == 'true'">
    <_TestCoverageCommand Include="$(_CodeCoverageToolEnvVar) collect" />
    <_TestCoverageCommand Include="--settings CodeCoverage.config" />
    <!-- FIXME: _CodeCoverageReportFileNameSuffixEnvVar -->
    <_TestCoverageCommand Include="--output $(_LogsPathEnvVar)/$(MSBuildProjectName)$(_CodeCoverageReportFileNameSuffixEnvVar).cobertura.xml" />

    <TestBlameArguments Include="--blame-hang" />
    <TestBlameArguments Include="--blame-hang-dump-type full" />
    <TestBlameArguments Include="--blame-hang-timeout 10m" />
    <TestBlameArguments Include="--blame-crash" />
    <TestBlameArguments Include="--blame-crash-dump-type full" />
  </ItemGroup>

  <Target Name="ZipTestArchive" AfterTargets="Build" Condition="'$(ArchiveTests)' == 'true' and '$(RunTestsOnHelix)' == 'true'">
    <Error Condition="'$(TestArchiveTestsDir)' == ''" Text="TestArchiveTestsDir property to archive the test folder must be set." />
    <PropertyGroup>
      <TestsArchiveSourceDir Condition="'$(TestsArchiveSourceDir)' == ''">$(OutDir)</TestsArchiveSourceDir>
    </PropertyGroup>

    <MakeDir Directories="$(TestArchiveTestsDir)" />
    <ZipDirectory SourceDirectory="$(TestsArchiveSourceDir)"
                  DestinationFile="$([MSBuild]::NormalizePath('$(TestArchiveTestsDir)', '$(MSBuildProjectName).zip'))"
                  Overwrite="true" />
  </Target>

  <!-- Used for running one helix job per test class -->
  <Target Name="_ExtractTestClassNames"
          Condition="'$(ExtractTestClassNamesForHelix)' == 'true'"
          BeforeTargets="ZipTestArchive">

    <Error Condition="'$(ExtractTestClassNamesPrefix)' == ''"
           Text="%24(ExtractTestClassNamesPrefix) should be set, for example - Aspire.Workload.Tests" />

    <Exec Command="&quot;$(DotNetTool)&quot; test --no-build -c $(Configuration) -s $(RunSettingsFilePath) --list-tests --nologo -v:q -p:VsTestUseMSBuildOutput=false" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="_ListOfTestsLines" />
    </Exec>

    <PropertyGroup>
      <_Regex>^\s*($(ExtractTestClassNamesPrefix)[^\($]+)</_Regex>
    </PropertyGroup>
    <ItemGroup>
      <_TestLines0 Include="$([System.Text.RegularExpressions.Regex]::Match('%(_ListOfTestsLines.Identity)', '$(_Regex)'))" />
      <TestClassName Include="$([System.IO.Path]::GetFileNameWithoutExtension('%(_TestLines0.Identity)'))" />
    </ItemGroup>

    <Error Text="No $(ExtractTestClassNamesPrefix) test classes found!" Condition="'@(TestClassName)' == ''" />

    <WriteLinesToFile File="$(TestArchiveTestsDir)$(MSBuildProjectName).tests.list"
                      Lines="@(TestClassName->Distinct())"
                      Overwrite="true" />
  </Target>

  <UsingTask TaskName="GenerateRunScript"
      TaskFactory="RoslynCodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <TemplateFile ParameterType="System.String" Required="true" />
      <Output ParameterType="System.String" Required="true" />
      <PreCommands ParameterType="System.String[]" Required="false" />
      <RunCommands ParameterType="System.String[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          if (RunCommands.Length == 0)
          {
            Log.LogError($"No {nameof(RunCommands)} specified for template file {TemplateFile}.");
            return false;
          }
          Directory.CreateDirectory(Path.GetDirectoryName(Output));
          var sourceText = File.ReadAllText(TemplateFile);

          if (PreCommands?.Length > 0)
          {
            sourceText = sourceText.Replace("@PreCommands@", string.Join(Environment.NewLine, PreCommands));
          }
          else
          {
            sourceText = sourceText.Replace("@PreCommands@", "");
          }

          sourceText = sourceText.Replace("@RunCommands@", string.Join(Environment.NewLine, RunCommands));

          File.WriteAllText(Output, sourceText);
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="GenerateRunScript" BeforeTargets="ZipTestArchive" Condition="'$(ArchiveTests)' == 'true' and '$(RunTestsOnHelix)' == 'true' and '$(IsTestProject)' == 'true'">
    <!-- TODO: error empty run commands -->
    <PropertyGroup>
      <!-- FIXME: this is in a target, properties not required -->
      <_TestBlameArgumentsProperty>@(TestBlameArguments, ' ')</_TestBlameArgumentsProperty>
      <_TestCoverageCommandProperty>@(_TestCoverageCommand, ' ')</_TestCoverageCommandProperty>

      <RunScriptTestCommand Condition="'$(RunScriptTestCommand)' == ''">dotnet test -s .runsettings $(MSBuildProjectName).dll --ResultsDirectory:$(_LogsPathEnvVar) $(_TestBlameArgumentsProperty) --filter &quot;$(_TestFilterArgEnvVar)&quot; $(_ExtraTestArgsEnvVar) -- RunConfiguration.TestSessionTimeout=$(TestSessionTimeoutForHelix)</RunScriptTestCommand>
      <RunScriptRunCommand Condition="'$(RunWithCodeCoverage)' == 'true'">$(_TestCoverageCommandProperty) &quot;$(RunScriptTestCommand)&quot;</RunScriptRunCommand>
      <RunScriptRunCommand Condition="'$(RunWithCodeCoverage)' != 'true'">$(RunScriptTestCommand)</RunScriptRunCommand>
    </PropertyGroup>

    <!-- FIXME: null checks -->
    <GenerateRunScript
        TemplateFile="$(RunTestsScriptTemplatePath)"
        Output="$(OutDir)$(RunScriptOutputRelativePath)"
        PreCommands="@(RunScriptPreCommand)"
        RunCommands="$(RunScriptRunCommand)"
    />
  </Target>

  <Import Project="$(TestsSharedDir)Aspire.Workload.Testing.targets" Condition="'$(IsWorkloadTestProject)' == 'true'" />
</Project>
