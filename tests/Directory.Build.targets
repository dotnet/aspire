<Project>
  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))" />

  <Import Project="$(TestsSharedRepoTestingDir)Aspire.RepoTesting.targets" />

  <PropertyGroup>
    <!-- Use a separate xunit.runner.json for helix that disables parallel test runs -->
    <XunitRunnerJson Condition="'$(XunitRunnerJson)' == '' and '$(PrepareForHelix)' == 'true'">$(RepoRoot)tests\helix\xunit.runner.json</XunitRunnerJson>
    <XunitRunnerJson Condition="'$(XunitRunnerJson)' == ''">$(RepositoryEngineeringDir)testing\xunit.runner.json</XunitRunnerJson>

    <!-- Properties to allow control tests to run, useful for local command line runs -->
    <TestingPlatformCommandLineArguments Condition="'$(TestMethod)' != ''">$(TestingPlatformCommandLineArguments) --filter-method $(TestMethod)</TestingPlatformCommandLineArguments>
    <TestingPlatformCommandLineArguments Condition="'$(TestClass)' != ''">$(TestingPlatformCommandLineArguments) --filter-class $(TestClass)</TestingPlatformCommandLineArguments>
    <TestingPlatformCommandLineArguments Condition="'$(TestNamespace)' != ''">$(TestingPlatformCommandLineArguments) --filter-namespace $(TestNamespace)</TestingPlatformCommandLineArguments>

    <TestCaptureOutput Condition="'$(TestCaptureOutput)' == '' and '$(ContinuousIntegrationBuild)' == 'true'">true</TestCaptureOutput>
    <!-- don't capture on local runs -->
    <TestCaptureOutput Condition="'$(TestCaptureOutput)' == ''">false</TestCaptureOutput>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(XunitRunnerJson)" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <Target Name="ZipTestArchive" AfterTargets="Build"
          Condition=" '$(IsTestProject)' == 'true' and '$(PrepareForHelix)' == 'true' and '$(RunOnAzdoHelix)' == 'true' and '$(IsTestUtilityProject)' != 'true' and '$(IsCrossTargetingBuild)' != 'true'">
    <Error Condition="'$(TestArchiveTestsDir)' == ''" Text="TestArchiveTestsDir property to archive the test folder must be set." />
    <PropertyGroup>
      <TestsArchiveSourceDir Condition="'$(TestsArchiveSourceDir)' == ''">$(OutDir)</TestsArchiveSourceDir>
      <ZipTestArchiveTfm></ZipTestArchiveTfm>
      <ZipTestArchiveTfm Condition="'$(TargetFramework)' != '$(DefaultTargetFramework)'">-$(TargetFramework)</ZipTestArchiveTfm>
    </PropertyGroup>

    <MakeDir Directories="$(TestArchiveTestsDir)" />
    <ZipDirectory SourceDirectory="$(TestsArchiveSourceDir)"
                  DestinationFile="$([MSBuild]::NormalizePath($(TestArchiveTestsDir), '$(MSBuildProjectName)$(ZipTestArchiveTfm).zip'))"
                  Overwrite="true" />
  </Target>

  <!-- Used for running one helix job per test class (legacy mechanism) -->
  <Target Name="ExtractTestClassNames"
          Condition=" '$(IsTestProject)' == 'true' and '$(ExtractTestClassNamesForHelix)' == 'true' and '$(SplitTestsOnCI)' != 'true' and '$(PrepareForHelix)' == 'true' and '$(IsTestUtilityProject)' != 'true'"
          BeforeTargets="ZipTestArchive">

    <Error Condition="'$(ExtractTestClassNamesPrefix)' == ''"
           Text="%24(ExtractTestClassNamesPrefix) should be set, for example - Aspire.Templates.Tests" />

    <Exec Command="&quot;$(RunCommand)&quot; --filter-not-trait category=failing --list-tests" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="_ListOfTestsLines" />
    </Exec>

    <PropertyGroup>
      <_Regex>^\s*($(ExtractTestClassNamesPrefix)[^\($]+)</_Regex>
    </PropertyGroup>
    <ItemGroup>
      <_TestLines0 Include="$([System.Text.RegularExpressions.Regex]::Match('%(_ListOfTestsLines.Identity)', '$(_Regex)'))" />
      <TestClassName Include="$([System.IO.Path]::GetFileNameWithoutExtension('%(_TestLines0.Identity)'))" />
    </ItemGroup>

    <ItemGroup>
      <UniqueTestClassNamesFiltered Include="@(TestClassName->Distinct())" Exclude="@(TestClassNamesToSkipTests)" />
    </ItemGroup>

    <Error Text="No $(ExtractTestClassNamesPrefix) test classes found!" Condition="'@(TestClassName)' == ''" />

    <WriteLinesToFile File="$(TestArchiveTestsDir)$(MSBuildProjectName).tests.list"
                      Lines="@(UniqueTestClassNamesFiltered)"
                      Overwrite="true" />
  </Target>

  <!-- Enhanced test splitting with auto-detection (v3) -->
  <Target Name="ExtractTestClassNamesV3"
          Condition=" '$(IsTestProject)' == 'true' and '$(SplitTestsOnCI)' == 'true' and '$(PrepareForHelix)' == 'true' and '$(IsTestUtilityProject)' != 'true'"
          BeforeTargets="ZipTestArchive">

    <Error Condition="'$(TestClassNamesPrefix)' == ''"
           Text="%24(TestClassNamesPrefix) must be set when SplitTestsOnCI=true. Example: -p:TestClassNamesPrefix=Aspire.Hosting.Tests" />

    <Message Text="[$(MSBuildProjectName)] Starting test metadata extraction (v3 auto-detection)..." Importance="High" />

    <!-- Run test assembly to list all tests -->
    <Exec Command="&quot;$(RunCommand)&quot; --filter-not-trait category=failing --list-tests" 
          ConsoleToMSBuild="true"
          IgnoreExitCode="false">
      <Output TaskParameter="ConsoleOutput" ItemName="_TestAssemblyOutput" />
    </Exec>

    <PropertyGroup>
      <!-- Path to discovery helper script -->
      <_DiscoveryScriptPath>$(RepoRoot)eng\scripts\extract-test-metadata.ps1</_DiscoveryScriptPath>
      
      <!-- Output files -->
      <_TestListFile>$(TestArchiveTestsDir)$(MSBuildProjectName).tests.list</_TestListFile>
      <_MetadataFile>$(TestArchiveTestsDir)$(MSBuildProjectName).tests.metadata.json</_MetadataFile>
      
      <!-- Normalize path separators for cross-platform compatibility -->
      <_RelativeProjectPath>$(MSBuildProjectDirectory.Replace('$(RepoRoot)', ''))</_RelativeProjectPath>
      <_RelativeProjectPath>$(_RelativeProjectPath.Replace('\', '/'))</_RelativeProjectPath>
      
      <!-- Collections to skip (if any) -->
      <_CollectionsToSkip Condition="'$(TestCollectionsToSkipSplitting)' != ''">$(TestCollectionsToSkipSplitting)</_CollectionsToSkip>
      <_CollectionsToSkip Condition="'$(TestCollectionsToSkipSplitting)' == ''"></_CollectionsToSkip>
    </PropertyGroup>

    <!-- Ensure output directory exists -->
    <MakeDir Directories="$(TestArchiveTestsDir)" />

    <!-- Create temporary file with test assembly output -->
    <PropertyGroup>
      <_TempOutputFile>$(TestArchiveTestsDir)$(MSBuildProjectName).tests.output.tmp</_TempOutputFile>
    </PropertyGroup>

    <WriteLinesToFile File="$(_TempOutputFile)"
                      Lines="@(_TestAssemblyOutput)"
                      Overwrite="true" />

    <!-- Write initial metadata file for the script to update -->
    <ItemGroup>
      <_InitialMetadataLines Include="{" />
      <_InitialMetadataLines Include="  &quot;projectName&quot;: &quot;$(MSBuildProjectName)&quot;," />
      <_InitialMetadataLines Include="  &quot;testClassNamesPrefix&quot;: &quot;$(TestClassNamesPrefix)&quot;," />
      <_InitialMetadataLines Include="  &quot;testProjectPath&quot;: &quot;$(_RelativeProjectPath)/$(MSBuildProjectFile)&quot;," />
      <_InitialMetadataLines Include="  &quot;requiresNugets&quot;: &quot;$(RequiresNugetsForSplitTests)&quot;," />
      <_InitialMetadataLines Include="  &quot;requiresTestSdk&quot;: &quot;$(RequiresTestSdkForSplitTests)&quot;," />
      <_InitialMetadataLines Include="  &quot;testSessionTimeout&quot;: &quot;$(SplitTestSessionTimeout)&quot;," />
      <_InitialMetadataLines Include="  &quot;testHangTimeout&quot;: &quot;$(SplitTestHangTimeout)&quot;," />
      <_InitialMetadataLines Include="  &quot;uncollectedTestsSessionTimeout&quot;: &quot;$(UncollectedTestsSessionTimeout)&quot;," />
      <_InitialMetadataLines Include="  &quot;uncollectedTestsHangTimeout&quot;: &quot;$(UncollectedTestsHangTimeout)&quot;," />
      <_InitialMetadataLines Include="  &quot;enablePlaywrightInstall&quot;: &quot;$(EnablePlaywrightInstallForSplitTests)&quot;" />
      <_InitialMetadataLines Include="}" />
    </ItemGroup>

    <WriteLinesToFile File="$(_MetadataFile)"
                      Lines="@(_InitialMetadataLines)"
                      Overwrite="true" />

    <!-- Call PowerShell discovery helper -->
    <Message Text="[$(MSBuildProjectName)] Running discovery helper..." Importance="High" />
    
    <PropertyGroup>
      <_PwshCommand>pwsh</_PwshCommand>
      <_PwshCommand Condition="'$(OS)' == 'Windows_NT'">powershell</_PwshCommand>
      <_TestAssemblyPath>$(TargetDir)$(TargetFileName)</_TestAssemblyPath>
      <_DiscoveryCommand>$(_PwshCommand) -NoProfile -ExecutionPolicy Bypass -File &quot;$(_DiscoveryScriptPath)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -TestAssemblyOutputFile &quot;$(_TempOutputFile)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -TestAssemblyPath &quot;$(_TestAssemblyPath)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -TestClassNamesPrefix &quot;$(TestClassNamesPrefix)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand Condition="'$(_CollectionsToSkip)' != ''">$(_DiscoveryCommand) -TestCollectionsToSkip &quot;$(_CollectionsToSkip)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -OutputListFile &quot;$(_TestListFile)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -MetadataJsonFile &quot;$(_MetadataFile)&quot;</_DiscoveryCommand>
      <_DiscoveryCommand>$(_DiscoveryCommand) -RepoRoot &quot;$(RepoRoot)&quot;</_DiscoveryCommand>
    </PropertyGroup>

    <Exec Command="$(_DiscoveryCommand)" 
          IgnoreExitCode="false" 
          WorkingDirectory="$(RepoRoot)" />

    <!-- Clean up temp file -->
    <Delete Files="$(_TempOutputFile)" />

    <!-- Verify output file was created -->
    <Error Condition="!Exists('$(_TestListFile)')"
           Text="Discovery helper failed to generate test list file: $(_TestListFile)" />

    <Message Text="[$(MSBuildProjectName)] âœ… Test metadata extraction complete!" Importance="High" />
    <Message Text="[$(MSBuildProjectName)] Files: $(_TestListFile), $(_MetadataFile)" Importance="High" />
  </Target>

  <Target Name="GetRunTestsOnGithubActions" Returns="@(TestProject)">
    <ItemGroup>
      <TestProject Condition="'$(BuildOs)' == 'windows'" 
                   Include="$(MSBuildProjectFullPath)" 
                   RunTestsOnGithubActions="$(RunOnGithubActionsWindows)" 
                   SplitTests="$(SplitTestsOnCI)" />
      <TestProject Condition="'$(BuildOs)' == 'linux'" 
                   Include="$(MSBuildProjectFullPath)" 
                   RunTestsOnGithubActions="$(RunOnGithubActionsLinux)" 
                   SplitTests="$(SplitTestsOnCI)" />
      <TestProject Condition="'$(BuildOs)' == 'darwin'" 
                   Include="$(MSBuildProjectFullPath)" 
                   RunTestsOnGithubActions="$(RunOnGithubActionsMacOS)" 
                   SplitTests="$(SplitTestsOnCI)" />
    </ItemGroup>
  </Target>

  <Import Project="$(TestsSharedDir)Aspire.Templates.Testing.targets" Condition="'$(IsTemplateTestProject)' == 'true'" />
  <Import Project="$(RepositoryEngineeringDir)Testing.targets" />
</Project>
