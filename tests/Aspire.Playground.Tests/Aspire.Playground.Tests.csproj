<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(NetCurrent)</TargetFramework>

    <!-- Set this explicitly so the project can build without arcade -->
    <IsTestProject>true</IsTestProject>

    <!-- no docker support on helix/windows yet -->
    <RunTestsOnHelix Condition="'$(OS)' != 'Windows_NT'">true</RunTestsOnHelix>
    <SkipTests Condition="'$(OS)' == 'Windows_NT'">true</SkipTests>

    <DeployOutsideOfRepoSupportFilesRelativeDir>staging-archive\</DeployOutsideOfRepoSupportFilesRelativeDir>

    <TestArchiveTestsDir>$(TestArchiveTestsDirForBuildOnHelixTests)</TestArchiveTestsDir>

    <PlaygroundSourceDir>$(MSBuildThisFileDirectory)..\..\playground\</PlaygroundSourceDir>
    <TestsSharedDir>$(MSBuildThisFileDirectory)..\Shared\</TestsSharedDir>
    <RunSettingsFilePath>$(MSBuildThisFileDirectory).runsettings</RunSettingsFilePath>

    <!-- We build the project on helix -->
    <RunScriptTestRequiresBuild>true</RunScriptTestRequiresBuild>
    <RunScriptTestBaseCommand>dotnet test --no-build -s .runsettings</RunScriptTestBaseCommand>
    <!-- 20 mins -->
    <TestSessionTimeoutForHelix>1200000</TestSessionTimeoutForHelix>

    <RunScriptOutputRelativePath>$(DeployOutsideOfRepoSupportFilesRelativeDir)/RunTests</RunScriptOutputRelativePath>
    <RunScriptOutputRelativePath Condition="'$(OS)' != 'Windows_NT'">$(RunScriptOutputRelativePath).sh</RunScriptOutputRelativePath>
    <RunScriptOutputRelativePath Condition="'$(OS)' == 'Windows_NT'">$(RunScriptOutputRelativePath).cmd</RunScriptOutputRelativePath>

    <!-- Skip EventHubs emulation in CI environments where Docker Desktop is not available.
          For more information, see https://github.com/dotnet/aspire/issues/5325. -->
    <SkipEventHubsEmulation Condition="'$(SkipEventHubsEmulation)' == '' and ('$(RepoRoot)' == '' or '$(ContinuousIntegrationBuild)' == 'true' or '$(CODESPACES)' == 'true')">true</SkipEventHubsEmulation>
  </PropertyGroup>

  <PropertyGroup Condition="'$(SkipEventHubsEmulation)' == 'true'">
    <DefineConstants>SKIP_EVENTHUBS_EMULATION;$(DefineConstants)</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <!-- on helix, the file will be in the source directory, so it will get
         picked up by msbuild by default -->
    <Compile Condition="'$(RepoRoot)' != ''" Include="$(RepoRoot)src\Aspire.Hosting\Utils\PasswordGenerator.cs" />
    <Compile Condition="'$(RepoRoot)' != ''" Include="$(RepoRoot)tests\Aspire.Hosting.Tests\Utils\LoggerNotificationExtensions.cs" />
    <Compile Condition="'$(RepoRoot)' != ''" Include="$(RepoRoot)tests\Aspire.Components.Common.Tests\Requires*.cs" />
    <Compile Condition="'$(RepoRoot)' != ''" Include="$(RepoRoot)tests\Aspire.Components.Common.Tests\FileUtil.cs" />
    <Compile Condition="'$(RepoRoot)' != ''" Include="$(RepoRoot)tests\Aspire.Components.Common.Tests\PlatformDetection.cs" />
    <Compile Include="$(TestsSharedDir)Logging\*.cs" />

    <AspireProjectOrPackageReference Include="Aspire.Hosting" />
    <AspireProjectOrPackageReference Include="Aspire.Hosting.NodeJs" />
    <AspireProjectOrPackageReference Include="Aspire.Hosting.Testing" />

    <PackageReference Include="Microsoft.DotNet.XUnitExtensions" />
    <PackageReference Include="Microsoft.Extensions.Diagnostics.Testing" />
    <PackageReference Include="Microsoft.Extensions.Http.Resilience" />

    <ProjectReference Include="$(PlaygroundSourceDir)AzureStorageEndToEnd/AzureStorageEndToEnd.AppHost/AzureStorageEndToEnd.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)AzureFunctionsEndToEnd/AzureFunctionsEndToEnd.AppHost/AzureFunctionsEndToEnd.AppHost.csproj" Condition="'$(ContinuousIntegrationBuild)' != 'true'" />
    <ProjectReference Include="$(PlaygroundSourceDir)CosmosEndToEnd/CosmosEndToEnd.AppHost/CosmosEndToEnd.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)ParameterEndToEnd/ParameterEndToEnd.AppHost/ParameterEndToEnd.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)PostgresEndToEnd/PostgresEndToEnd.AppHost/PostgresEndToEnd.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)ProxylessEndToEnd/ProxylessEndToEnd.AppHost/ProxylessEndToEnd.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)Qdrant/Qdrant.AppHost/Qdrant.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)SqlServerEndToEnd/SqlServerEndToEnd.AppHost/SqlServerEndToEnd.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)TestShop/TestShop.AppHost/TestShop.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)kafka/KafkaBasic.AppHost/KafkaBasic.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)keycloak/Keycloak.AppHost/Keycloak.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)milvus/MilvusPlayground.AppHost/MilvusPlayground.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)withdockerfile/WithDockerfile.AppHost/WithDockerfile.AppHost.csproj" />

    <!-- Issue: https://github.com/dotnet/aspire/issues/5274 -->
    <!-- Only `dotnet run` startup checked -->
    <ProjectReference Include="$(PlaygroundSourceDir)mongo/Mongo.AppHost/Mongo.AppHost.csproj" />

    <ProjectReference Include="$(PlaygroundSourceDir)mysql/MySqlDb.AppHost/MySqlDb.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)nats/Nats.AppHost/Nats.AppHost.csproj" />
    <ProjectReference Include="$(PlaygroundSourceDir)seq/Seq.AppHost/Seq.AppHost.csproj" />

    <Using Include="Aspire.Hosting.Testing" />
  </ItemGroup>

  <ItemGroup Condition="'$(ArchiveTests)' == 'true'" Label="Prepare archive dir for helix">
    <None Include="$(MSBuildProjectDirectory)\**\*" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)tests\$(MSBuildProjectName)\%(RecursiveDir)%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(RepoRoot)tests\Aspire.Components.Common.Tests\Requires*.cs" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)tests\$(MSBuildProjectName)\%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(RepoRoot)tests\Aspire.Components.Common.Tests\FileUtil.cs" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)tests\$(MSBuildProjectName)\%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(RepoRoot)tests\Aspire.Components.Common.Tests\PlatformDetection.cs" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)tests\$(MSBuildProjectName)\%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(RepoRoot)src\Aspire.Hosting\Utils\PasswordGenerator.cs" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)tests\$(MSBuildProjectName)\PasswordGenerator.cs" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(RepoRoot)tests\Aspire.Hosting.Tests\Utils\LoggerNotificationExtensions.cs" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)tests\$(MSBuildProjectName)\LoggerNotificationExtensions.cs" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(RepoRoot)src\Shared\**\*" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)src\Shared\%(RecursiveDir)%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
    <None Include="$(RepoRoot)playground\**\*" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)playground\%(RecursiveDir)%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />

    <!-- The default targets expect the test assembly to be in the root dir, but we have
         the tests run from a subdir - tests/Aspire.Playground.Tests/ -->
    <None Include="$(RepositoryEngineeringDir)CodeCoverage.config" Link="$(DeployOutsideOfRepoSupportFilesRelativeDir)tests\$(MSBuildProjectName)\%(FileName)%(Extension)" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup>
    <RunScriptPreCommand Include="$(_EnvVarSetKeyword) SkipDashboardProjectReference=true" />
    <RunScriptPreCommand Include="$(_EnvVarSetKeyword) TestsRunningOutsideOfRepo=true" />
    <!-- required for tests that build docker images -->
    <RunScriptPreCommand Include="$(_EnvVarSetKeyword) DOCKER_BUILDKIT=1" />

    <RunScriptPreCommand Include="cd tests/$(MSBuildProjectName)" />
    <RunScriptPreCommand Condition="'$(OS)' != 'Windows_NT'" Include="dotnet build -bl:$(_LogsPathEnvVar)/build.binlog" />
    <RunScriptPreCommand Condition="'$(OS)' == 'Windows_NT'" Include="dotnet build -bl:$(_LogsPathEnvVar)/build.binlog || goto :error" />

    <!-- Remove the blame-hang-timeout for playground tests, as it is pretty much one
         main test running - 'TestEndpointsReturnOk'. IOW, the blame-hang timeout
         would have to be at least as long as the full TestSession timeout. -->

    <TestBlameArguments Remove="@(_TestBlameArguments)" />
    <TestBlameArguments Include="--blame-crash" />
    <TestBlameArguments Include="--blame-crash-dump-type full" />
  </ItemGroup>
</Project>
