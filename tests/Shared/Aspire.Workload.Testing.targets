<Project>
  <PropertyGroup>
    <_ShippingPackagesDir>$([MSBuild]::NormalizeDirectory($(ArtifactsDir), 'packages', $(Configuration), 'Shipping'))</_ShippingPackagesDir>

    <_GlobalJsonContent>$([System.IO.File]::ReadAllText('$(RepoRoot)global.json'))</_GlobalJsonContent>
    <_DotNetCliVersionFromGlobalJson>$([System.Text.RegularExpressions.Regex]::Match($(_GlobalJsonContent), '(%3F&lt;="dotnet": ").*(%3F=")'))</_DotNetCliVersionFromGlobalJson>
    <SdkVersionForCurrentTFM Condition="'$(SdkVersionForCurrentTFM)' == ''">$(_DotNetCliVersionFromGlobalJson)</SdkVersionForCurrentTFM>
    <SdkVersionForPreviousTFM>8.0.401</SdkVersionForPreviousTFM>

    <SdkVersionForCurrentTFM>$(SdkVersionForCurrentTFM)</SdkVersionForCurrentTFM>
    <SdkDirForCurrentTFM>$(ArtifactsBinDir)dotnet-latest\</SdkDirForCurrentTFM>
    <SdkStampPathForCurrentTFM>$(SdkDirForCurrentTFM).version-$(SdkVersionForCurrentTFM).stamp</SdkStampPathForCurrentTFM>

    <SdkDirForCurrentAndPreviousTFM>$(ArtifactsBinDir)dotnet-9+8\</SdkDirForCurrentAndPreviousTFM>
    <SdkStampPathForCurrentAndPreviousTFM>$(SdkDirForCurrentAndPreviousTFM).version-$(SdkVersionForCurrentTFM)-$(SdkVersionForPreviousTFM).stamp</SdkStampPathForCurrentAndPreviousTFM>

    <SdkVersionForPreviousTFM>$(SdkVersionForPreviousTFM)</SdkVersionForPreviousTFM>
    <SdkDirForPreviousTFM>$(ArtifactsBinDir)dotnet-8\</SdkDirForPreviousTFM>
    <SdkStampPathForPreviousTFM>$(SdkDirForPreviousTFM).version-$(SdkVersionForPreviousTFM).stamp</SdkStampPathForPreviousTFM>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)InstallSdk.props" />

  <ItemGroup>
    <PreviousRuntimeToInstallArguments Include="-Runtime dotnet -Version $(DotNetRuntimeVersionForTesting)" />
    <PreviousRuntimeToInstallArguments Include="-Runtime aspnetcore -Version $(DotNetRuntimeVersionForTesting)" />
  </ItemGroup>

  <Target Name="ProvisionSdksForTesting">

    <!-- Install For Previous tfm -->
    <MSBuild Projects="$(MSBuildThisFileDirectory)InstallSdk.targets"
             Properties="SdkVersionToInstall=$(SdkVersionForPreviousTFM);SdkTargetDir=$(SdkDirForPreviousTFM);SdkStampPath=$(SdkStampPathForPreviousTFM);ArtifactsObjDir=$(ArtifactsObjDir)"
             Targets="ProvisionSdk" />
    <Touch Files="$(SdkStampPathForPreviousTFM)" AlwaysCreate="true" />

    <!-- Install For Current tfm -->
    <MSBuild Projects="$(MSBuildThisFileDirectory)InstallSdk.targets"
             Properties="SdkVersionToInstall=$(SdkVersionForCurrentTFM);SdkTargetDir=$(SdkDirForCurrentTFM);SdkStampPath=$(SdkStampPathForCurrentTFM);ArtifactsObjDir=$(ArtifactsObjDir)"
             Targets="ProvisionSdk" />
    <Touch Files="$(SdkStampPathForCurrentTFM)" AlwaysCreate="true" />

    <CallTarget Targets="ProvisionSdkForCurrentAndPreviousTFM" />
  </Target>

  <Target Name="ProvisionSdkForCurrentAndPreviousTFM" Condition="!Exists($(SdkStampPathForCurrentAndPreviousTFM))">

    <!-- Install For Current sdk + previous runtime -->

    <!-- 1. Prepare the target dir -->
    <RemoveDir Directories="$(SdkDirForCurrentAndPreviousTFM)" />
    <MakeDir Directories="$(SdkDirForCurrentAndPreviousTFM)" />

    <!-- 2. Make a copy of current -->
    <ItemGroup>
      <_SdkCurrentFile Include="$(SdkDirForCurrentTFM)\**\*" />
    </ItemGroup>
    <Copy SourceFiles="@(_SdkCurrentFile)" DestinationFolder="$(SdkDirForCurrentAndPreviousTFM)\%(RecursiveDir)" SkipUnchangedFiles="true" />

    <!-- 3. Install previous runtimes -->
    <Exec Condition="'%(PreviousRuntimeToInstallArguments.Identity)' != '' and !$([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command="$(_DotNetInstallScriptPath) -InstallDir $(SdkDirForCurrentAndPreviousTFM) -SkipNonVersionedFiles %(PreviousRuntimeToInstallArguments.Identity)" />

    <Exec Condition="'%(PreviousRuntimeToInstallArguments.Identity)' != '' and $([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command='powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; $(_DotNetInstallScriptPath) -InstallDir $(SdkDirForCurrentAndPreviousTFM) -SkipNonVersionedFiles %(PreviousRuntimeToInstallArguments.Identity)"' />

    <Touch Files="$(SdkStampPathForCurrentAndPreviousTFM)" AlwaysCreate="true" />
  </Target>

  <Target Name="InstallSdksForTemplateTesting" DependsOnTargets="ProvisionSdksForTesting" />

  <!-- FIXME: drop this ? Anything else to remove? -->
  <Target Name="_GetNuGetsToBuild" Returns="@(NuGetsToBuildForWorkloadTesting)">
    <Error Condition="'$(NETCoreSdkRuntimeIdentifier)' == ''" Text="%24(NETCoreSdkRuntimeIdentifier) is unset. This is needed to build the Aspire.Hosting.Orchestration nuget" />

    <ItemGroup>
      <_PropertiesForNuGetBuilds Include="DashboardRuntime=$(NETCoreSdkRuntimeIdentifier)" />
      <_PropertiesForNuGetBuilds Include="DcpRuntime=$(NETCoreSdkRuntimeIdentifier)" />
      <_PropertiesForNuGetBuilds Include="PackageOutputPath=$(WorkloadsPackageSource)" />

      <NuGetsToBuildForWorkloadTesting
                      Include="$(_ShippingPackagesDir)Aspire.Dashboard.Sdk.$(NETCoreSdkRuntimeIdentifier).nupkg"
                      Project="$(RepoRoot)eng/dashboardpack/Aspire.Dashboard.Sdk.$(NETCoreSdkRuntimeIdentifier).csproj"
                      Properties="@(DefaultPropertiesForNuGetBuild, ';');@(_PropertiesForNuGetBuilds, ';')"
                      Descriptor="Dashboard pack"/>

      <NuGetsToBuildForWorkloadTesting
                      Include="$(_ShippingPackagesDir)Aspire.Hosting.Orchestration.$(NETCoreSdkRuntimeIdentifier).nupkg"
                      Project="$(RepoRoot)eng/dcppack/Aspire.Hosting.Orchestration.$(NETCoreSdkRuntimeIdentifier).csproj"
                      Properties="@(DefaultPropertiesForNuGetBuild, ';');@(_PropertiesForNuGetBuilds, ';')"
                      Descriptor="Dcp pack"/>
    </ItemGroup>

    <PropertyGroup>
      <_CombinedProps>@(DefaultPropertiesForNuGetBuild, ';');@(_PropertiesForNuGetBuilds, ';')</_CombinedProps>
    </PropertyGroup>
    <!-- FIXME:
      Explicitly invoke Build on these two projects so the GenerateTextReplacementFiles target gets triggered.
      This can be removed once the workloadtesting targets support a custom list of targets to invoke
    -->
    <MSBuild Projects="$(RepoRoot)eng/dcppack/Aspire.Hosting.Orchestration.$(NETCoreSdkRuntimeIdentifier).csproj"
              Properties="$(_CombinedProps)"
              Targets="Restore;Build" />
    <MSBuild Projects="$(RepoRoot)eng/dashboardpack/Aspire.Dashboard.Sdk.$(NETCoreSdkRuntimeIdentifier).csproj"
              Properties="$(_CombinedProps)"
              Targets="Restore;Build" />
  </Target>

  <Target Name="_InstallSharedFrameworksForWorkloadTesting" AfterTargets="ProvisionDotNetForWorkloadTesting">
  </Target>

  <Target Name="_ValidateExpectedSetOfPackagesExist" Condition="'$(SkipPackageCheckForWorkloadTesting)' != 'true'">
    <ItemGroup>
      <_SrcProjects Include="$(RepoRoot)src\**\*.csproj" Exclude="$(RepoRoot)src\Aspire.ProjectTemplates\templates\**" />
    </ItemGroup>

    <MSBuild Projects="@(_SrcProjects)" Targets="GetPackageName">
      <Output TaskParameter="TargetOutputs" ItemName="_PackableProjectName" />
    </MSBuild>
    <!-- check against an arbitrary minimum limit to catch any issues getting the list of packages -->
    <Error Text="Too few packages? count: @(ExpectedPackageNames->Count())"
           Condition="@(ExpectedPackageNames->Count()) &lt; 60"
           Importance="High" />

    <ItemGroup>
      <AllPackages Include="$(ArtifactsShippingPackagesDir)*.nupkg" />
      <ExpectedPackagePaths Include="$(ArtifactsShippingPackagesDir)%(ExpectedPackageNames.Identity).%(ExpectedPackageNames.WithPackageVersion).nupkg" />
      <MissingPackages Include="@(ExpectedPackagePaths)" Condition="!Exists(%(ExpectedPackagePaths.Identity))" />

      <UnexpectedPackages Include="@(AllPackages)" Exclude="@(ExpectedPackagePaths)" />

      <!-- FIXME: remove this too -->
      <!-- Ignore these packages which are part of the workload. Existence of these would get checked
           by the workload installation targets. And their names don't correspond to project names. -->
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.AppHost.Sdk.'))" />
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.ProjectTemplates.'))" />

      <!-- Exclude the packages with arch-specific nugets -->
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.Dashboard.Sdk.'))" />
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.Hosting.Orchestration.'))" />

    </ItemGroup>

    <Warning Text="Found some unexpected packages in '$(ArtifactsShippingPackagesDir)', which might mean that the list of expected packages is incorrect: @(UnexpectedPackages -> '%(FileName)%(Extension)', ', '). Use %24(SkipPackageCheckForWorkloadTesting)='true' to skip this."
             Condition="@(UnexpectedPackages -> Count()) &gt; 0" />
    <Error Text="Missing some expected packages in '$(ArtifactsShippingPackagesDir)': @(MissingPackages -> '%(FileName)%(Extension)',', ') . Make sure to build with `-pack`. Use %24(SkipPackageCheckForWorkloadTesting)='true' to skip this."
           Condition="@(MissingPackages -> Count()) &gt; 0" />
  </Target>
</Project>
