<Project>
  <PropertyGroup>
    <!--<GetNuGetsToBuildForWorkloadTestingDependsOn>_ValidateExpectedSetOfPackagesExist;_GetNuGetsToBuild;$(GetNuGetsToBuildForWorkloadTestingDependsOn)</GetNuGetsToBuildForWorkloadTestingDependsOn>-->
    <NuGetConfigPackageSourceMappingsForWorkloadTesting>*Aspire*</NuGetConfigPackageSourceMappingsForWorkloadTesting>

    <_ShippingPackagesDir>$([MSBuild]::NormalizeDirectory($(ArtifactsDir), 'packages', $(Configuration), 'Shipping'))</_ShippingPackagesDir>

    <_GlobalJsonContent>$([System.IO.File]::ReadAllText('$(RepoRoot)global.json'))</_GlobalJsonContent>
    <_DotNetCliVersionFromGlobalJson>$([System.Text.RegularExpressions.Regex]::Match($(_GlobalJsonContent), '(%3F&lt;="dotnet": ").*(%3F=")'))</_DotNetCliVersionFromGlobalJson>
    <SdkVersionForWorkloadTesting Condition="'$(SdkVersionForWorkloadTesting)' == ''">$(_DotNetCliVersionFromGlobalJson)</SdkVersionForWorkloadTesting>

    <SdkVersionForCurrentAndPreviousTFM>$(SdkVersionForWorkloadTesting)</SdkVersionForCurrentAndPreviousTFM>
    <SdkDirForCurrentAndPreviousTFM>$(ArtifactsBinDir)dotnet-latest\</SdkDirForCurrentAndPreviousTFM>
    <SdkStampPathForCurrentAndPreviousTFM>$(SdkDirForCurrentAndPreviousTFM).version-$(SdkVersionForCurrentAndPreviousTFM).stamp</SdkStampPathForCurrentAndPreviousTFM>

    <SdkVersionForPreviousTFM>$(SdkVersionForWorkloadTesting)</SdkVersionForPreviousTFM>
    <SdkDirForPreviousTFM>$(ArtifactsBinDir)dotnet-prev\</SdkDirForPreviousTFM>
    <SdkStampPathForPreviousTFM>$(SdkDirForPreviousTFM).version-$(SdkVersionForPreviousTFM).stamp</SdkStampPathForPreviousTFM>
  </PropertyGroup>

  <PropertyGroup>
    <_DotNetInstallScriptName Condition="!$([MSBuild]::IsOSPlatform('windows'))">dotnet-install.sh</_DotNetInstallScriptName>
    <_DotNetInstallScriptName Condition=" $([MSBuild]::IsOSPlatform('windows'))">dotnet-install.ps1</_DotNetInstallScriptName>

    <_DotNetInstallScriptPath>$(ArtifactsObjDir)$(_DotNetInstallScriptName)</_DotNetInstallScriptPath>
  </PropertyGroup>

  <ItemGroup>
    <AdditionalSharedFrameworkToInstallArguments Include="-Runtime dotnet -Version $(DotNetRuntimeVersionForTesting)" />
    <AdditionalSharedFrameworkToInstallArguments Include="-Runtime aspnetcore -Version $(DotNetRuntimeVersionForTesting)" />
  </ItemGroup>

  <Target Name="ProvisionSdkForCurrentAndPreviousTFM" Condition="!Exists($(SdkStampPathForCurrentAndPreviousTFM))">
    <Error Text="%24(SdkDirForCurrentAndPreviousTFM) is not set" Condition="'$(SdkDirForCurrentAndPreviousTFM)' == ''" />
    <Error Text="%24(SdkVersionForCurrentAndPreviousTFM) is not set" Condition="'$(SdkVersionForCurrentAndPreviousTFM)' == ''" />

    <PropertyGroup>
      <_SdkVersionToInstall>$(SdkVersionForCurrentAndPreviousTFM)</_SdkVersionToInstall>
      <_SdkDirToInstallTo>$(SdkDirForCurrentAndPreviousTFM)</_SdkDirToInstallTo>

      <_DotNetInstallCommand Condition="!$([MSBuild]::IsOSPlatform('windows'))"
              >$(_DotNetInstallScriptPath) -i $(_SdkDirToInstallTo) -v $(_SdkVersionToInstall)</_DotNetInstallCommand>
      <_DotNetInstallCommand Condition="$([MSBuild]::IsOSPlatform('windows'))"
              >$(_DotNetInstallScriptPath) -InstallDir $(_SdkDirToInstallTo) -Version $(_SdkVersionToInstall)</_DotNetInstallCommand>
    </PropertyGroup>

    <Message Text="** Installing sdk $(_SdkVersionToInstall) for template tests into $(_SdkDirToInstallTo)"
             Condition="'$(_SdkVersionToInstall)' != ''"
             Importance="High" />
    <Message Text="** Installing latest sdk for workload based tests into $(_SdkDirToInstallTo)"
             Condition="'$(_SdkVersionToInstall)' == ''"
             Importance="High" />

    <RemoveDir Directories="$(_SdkDirToInstallTo)" />
    <MakeDir Directories="$(_SdkDirToInstallTo)" />

    <DownloadFile SourceUrl="https://dot.net/v1/$(_DotNetInstallScriptName)"
                  DestinationFolder="$(ArtifactsObjDir)"
                  Retries="3"
                  Condition="!Exists($(_DotNetInstallScriptPath))"/>

    <Exec Condition="!$([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command="chmod +x $(_DotNetInstallScriptPath); $(_DotNetInstallCommand)" />

    <Exec Condition="$([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command='powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; $(_DotNetInstallCommand)"' />

    <Exec Condition="'%(AdditionalSharedFrameworkToInstallArguments.Identity)' != '' and !$([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command="$(_DotNetInstallScriptPath) -InstallDir $(_SdkDirToInstallTo) -SkipNonVersionedFiles %(AdditionalSharedFrameworkToInstallArguments.Identity)" />

    <Exec Condition="'%(AdditionalSharedFrameworkToInstallArguments.Identity)' != '' and $([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command='powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; $(_DotNetInstallScriptPath) -InstallDir $(_SdkDirToInstallTo) -SkipNonVersionedFiles %(AdditionalSharedFrameworkToInstallArguments.Identity)"' />

    <Touch Files="$(SdkStampPathForCurrentAndPreviousTFM)" AlwaysCreate="true" />
  </Target>

  <Target Name="_GetNuGetsToBuild" Returns="@(NuGetsToBuildForWorkloadTesting)">
    <Error Condition="'$(NETCoreSdkRuntimeIdentifier)' == ''" Text="%24(NETCoreSdkRuntimeIdentifier) is unset. This is needed to build the Aspire.Hosting.Orchestration nuget" />

    <ItemGroup>
      <_PropertiesForNuGetBuilds Include="DashboardRuntime=$(NETCoreSdkRuntimeIdentifier)" />
      <_PropertiesForNuGetBuilds Include="DcpRuntime=$(NETCoreSdkRuntimeIdentifier)" />
      <_PropertiesForNuGetBuilds Include="PackageOutputPath=$(WorkloadsPackageSource)" />

      <NuGetsToBuildForWorkloadTesting
                      Include="$(_ShippingPackagesDir)Aspire.Dashboard.Sdk.$(NETCoreSdkRuntimeIdentifier).nupkg"
                      Project="$(RepoRoot)eng/dashboardpack/Aspire.Dashboard.Sdk.$(NETCoreSdkRuntimeIdentifier).csproj"
                      Properties="@(DefaultPropertiesForNuGetBuild, ';');@(_PropertiesForNuGetBuilds, ';')"
                      Descriptor="Dashboard pack"/>

      <NuGetsToBuildForWorkloadTesting
                      Include="$(_ShippingPackagesDir)Aspire.Hosting.Orchestration.$(NETCoreSdkRuntimeIdentifier).nupkg"
                      Project="$(RepoRoot)eng/dcppack/Aspire.Hosting.Orchestration.$(NETCoreSdkRuntimeIdentifier).csproj"
                      Properties="@(DefaultPropertiesForNuGetBuild, ';');@(_PropertiesForNuGetBuilds, ';')"
                      Descriptor="Dcp pack"/>
    </ItemGroup>

    <PropertyGroup>
      <_CombinedProps>@(DefaultPropertiesForNuGetBuild, ';');@(_PropertiesForNuGetBuilds, ';')</_CombinedProps>
    </PropertyGroup>
    <!-- FIXME:
      Explicitly invoke Build on these two projects so the GenerateTextReplacementFiles target gets triggered.
      This can be removed once the workloadtesting targets support a custom list of targets to invoke
    -->
    <MSBuild Projects="$(RepoRoot)eng/dcppack/Aspire.Hosting.Orchestration.$(NETCoreSdkRuntimeIdentifier).csproj"
              Properties="$(_CombinedProps)"
              Targets="Restore;Build" />
    <MSBuild Projects="$(RepoRoot)eng/dashboardpack/Aspire.Dashboard.Sdk.$(NETCoreSdkRuntimeIdentifier).csproj"
              Properties="$(_CombinedProps)"
              Targets="Restore;Build" />
  </Target>

  <Target Name="_InstallSharedFrameworksForWorkloadTesting" AfterTargets="ProvisionDotNetForWorkloadTesting">
  </Target>

  <Target Name="_ValidateExpectedSetOfPackagesExist" Condition="'$(SkipPackageCheckForWorkloadTesting)' != 'true'">
    <ItemGroup>
      <_SrcProjects Include="$(RepoRoot)src\**\*.csproj" Exclude="$(RepoRoot)src\Aspire.ProjectTemplates\templates\**" />
    </ItemGroup>

    <MSBuild Projects="@(_SrcProjects)" Targets="GetPackageName">
      <Output TaskParameter="TargetOutputs" ItemName="_PackableProjectName" />
    </MSBuild>
    <!-- check against an arbitrary minimum limit to catch any issues getting the list of packages -->
    <Error Text="Too few packages? count: @(ExpectedPackageNames->Count())"
           Condition="@(ExpectedPackageNames->Count()) &lt; 60"
           Importance="High" />

    <ItemGroup>
      <AllPackages Include="$(ArtifactsShippingPackagesDir)*.nupkg" />
      <ExpectedPackagePaths Include="$(ArtifactsShippingPackagesDir)%(ExpectedPackageNames.Identity).%(ExpectedPackageNames.WithPackageVersion).nupkg" />
      <MissingPackages Include="@(ExpectedPackagePaths)" Condition="!Exists(%(ExpectedPackagePaths.Identity))" />

      <UnexpectedPackages Include="@(AllPackages)" Exclude="@(ExpectedPackagePaths)" />

      <!-- FIXME: remove this too -->
      <!-- Ignore these packages which are part of the workload. Existence of these would get checked
           by the workload installation targets. And their names don't correspond to project names. -->
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.AppHost.Sdk.'))" />
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.ProjectTemplates.'))" />

      <!-- Exclude the packages with arch-specific nugets -->
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.Dashboard.Sdk.'))" />
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.Hosting.Orchestration.'))" />

    </ItemGroup>

    <Warning Text="Found some unexpected packages in '$(ArtifactsShippingPackagesDir)', which might mean that the list of expected packages is incorrect: @(UnexpectedPackages -> '%(FileName)%(Extension)', ', '). Use %24(SkipPackageCheckForWorkloadTesting)='true' to skip this."
             Condition="@(UnexpectedPackages -> Count()) &gt; 0" />
    <Error Text="Missing some expected packages in '$(ArtifactsShippingPackagesDir)': @(MissingPackages -> '%(FileName)%(Extension)',', ') . Make sure to build with `-pack`. Use %24(SkipPackageCheckForWorkloadTesting)='true' to skip this."
           Condition="@(MissingPackages -> Count()) &gt; 0" />
  </Target>
</Project>
