<Project>
  <!--
    For template testing we track 3 different set of versions, and each as a corresponding TFM, and SDK version.

      Previous: 8.0
      Current: 9.0
      Next: 10.0

    Keep this list in sync with the version mapping in tests/Shared/TemplatesTesting/BuildEnvironment.cs
  -->
  <PropertyGroup>
    <SdkVersionForCurrentTFM>$(DotNetSdkCurrentVersionForTesting)</SdkVersionForCurrentTFM>
    <SdkVersionForPreviousTFM>$(DotNetSdkPreviousVersionForTesting)</SdkVersionForPreviousTFM>

    <!-- global.json is using the next sdk now - 10.0x -->
    <_GlobalJsonContent>$([System.IO.File]::ReadAllText('$(RepoRoot)global.json'))</_GlobalJsonContent>
    <_DotNetCliVersionFromGlobalJson>$([System.Text.RegularExpressions.Regex]::Match($(_GlobalJsonContent), '(%3F&lt;="dotnet": ").*(%3F=")'))</_DotNetCliVersionFromGlobalJson>
    <SdkVersionForNextTFM>$(_DotNetCliVersionFromGlobalJson)</SdkVersionForNextTFM>

    <SdkDirForCurrentTFM>$(ArtifactsBinDir)dotnet-9\</SdkDirForCurrentTFM>
    <SdkStampPathForCurrentTFM>$(SdkDirForCurrentTFM).version-$(SdkVersionForCurrentTFM).stamp</SdkStampPathForCurrentTFM>

    <SdkDirForCurrentAndPreviousTFM>$(ArtifactsBinDir)dotnet-tests\</SdkDirForCurrentAndPreviousTFM>
    <SdkStampPathForCurrentAndPreviousTFM>$(SdkDirForCurrentAndPreviousTFM).version-$(SdkVersionForCurrentTFM)-$(SdkVersionForPreviousTFM).stamp</SdkStampPathForCurrentAndPreviousTFM>

    <SdkDirForPreviousTFM>$(ArtifactsBinDir)dotnet-8\</SdkDirForPreviousTFM>
    <SdkStampPathForPreviousTFM>$(SdkDirForPreviousTFM).version-$(SdkVersionForPreviousTFM).stamp</SdkStampPathForPreviousTFM>

    <SdkDirForNextTFM>$(ArtifactsBinDir)dotnet-10\</SdkDirForNextTFM>
    <SdkStampPathForNextTFM>$(SdkDirForNextTFM).version-$(SdkVersionForNextTFM).stamp</SdkStampPathForNextTFM>

    <SdkDirForNextAndCurrentTFM>$(ArtifactsBinDir)dotnet-tests\</SdkDirForNextAndCurrentTFM>
    <SdkStampPathForNextAndCurrentTFM>$(SdkDirForNextAndCurrentTFM).version-$(SdkVersionForNextTFM)-$(SdkVersionForCurrentTFM).stamp</SdkStampPathForNextAndCurrentTFM>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)InstallSdk.props" />

  <ItemGroup>
    <PreviousRuntimeToInstallArguments Include="-Runtime dotnet -Version $(DotNetRuntimePreviousVersionForTesting)" />
    <PreviousRuntimeToInstallArguments Include="-Runtime aspnetcore -Version $(DotNetRuntimePreviousVersionForTesting)" />
    <CurrentRuntimeToInstallArguments Include="-Runtime dotnet -Version $(DotNetRuntimeCurrentVersionForTesting)" />
    <CurrentRuntimeToInstallArguments Include="-Runtime aspnetcore -Version $(DotNetRuntimeCurrentVersionForTesting)" />
  </ItemGroup>

  <Target Name="ProvisionSdksForTesting">

    <!-- Install For Previous tfm -->
    <MSBuild Projects="$(MSBuildThisFileDirectory)InstallSdk.targets"
             Properties="SdkVersionToInstall=$(SdkVersionForPreviousTFM);SdkTargetDir=$(SdkDirForPreviousTFM);SdkStampPath=$(SdkStampPathForPreviousTFM);ArtifactsObjDir=$(ArtifactsObjDir)"
             Targets="ProvisionSdk" />
    <Touch Files="$(SdkStampPathForPreviousTFM)" AlwaysCreate="true" />

    <!-- Install For Current tfm -->
    <MSBuild Projects="$(MSBuildThisFileDirectory)InstallSdk.targets"
             Properties="SdkVersionToInstall=$(SdkVersionForCurrentTFM);SdkTargetDir=$(SdkDirForCurrentTFM);SdkStampPath=$(SdkStampPathForCurrentTFM);ArtifactsObjDir=$(ArtifactsObjDir)"
             Targets="ProvisionSdk" />
    <Touch Files="$(SdkStampPathForCurrentTFM)" AlwaysCreate="true" />

    <!-- Install For Next tfm -->
    <MSBuild Projects="$(MSBuildThisFileDirectory)InstallSdk.targets"
             Properties="SdkVersionToInstall=$(SdkVersionForNextTFM);SdkTargetDir=$(SdkDirForNextTFM);SdkStampPath=$(SdkStampPathForNextTFM);ArtifactsObjDir=$(ArtifactsObjDir)"
             Targets="ProvisionSdk" />
    <Touch Files="$(SdkStampPathForNextTFM)" AlwaysCreate="true" />

    <CallTarget Targets="ProvisionSdkForCurrentAndPreviousTFM" />
  </Target>

  <Target Name="ProvisionSdkForCurrentAndPreviousTFM" Condition="!Exists($(SdkStampPathForCurrentAndPreviousTFM))">

    <!-- Install For Current sdk + previous runtime -->

    <!-- 1. Prepare the target dir -->
    <RemoveDir Directories="$(SdkDirForCurrentAndPreviousTFM)" />
    <MakeDir Directories="$(SdkDirForCurrentAndPreviousTFM)" />

    <!-- 2. Make a copy of current -->
    <ItemGroup>
      <_SdkCurrentFile Include="$(SdkDirForCurrentTFM)\**\*" />
    </ItemGroup>
    <Copy SourceFiles="@(_SdkCurrentFile)" DestinationFolder="$(SdkDirForCurrentAndPreviousTFM)\%(RecursiveDir)" SkipUnchangedFiles="true" />

    <!-- 3. Install both current runtimes (.NET 9) and previous runtimes (.NET 8) -->
    <Exec Condition="'%(CurrentRuntimeToInstallArguments.Identity)' != '' and !$([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command="$(_DotNetInstallScriptPath) -InstallDir $(SdkDirForCurrentAndPreviousTFM) -SkipNonVersionedFiles %(CurrentRuntimeToInstallArguments.Identity)" />

    <Exec Condition="'%(CurrentRuntimeToInstallArguments.Identity)' != '' and $([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command='powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; $(_DotNetInstallScriptPath) -InstallDir $(SdkDirForCurrentAndPreviousTFM) -SkipNonVersionedFiles %(CurrentRuntimeToInstallArguments.Identity)"' />

    <Exec Condition="'%(PreviousRuntimeToInstallArguments.Identity)' != '' and !$([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command="$(_DotNetInstallScriptPath) -InstallDir $(SdkDirForCurrentAndPreviousTFM) -SkipNonVersionedFiles %(PreviousRuntimeToInstallArguments.Identity)" />

    <Exec Condition="'%(PreviousRuntimeToInstallArguments.Identity)' != '' and $([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command='powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; $(_DotNetInstallScriptPath) -InstallDir $(SdkDirForCurrentAndPreviousTFM) -SkipNonVersionedFiles %(PreviousRuntimeToInstallArguments.Identity)"' />

    <Touch Files="$(SdkStampPathForCurrentAndPreviousTFM)" AlwaysCreate="true" />
  </Target>

  <Target Name="ProvisionSdkForNextAndCurrentTFM" Condition="!Exists($(SdkStampPathForNextAndCurrentTFM))">

    <!-- Install For Next sdk + current runtime -->

    <!-- 1. Prepare the target dir -->
    <RemoveDir Directories="$(SdkDirForNextAndCurrentTFM)" />
    <MakeDir Directories="$(SdkDirForNextAndCurrentTFM)" />

    <!-- 2. Make a copy of next -->
    <ItemGroup>
      <_SdkNextFile Include="$(SdkDirForNextTFM)\**\*" />
    </ItemGroup>
    <Copy SourceFiles="@(_SdkNextFile)" DestinationFolder="$(SdkDirForNextAndCurrentTFM)\%(RecursiveDir)" SkipUnchangedFiles="true" />

    <!-- 3. Install current runtimes -->
    <Exec Condition="'%(CurrentRuntimeToInstallArguments.Identity)' != '' and !$([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command="$(_DotNetInstallScriptPath) -InstallDir $(SdkDirForNextAndCurrentTFM) -SkipNonVersionedFiles %(CurrentRuntimeToInstallArguments.Identity)" />

    <Exec Condition="'%(CurrentRuntimeToInstallArguments.Identity)' != '' and $([MSBuild]::IsOSPlatform('windows'))"
          IgnoreStandardErrorWarningFormat="true"
          Command='powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; $(_DotNetInstallScriptPath) -InstallDir $(SdkDirForNextAndCurrentTFM) -SkipNonVersionedFiles %(CurrentRuntimeToInstallArguments.Identity)"' />

    <Touch Files="$(SdkStampPathForNextAndCurrentTFM)" AlwaysCreate="true" />
  </Target>

  <Target Name="InstallSdksForTemplateTesting" DependsOnTargets="ProvisionSdksForTesting;_ValidateExpectedSetOfPackagesExist" />

  <Target Name="_ValidateExpectedSetOfPackagesExist" Condition="'$(SkipPackageCheckForTemplatesTesting)' != 'true'">
    <ItemGroup>
      <_SrcProjects Include="$(RepoRoot)src\**\*.csproj"
                    Exclude="$(RepoRoot)src\Aspire.ProjectTemplates\templates\**\*.csproj" />
    </ItemGroup>

    <MSBuild Projects="@(_SrcProjects)" Targets="GetPackageName">
      <Output TaskParameter="TargetOutputs" ItemName="_PackableProjectName" />
    </MSBuild>
    <ItemGroup>
      <!-- Ignore Microsoft.NET.Sdk.Aspire as the emitted package name is special: Microsoft.NET.Sdk.Aspire.Manifest-$(sdkband)-* -->
      <ExpectedPackageNames
          Include="@(_PackableProjectName)"
          Condition="'%(Identity)' != '' and '%(Identity)' != 'Microsoft.NET.Sdk.Aspire'" />
    </ItemGroup>

    <!-- check against an arbitrary minimum limit to catch any issues getting the list of packages -->
    <Error Text="Too few packages? count: @(ExpectedPackageNames->Count())"
           Condition="@(ExpectedPackageNames->Count()) &lt; 60" />

    <ItemGroup>
      <AllPackages Include="$(ArtifactsShippingPackagesDir)*.nupkg" />
      <ExpectedPackagePaths Include="$(ArtifactsShippingPackagesDir)%(ExpectedPackageNames.Identity).%(ExpectedPackageNames.WithPackageVersion).nupkg" />
      <MissingPackages Include="@(ExpectedPackagePaths)" Condition="!Exists(%(ExpectedPackagePaths.Identity))" />

      <UnexpectedPackages Include="@(AllPackages)" Exclude="@(ExpectedPackagePaths)" />

      <!-- Exclude the packages with arch-specific nugets -->
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.Dashboard.Sdk.'))" />
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.Hosting.Orchestration.'))" />
      <UnexpectedPackages Remove="@(UnexpectedPackages)" Condition="$([System.String]::Copy('%(UnexpectedPackages.FileName)').StartsWith('Aspire.Cli.'))" />

    </ItemGroup>

    <Warning Text="Found some unexpected packages in '$(ArtifactsShippingPackagesDir)', which might mean that the list of expected packages is incorrect: @(UnexpectedPackages -> '%(FileName)%(Extension)', ', '). Use %24(SkipPackageCheckForTemplatesTesting)='true' to skip this."
             Condition="@(UnexpectedPackages -> Count()) &gt; 0" />
    <Error Text="Missing some expected packages in '$(ArtifactsShippingPackagesDir)': @(MissingPackages -> '%(FileName)%(Extension)',', ') . Make sure to build with `-pack`. Use %24(SkipPackageCheckForTemplatesTesting)='true' to skip this."
           Condition="@(MissingPackages -> Count()) &gt; 0" />
  </Target>
</Project>
