<Project>

  <PropertyGroup>
    <BuildHelixWorkItemsDependsOn>$(BuildHelixWorkItemsDependsOn);BuildHelixWorkItemsForPlaygroundTests</BuildHelixWorkItemsDependsOn>
    <NeedsWorkload>true</NeedsWorkload>
    <NeedsPlaywright>true</NeedsPlaywright>

    <TestArchiveDir>$(TestArchiveTestsDirForPlaygroundTests)</TestArchiveDir>
    <TestProjectName>Aspire.Playground.Tests</TestProjectName>

    <_CleanupProcessesCommand Condition="'$(OS)' == 'Windows_NT'">powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; get-ciminstance win32_process | where-object ExecutablePath -Match 'dotnet-latest|dcp.exe|dcpctrl.exe' | foreach-object { echo $_.ProcessId $_.ExecutablePath %3B stop-process -id $_.ProcessId -force -ErrorAction SilentlyContinue }"</_CleanupProcessesCommand>

    <_CleanupProcessesCommand Condition="'$(OS)' != 'Windows_NT'">pgrep -lf "dotnet-latest|dcp.exe|dcpctrl.exe" | awk '{print %3B system("kill -9 "$1)}'</_CleanupProcessesCommand>

    <_TestAssemblyRootDirEnvVar Condition="'$(OS)' != 'Windows_NT'">${HELIX_WORKITEM_ROOT}/test/</_TestAssemblyRootDirEnvVar>
    <_TestAssemblyRootDirEnvVar Condition="'$(OS)' == 'Windows_NT'">%HELIX_WORKITEM_ROOT%\test\</_TestAssemblyRootDirEnvVar>
  </PropertyGroup>

  <ItemGroup>
    <HelixPreCommand Include="$(_EnvVarSetKeyword) TEST_NAME=$(TestProjectName)" />
    <!--<HelixPreCommand Include="$(_EnvVarSetKeyword) SHOW_BUILD_OUTPUT=true" />-->
    <HelixPreCommand Include="$(_EnvVarSetKeyword) BuildForTest=true" />
    <HelixPreCommand Include="$(_EnvVarSetKeyword) TestsRunningOutsideOfRepo=true" />

    <HelixPreCommand Condition="'$(OS)' == 'Windows_NT'" Include="set SharedDir=%HELIX_WORKITEM_ROOT%\src\Shared\" />
    <HelixPreCommand Condition="'$(OS)' != 'Windows_NT'" Include="export SharedDir=$HELIX_WORKITEM_ROOT/src/Shared/" />

    <HelixPreCommand Condition="'$(OS)' == 'Windows_NT'" Include="set NUGET_PACKAGES=%HELIX_WORKITEM_ROOT%\nuget-cache\" />
    <HelixPreCommand Condition="'$(OS)' != 'Windows_NT'" Include="export NUGET_PACKAGES=$HELIX_WORKITEM_ROOT/nuget-cache/" />

    <HelixPreCommand Include="$(_CleanupProcessesCommand)" />

    <HelixPostCommand Include="$(_CleanupProcessesCommand)" />
  </ItemGroup>

  <Target Name="BuildHelixWorkItemsForPlaygroundTests">
    <ItemGroup>
      <_PlaygroundTestRunCommandArguments Include="dotnet build -bl:$(_HelixLogsPath)/build.binlog $(_ShellCommandSeparator)" />
      <_PlaygroundTestRunCommandArguments Include="dotnet test" />
      <_PlaygroundTestRunCommandArguments Include="--results-directory $(_HelixLogsPath)" />
      <_PlaygroundTestRunCommandArguments Include="--blame-hang" />
      <_PlaygroundTestRunCommandArguments Include="--blame-hang-dump-type" />
      <_PlaygroundTestRunCommandArguments Include="full" />
      <_PlaygroundTestRunCommandArguments Include="--blame-hang-timeout" />
      <_PlaygroundTestRunCommandArguments Include="10m" />
      <_PlaygroundTestRunCommandArguments Include="--blame-crash" />
      <_PlaygroundTestRunCommandArguments Include="--blame-crash-dump-type" />
      <_PlaygroundTestRunCommandArguments Include="full" />

      <_PlaygroundTestRunCommandArguments Condition="'$(OS)' != 'Windows_NT'" Include="${TEST_ARGS}" />
      <_PlaygroundTestRunCommandArguments Condition="'$(OS)' == 'Windows_NT'" Include="%TEST_ARGS%" />
    </ItemGroup>

    <PropertyGroup>
      <_TestRunCommand Condition="'$(RunWithCodeCoverage)' == 'true'">@(_TestCoverageCommand, ' ') &quot;@(_PlaygroundTestRunCommandArguments, ' ')&quot;</_TestRunCommand>
      <_TestRunCommand Condition="'$(RunWithCodeCoverage)' != 'true'">@(_PlaygroundTestRunCommandArguments, ' ')</_TestRunCommand>
    </PropertyGroup>

    <ReadLinesFromFile File="$(TestArchiveDir)$(TestProjectName).tests.list">
      <Output TaskParameter="Lines" ItemName="_TestsClassNames" />
    </ReadLinesFromFile>

    <Error Condition="@(_TestsClassNames->Count()) == 0"
           Text="No test class names found" />

    <ItemGroup>
      <!-- PreCommands="" needed for batching below -->
      <_TestsClassNames TestNameSuffix="$([System.String]::Copy('%(Identity)').Replace('Aspire.Playground.Tests.', ''))" PreCommands="" />

      <HelixWorkItem Include="@(_TestsClassNames)">
        <PayloadArchive>$(TestArchiveDir)\$(TestProjectName).zip</PayloadArchive>

        <PreCommands>$(_EnvVarSetKeyword) &quot;TEST_NAME=%(FileName)&quot;</PreCommands>
        <PreCommands>%(PreCommands) $(_ShellCommandSeparator) $(_EnvVarSetKeyword) &quot;CODE_COV_FILE_SUFFIX=-%(TestNameSuffix)&quot;</PreCommands>

        <PreCommands Condition="'$(OS)' == 'Windows_NT'">%(PreCommands) $(_ShellCommandSeparator) set &quot;TEST_ARGS=--filter category^^!=failing^&amp;FullyQualifiedName~%(Identity)&quot;</PreCommands>
        <PreCommands Condition="'$(OS)' != 'Windows_NT'">%(PreCommands) $(_ShellCommandSeparator) export &quot;TEST_ARGS=--filter category!=failing&amp;FullyQualifiedName~%(Identity)&quot;</PreCommands>

        <Command>cd $(TestProjectName) %3B $(_TestRunCommand)</Command>
        <Timeout>$(_workItemTimeout)</Timeout>

        <!-- Download results file so coverage files can be extracted -->
        <DownloadFilesFromResults>logs/$(TestProjectName)-%(TestNameSuffix).cobertura.xml</DownloadFilesFromResults>
      </HelixWorkItem>
    </ItemGroup>
  </Target>
</Project>
