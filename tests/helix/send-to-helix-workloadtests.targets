<Project>

  <PropertyGroup>
    <BuildHelixWorkItemsDependsOn>$(BuildHelixWorkItemsDependsOn);BuildHelixWorkItemsForWorkloadTests</BuildHelixWorkItemsDependsOn>
    <NeedsWorkload>true</NeedsWorkload>
    <NeedsPlaywright>true</NeedsPlaywright>

    <TestProjectName>Aspire.Workload.Tests</TestProjectName>

    <_CleanupProcessesCommand Condition="'$(OS)' == 'Windows_NT'">powershell -ExecutionPolicy ByPass -NoProfile -command "&amp; get-ciminstance win32_process | where-object ExecutablePath -Match 'dotnet-latest|dcp.exe|dcpctrl.exe' | foreach-object { echo $_.ProcessId $_.ExecutablePath %3B stop-process -id $_.ProcessId -force -ErrorAction SilentlyContinue }"</_CleanupProcessesCommand>

    <_CleanupProcessesCommand Condition="'$(OS)' != 'Windows_NT'">pgrep -lf "dotnet-latest|dcp.exe|dcpctrl.exe" | awk '{print %3B system("kill -9 "$1)}'</_CleanupProcessesCommand>
  </PropertyGroup>

  <ItemGroup>
    <HelixPreCommand Include="$(_EnvVarSetKeyword) TEST_NAME=$(TestProjectName)" />
    <!-- xunit diagnostic output doesn't show up on windows, so use SHOW_BUILD_OUTPUT=true -->
    <HelixPreCommand Condition="'$(OS)' == 'Windows_NT'" Include="$(_EnvVarSetKeyword) SHOW_BUILD_OUTPUT=true" />
    <HelixPreCommand Include="$(_CleanupProcessesCommand)" />

    <HelixPostCommand Include="$(_CleanupProcessesCommand)" />
  </ItemGroup>

  <Target Name="BuildHelixWorkItemsForWorkloadTests">
    <ItemGroup>
      <_TestRunCommandArguments Condition="'$(OS)' != 'Windows_NT'" Include="${TEST_ARGS}" />
      <_TestRunCommandArguments Condition="'$(OS)' == 'Windows_NT'" Include="%TEST_ARGS%" />
    </ItemGroup>

    <PropertyGroup>
      <_TestRunCommand Condition="'$(RunWithCodeCoverage)' == 'true'">@(_TestCoverageCommand, ' ') &quot;@(_TestRunCommandArguments, ' ')&quot;</_TestRunCommand>
      <_TestRunCommand Condition="'$(RunWithCodeCoverage)' != 'true'">@(_TestRunCommandArguments, ' ')</_TestRunCommand>
    </PropertyGroup>

    <ReadLinesFromFile File="$(TestArchiveTestsDirForWorkloadTests)$(TestProjectName).tests.list">
      <Output TaskParameter="Lines" ItemName="_WorkloadTestsClassNames" />
    </ReadLinesFromFile>

    <Error Condition="@(_WorkloadTestsClassNames->Count()) == 0"
           Text="No workload test class names found" />

    <ItemGroup>
      <!-- PreCommands="" needed for batching below -->
      <_WorkloadTestsClassNames TestNameSuffix="$([System.String]::Copy('%(Identity)').Replace('Aspire.Workload.Tests.', ''))" PreCommands="" />

      <HelixWorkItem Include="@(_WorkloadTestsClassNames->'%(Identity)-1')">
        <PayloadArchive>$(TestArchiveTestsDirForWorkloadTests)\$(TestProjectName).zip</PayloadArchive>
        <Command>$(_TestRunCommand)</Command>
        <Timeout>$(_workItemTimeout)</Timeout>
      </HelixWorkItem>
      <HelixWorkItem Include="@(_WorkloadTestsClassNames->'%(Identity)-2')">
        <PayloadArchive>$(TestArchiveTestsDirForWorkloadTests)\$(TestProjectName).zip</PayloadArchive>
        <Command>$(_TestRunCommand)</Command>
        <Timeout>$(_workItemTimeout)</Timeout>
      </HelixWorkItem>
      <HelixWorkItem Include="@(_WorkloadTestsClassNames->'%(Identity)-3')">
        <PayloadArchive>$(TestArchiveTestsDirForWorkloadTests)\$(TestProjectName).zip</PayloadArchive>
        <Command>$(_TestRunCommand)</Command>
        <Timeout>$(_workItemTimeout)</Timeout>
      </HelixWorkItem>
      <HelixWorkItem Include="@(_WorkloadTestsClassNames->'%(Identity)-4')">
        <PayloadArchive>$(TestArchiveTestsDirForWorkloadTests)\$(TestProjectName).zip</PayloadArchive>
        <Command>$(_TestRunCommand)</Command>
        <Timeout>$(_workItemTimeout)</Timeout>
      </HelixWorkItem>
      <HelixWorkItem Include="@(_WorkloadTestsClassNames->'%(Identity)-5')">
        <PayloadArchive>$(TestArchiveTestsDirForWorkloadTests)\$(TestProjectName).zip</PayloadArchive>
        <Command>$(_TestRunCommand)</Command>
        <Timeout>$(_workItemTimeout)</Timeout>
      </HelixWorkItem>
    </ItemGroup>
  </Target>
</Project>
