<Project>

  <!--
      Environment variables:
        - IsGitHubActionsRunner:       indicates whether tests are currently run on GitHub Actions; computed, overridable. Locally this can be set by "/p:GITHUB_ACTIONS=true".
        - IsAzdoCIRunner:              indicates whether tests are currently run on Azure DevOps; computed, overridable. Locally this can be set by "/p:SYSTEM_TEAMPROJECT=foo".
        - IsAzdoHelixRunner:           indicates whether tests are currently run on Helix; computed, overridable. Locally this can be set by "/p:PrepareForHelix=true".

      Project capabilities:
        - IsTestProject:               indicates whether the project is a test project; default is false; computed, overridable.
        - IncludeTestUtilities:        indicates whether the test project must not include the TestUtilities project reference; default is false; overridable.

      Project requirements:
        - RunOnGithubActions:          indicates whether tests should run on GitHub Actions (either Windows or Linux or macOS); computed.
        - RunOnGithubActionsWindows:   indicates whether tests should run on Windows in GitHub Actions; default is true; overridable.
        - RunOnGithubActionsMacOS:     indicates whether tests should run on MacOS in GitHub Actions; default is true; overridable.
        - RunOnGithubActionsLinux:     indicates whether tests should run on Linux in GitHub Actions; default is true; overridable.
        - RunOnAzdoCI:                 indicates whether tests should run on Azure DevOps (either Windows or Linux); always false, if RunOnAzdoHelix=true; computed.
        - RunOnAzdoCIWindows:          indicates whether tests should run on Windows in Azure DevOps; default is true; overridable.
        - RunOnAzdoCILinux:            indicates whether tests should run on Linux in Azure DevOps; default is true; overridable.
        - RunOnAzdoHelix:              indicates whether tests should run on Helix (either Windows or Linux); computed.
        - RunOnAzdoHelixWindows:       indicates whether tests should run on Windows in Helix; default is true; overridable.
        - RunOnAzdoHelixLinux:         indicates whether tests should run on Linux in Helix; default is true; overridable.
    -->

  <PropertyGroup>
    <!-- See https://docs.github.com/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables -->
    <IsGitHubActionsRunner Condition=" '$(GITHUB_ACTIONS)' == 'true' ">true</IsGitHubActionsRunner>

    <!-- See https://learn.microsoft.com/azure/devops/pipelines/build/variables#system-variables -->
    <IsAzdoCIRunner Condition=" '$(SYSTEM_TEAMPROJECT)' != '' ">true</IsAzdoCIRunner>

    <!-- See https://github.com/dotnet/arcade/blob/main/src/Microsoft.DotNet.Helix/Sdk/Readme.md#common-helix-client-environment-variables -->
    <IsHelix Condition=" '$(HELIX_CORRELATION_ID)' != '' ">true</IsHelix>

    <IsAzdoHelixRunner Condition=" '$(PrepareForHelix)' == 'true' ">true</IsAzdoHelixRunner>

    <!-- Detect specific GitHub workflow types based on GITHUB_WORKFLOW environment variable -->
    <IsOuterloopTestsWorkflow Condition=" '$(GITHUB_WORKFLOW)' == 'Outerloop Tests' ">true</IsOuterloopTestsWorkflow>
    <IsQuarantinedTestsWorkflow Condition=" '$(GITHUB_WORKFLOW)' == 'Quarantined Tests' ">true</IsQuarantinedTestsWorkflow>

    <!--
      If we haven't detected the tests are run on build agents, then we presume we're running tests locally.
      -->
    <IsLocalDevLoop Condition=" '$(IsGitHubActionsRunner)' != 'true' and '$(IsAzdoCIRunner)' != 'true' and '$(IsHelix)' != 'true' and '$(IsAzdoHelixRunner)' != 'true' ">true</IsLocalDevLoop>
  </PropertyGroup>

  <PropertyGroup>
    <RunOnGithubActions>false</RunOnGithubActions>
    <RunOnGithubActions Condition=" '$(RunOnGithubActionsWindows)' == 'true' or '$(RunOnGithubActionsLinux)' == 'true' or '$(RunOnGithubActionsMacOS)' == 'true' ">true</RunOnGithubActions>

    <RunOnAzdoHelix>false</RunOnAzdoHelix>
    <RunOnAzdoHelix Condition=" '$(RunOnAzdoHelixWindows)' == 'true' or '$(RunOnAzdoHelixLinux)' == 'true' ">true</RunOnAzdoHelix>

    <RunOnAzdoCI>false</RunOnAzdoCI>
    <RunOnAzdoCI Condition=" '$(RunOnAzdoCIWindows)' == 'true' or '$(RunOnAzdoCILinux)' == 'true' ">true</RunOnAzdoCI>
    <!-- If a test is run on Helix, then we don't run the test on AzDO -->
    <RunOnAzdoCI Condition=" '$(RunOnAzdoHelix)' == 'true' ">false</RunOnAzdoCI>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(SkipTests)' == '' and '$(IsTestProject)' == 'true' ">
    <!-- Skip tests by default unless explicitly set to false -->
    <SkipTests>true</SkipTests>

    <!-- Only run tests if the build is running on GitHub Actions  -->
    <SkipTests Condition=" '$(IsGitHubActionsRunner)' == 'true' and '$(RunOnGithubActions)' == 'true' ">false</SkipTests>

    <!-- Only run tests if the build is running on Helix infra  -->
    <SkipTests Condition=" '$(IsAzdoHelixRunner)' == 'true' and '$(RunOnAzdoHelix)' == 'true' ">false</SkipTests>

    <!-- Otherwise, run tests on AzDO CI agents -->
    <SkipTests Condition=" '$(IsAzdoCIRunner)' == 'true' and '$(RunOnAzdoCI)' == 'true' ">false</SkipTests>

    <!-- If we're running locally, we don't skip tests -->
    <SkipTests Condition=" '$(IsLocalDevLoop)' == 'true' ">false</SkipTests>
  </PropertyGroup>

  <ItemGroup Condition=" ('$(IsTestProject)' == 'true' or '$(IsTestUtilityProject)' == 'true') and '$(IncludeTestUtilities)' == 'true' and '$(MSBuildProjectName)' != 'Aspire.TestUtilities' ">
    <ProjectReference Include="$(RepoRoot)tests\Aspire.TestUtilities\Aspire.TestUtilities.csproj" />
  </ItemGroup>

  <!--
    The following target is used to announce the test capabilities of the project.
    -->
  <Target Name="_AnnounceProjectTestCapabilities" BeforeTargets="RunTests" Condition="'$(IsTestProject)' == 'true'">
    <PropertyGroup>
      <_IsGitHubActionsRunner>$(IsGitHubActionsRunner)</_IsGitHubActionsRunner>
      <_IsGitHubActionsRunner Condition="'$(_IsGitHubActionsRunner)' == ''">false</_IsGitHubActionsRunner>
      <_IsAzdoCIRunner>$(IsAzdoCIRunner)</_IsAzdoCIRunner>
      <_IsAzdoCIRunner Condition="'$(_IsAzdoCIRunner)' == ''">false</_IsAzdoCIRunner>
      <_IsAzdoHelixRunner>$(IsAzdoHelixRunner)</_IsAzdoHelixRunner>
      <_IsAzdoHelixRunner Condition="'$(_IsAzdoHelixRunner)' == ''">false</_IsAzdoHelixRunner>
    </PropertyGroup>
    <ItemGroup>
      <_Runner Include=" - GitHub Actions: $(_IsGitHubActionsRunner)" />
      <_Runner Include=" - Azure DevOps: $(_IsAzdoCIRunner)" />
      <_Runner Include=" - Helix: $(_IsAzdoHelixRunner)" />
      <_Requirement Include=" - GitHub Actions: $(RunOnGithubActions) (Windows: $(RunOnGithubActionsWindows) / Linux: $(RunOnGithubActionsLinux) / MacOS: $(RunOnGithubActionsMacOS))" />
      <_Requirement Include=" - Azure DevOps: $(RunOnAzdoCI) (Windows: $(RunOnAzdoCIWindows) / Linux: $(RunOnAzdoCILinux))" />
      <_Requirement Include=" - Helix: $(RunOnAzdoHelix) (Windows: $(RunOnAzdoHelixWindows) / Linux: $(RunOnAzdoHelixLinux))" />
    </ItemGroup>

    <PropertyGroup>
      <_NewLine>%0D%0A</_NewLine>
      <_RunnerList>@(_Runner, '%0D%0A')</_RunnerList>
      <_RequirementList>@(_Requirement, '$(_NewLine)')</_RequirementList>
    </PropertyGroup>

    <Message Text="Project: $(MSBuildProjectName)$(_NewLine)Runner Context:$(_NewLine)$(_RunnerList)$(_NewLine)Runner support:$(_NewLine)$(_RequirementList)" />
  </Target>

  <!--
    Target called by GetTestProjects.proj to determine which test projects should run on GitHub Actions
    and whether they should be split.
    -->
  <Target Name="GetRunTestsOnGithubActions" Returns="@(_ProjectInfo)">
    <PropertyGroup>
      <_ShouldSplit>false</_ShouldSplit>
      <_ShouldSplit Condition="'$(SplitTestsOnCI)' == 'true'">true</_ShouldSplit>
    </PropertyGroup>

    <ItemGroup>
      <!-- Return OS-specific information based on BuildOs parameter -->
      <_ProjectInfo Condition="'$(BuildOs)' == 'windows'"
                    Include="$(MSBuildProjectFullPath)"
                    RunTestsOnGithubActions="$(RunOnGithubActionsWindows)"
                    SplitTests="$(_ShouldSplit)"
                    MSBuildSourceProjectFile="$(MSBuildProjectFullPath)" />
      <_ProjectInfo Condition="'$(BuildOs)' == 'linux'"
                    Include="$(MSBuildProjectFullPath)"
                    RunTestsOnGithubActions="$(RunOnGithubActionsLinux)"
                    SplitTests="$(_ShouldSplit)"
                    MSBuildSourceProjectFile="$(MSBuildProjectFullPath)" />
      <_ProjectInfo Condition="'$(BuildOs)' == 'darwin'"
                    Include="$(MSBuildProjectFullPath)"
                    RunTestsOnGithubActions="$(RunOnGithubActionsMacOS)"
                    SplitTests="$(_ShouldSplit)"
                    MSBuildSourceProjectFile="$(MSBuildProjectFullPath)" />

      <!-- Fallback for when BuildOs is not specified (legacy behavior) -->
      <_ProjectInfo Condition="'$(BuildOs)' == ''"
                    Include="$(MSBuildProjectFullPath)"
                    RunTestsOnGithubActions="$(RunOnGithubActions)"
                    SplitTests="$(_ShouldSplit)"
                    MSBuildSourceProjectFile="$(MSBuildProjectFullPath)" />
    </ItemGroup>
  </Target>

  <!--
    Target to get OS compatibility for test enumeration.
    Returns which OSes (windows, linux, macos) this test should run on.
    -->
  <Target Name="GetTestOSCompatibility" Returns="@(_ProjectInfo)">
    <PropertyGroup>
      <_ShouldSplit>false</_ShouldSplit>
      <_ShouldSplit Condition="'$(SplitTestsOnCI)' == 'true'">true</_ShouldSplit>

      <!-- Build comma-separated list of supported OSes -->
      <_SupportedOSes></_SupportedOSes>
      <_SupportedOSes Condition="'$(RunOnGithubActionsWindows)' == 'true'">$(_SupportedOSes)"windows",</_SupportedOSes>
      <_SupportedOSes Condition="'$(RunOnGithubActionsLinux)' == 'true'">$(_SupportedOSes)"linux",</_SupportedOSes>
      <_SupportedOSes Condition="'$(RunOnGithubActionsMacOS)' == 'true'">$(_SupportedOSes)"macos",</_SupportedOSes>
      <!-- Remove trailing comma -->
      <_SupportedOSes Condition="'$(_SupportedOSes)' != ''">$(_SupportedOSes.TrimEnd(','))</_SupportedOSes>
    </PropertyGroup>

    <ItemGroup>
      <_ProjectInfo Include="$(MSBuildProjectFullPath)"
                    SupportedOSes="$(_SupportedOSes)"
                    SplitTests="$(_ShouldSplit)"
                    MSBuildSourceProjectFile="$(MSBuildProjectFullPath)" />
    </ItemGroup>
  </Target>

  <!--
    Target to write test metadata JSON file for all test projects.
    This writes properties like requiresNugets and requiresTestSdk to metadata.json.
    -->
  <Target Name="WriteTestMetadata"
          Condition="'$(GenerateCIPartitions)' == 'true' and '$(IsTestProject)' == 'true'">
    <PropertyGroup>
      <_HelixDir>$([MSBuild]::NormalizeDirectory($(ArtifactsDir), 'helix'))</_HelixDir>
      <_MetadataFile>$(_HelixDir)$(MSBuildProjectName).tests.metadata.json</_MetadataFile>

      <!-- Calculate relative project path for metadata -->
      <_RelativeProjectPath>$([System.String]::Copy('$(MSBuildProjectFullPath)').Replace('$(RepoRoot)', ''))</_RelativeProjectPath>
      <!-- Remove leading slash/backslash if present -->
      <_RelativeProjectPath Condition="$(_RelativeProjectPath.StartsWith('/')) or $(_RelativeProjectPath.StartsWith('\\'))">$(_RelativeProjectPath.Substring(1))</_RelativeProjectPath>

      <!-- Determine requiresNugets based on project properties -->
      <_RequiresNugets>false</_RequiresNugets>
      <_RequiresNugets Condition="'$(RequiresNugetsForSplitTests)' == 'true'">true</_RequiresNugets>

      <!-- Determine requiresTestSdk based on project properties -->
      <_RequiresTestSdk>false</_RequiresTestSdk>
      <_RequiresTestSdk Condition="'$(RequiresTestSdkForSplitTests)' == 'true'">true</_RequiresTestSdk>

      <!-- Determine enablePlaywrightInstall based on project properties -->
            <!-- Determine enablePlaywrightInstall based on project properties -->
      <_EnablePlaywrightInstall>false</_EnablePlaywrightInstall>
      <_EnablePlaywrightInstall Condition="'$(EnablePlaywrightInstallForSplitTests)' == 'true'">true</_EnablePlaywrightInstall>

      <!-- Build JSON array of supported OSes -->
      <_SupportedOSesJson></_SupportedOSesJson>
      <_SupportedOSesJson Condition="'$(RunOnGithubActionsWindows)' == 'true'">$(_SupportedOSesJson)"windows",</_SupportedOSesJson>
      <_SupportedOSesJson Condition="'$(RunOnGithubActionsLinux)' == 'true'">$(_SupportedOSesJson)"linux",</_SupportedOSesJson>
      <_SupportedOSesJson Condition="'$(RunOnGithubActionsMacOS)' == 'true'">$(_SupportedOSesJson)"macos",</_SupportedOSesJson>
      <!-- Remove trailing comma -->
      <_SupportedOSesJson Condition="'$(_SupportedOSesJson)' != ''">$(_SupportedOSesJson.TrimEnd(','))</_SupportedOSesJson>

      <!-- Use custom timeout values if provided -->
      <_TestSessionTimeout Condition="'$(SplitTestSessionTimeout)' != ''">$(SplitTestSessionTimeout)</_TestSessionTimeout>
      <_TestSessionTimeout Condition="'$(SplitTestSessionTimeout)' == ''">20m</_TestSessionTimeout>
      <_TestHangTimeout Condition="'$(SplitTestHangTimeout)' != ''">$(SplitTestHangTimeout)</_TestHangTimeout>
      <_TestHangTimeout Condition="'$(SplitTestHangTimeout)' == ''">10m</_TestHangTimeout>

      <!-- Build metadata JSON -->
      <_MetadataJson>{
  "projectName": "$(MSBuildProjectName)",
  "testClassNamesPrefix": "$(MSBuildProjectName)",
  "testProjectPath": "$(_RelativeProjectPath)",
  "requiresNugets": "$(_RequiresNugets.ToLowerInvariant())",
  "requiresTestSdk": "$(_RequiresTestSdk.ToLowerInvariant())",
  "enablePlaywrightInstall": "$(_EnablePlaywrightInstall.ToLowerInvariant())",
  "supportedOSes": [$(_SupportedOSesJson)],
  "testSessionTimeout": "$(_TestSessionTimeout)",
  "testHangTimeout": "$(_TestHangTimeout)",
  "uncollectedTestsSessionTimeout": "15m",
  "uncollectedTestsHangTimeout": "10m"
}</_MetadataJson>
    </PropertyGroup>

    <!-- Create helix directory and write metadata file -->
    <MakeDir Directories="$(_HelixDir)" />
    <WriteLinesToFile File="$(_MetadataFile)"
                      Lines="$(_MetadataJson)"
                      Overwrite="true" />

    <Message Text="Wrote test metadata: $(_MetadataFile) (requiresNugets=$(_RequiresNugets), requiresTestSdk=$(_RequiresTestSdk), enablePlaywright=$(_EnablePlaywrightInstall), supportedOSes=$(_SupportedOSesJson), path=$(_RelativeProjectPath))" Importance="high" />
  </Target>

</Project>
