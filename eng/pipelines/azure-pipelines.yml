trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - internal/release/*

pr:
  branches:
    include:
    - main
    - release/*
    - internal/release/*

variables:
  - template: /eng/pipelines/common-variables.yml
  - template: /eng/common/templates/variables/pool-providers.yml

  - name: _BuildConfig
    value: Release
  - name: Build.Arcade.ArtifactsPath
    value: $(Build.SourcesDirectory)/artifacts/
  - name: Build.Arcade.LogsPath
    value: $(Build.Arcade.ArtifactsPath)log/$(_BuildConfig)/
  - name: Build.Arcade.TestResultsPath
    value: $(Build.Arcade.ArtifactsPath)TestResults/$(_BuildConfig)/

  # Produce test-signed build for PR and Public builds
  - ${{ if or(eq(variables['_RunAsPublic'], 'true'), eq(variables['Build.Reason'], 'PullRequest')) }}:
    # needed for darc (dependency flow) publishing
    - name: _PublishArgs
      value: ''
    - name: _OfficialBuildIdArgs
      value: ''
    # needed for signing
    - name: _SignType
      value: test
    - name: _SignArgs
      value: ''
    - name: _Sign
      value: false

  # Set up non-PR build from internal project
  - ${{ if and(ne(variables['_RunAsPublic'], 'true'), ne(variables['Build.Reason'], 'PullRequest')) }}:
    # needed for darc (dependency flow) publishing
    - name: _PublishArgs
      value: >-
            /p:DotNetPublishUsingPipelines=true
    - name: _OfficialBuildIdArgs
      value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
    # needed for signing
    - name: _SignType
      value: real
    - name: _SignArgs
      value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign) /p:DotNetPublishUsingPipelines=true
    - name: _Sign
      value: true

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm

stages:

# ----------------------------------------------------------------
# This stage performs build, test, packaging
# ----------------------------------------------------------------
- stage: build
  displayName: Build
  jobs:
  # TODO: Temporarily disabled, see:https://github.com/dotnet/aspire/issues/145
  # - ${{ if and(eq(variables._RunAsInternal, True), notin(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
  #   - template: /eng/common/templates/job/onelocbuild.yml
  #     parameters:
  #       MirrorRepo: aspire
  #       LclSource: lclFilesFromPackage
  #       LclPackageId: 'LCL-JUNO-PROD-ASPIRE'
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts: false
          logs: true
          manifests: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      publishAssetsImmediately: true
      enablePublishTestResults: true
      enableSourceBuild: true
      testResultsFormat: vstest
      enableSourceIndex: false
      workspace:
        clean: all

      jobs:

      - job: windows
        timeoutInMinutes: 60

        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals windows.vs2022preview.amd64.open
          ${{ else }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals windows.vs2022preview.amd64

        variables:
          - name: _buildScript
            value: $(Build.SourcesDirectory)/build.cmd -ci

        preSteps:
          - checkout: self
            fetchDepth: 1
            clean: true

        steps:
          - template: /eng/pipelines/templates/BuildAndTest.yml
            parameters:
              runAsPublic: ${{ eq(variables._RunAsPublic, True) }}
              buildScript: $(_buildScript)
              buildConfig: $(_BuildConfig)
              repoLogPath: $(Build.Arcade.LogsPath)
              repoTestResultsPath: $(Build.Arcade.TestResultsPath)
              isWindows: true


      - ${{ if eq(variables._RunAsPublic, True) }}:
        - job: linux
          timeoutInMinutes: 60

          pool:
            ${{ if eq(variables['System.TeamProject'], 'public') }}:
              name: $(DncEngPublicBuildPool)
              demands: ImageOverride -equals build.ubuntu.2004.amd64.open
            ${{ else }}:
              name: $(DncEngInternalBuildPool)
              demands: ImageOverride -equals build.ubuntu.2004.amd64

          variables:
            - name: _buildScript
              value: $(Build.SourcesDirectory)/build.sh --ci

          preSteps:
            - checkout: self
              fetchDepth: 1
              clean: true

          steps:
          - template: /eng/pipelines/templates/BuildAndTest.yml
            parameters:
              runAsPublic: ${{ eq(variables._RunAsPublic, True) }}
              buildScript: $(_buildScript)
              buildConfig: $(_BuildConfig)
              repoLogPath: $(Build.Arcade.LogsPath)
              repoTestResultsPath: $(Build.Arcade.TestResultsPath)
              isWindows: false


# ----------------------------------------------------------------
# This stage performs quality gates checks
# ----------------------------------------------------------------
- stage: codecoverage
  displayName: CodeCoverage
  dependsOn: 
    - build
  condition: succeeded('build')
  variables:
  - template: /eng/common/templates/variables/pool-providers.yml
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enableTelemetry: true
      runAsPublic: false
      workspace:
        clean: all

      # ----------------------------------------------------------------
      # This stage downloads the code coverage reports from the build jobs,
      # merges those and validates the combined test coverage.
      # ----------------------------------------------------------------
      jobs:
      - job: CodeCoverageReport
        timeoutInMinutes: 10

        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals build.ubuntu.2004.amd64.open
          ${{ else }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals build.ubuntu.2004.amd64

        preSteps:
          - checkout: self
            fetchDepth: 1
            clean: true

        steps:
        - script: $(Build.SourcesDirectory)/build.sh --ci --restore
          displayName: Init toolset

        - template: /eng/pipelines/templates/VerifyCoverageReport.yml


- ${{ if eq(variables._RunAsInternal, True) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      publishAssetsImmediately: true
      SDLValidationParameters:
        enable: false
        params: ' -SourceToolsList $(_TsaSourceToolsList)
          -TsaInstanceURL $(_TsaInstanceURL)
          -TsaProjectName $(_TsaProjectName)
          -TsaNotificationEmail $(_TsaNotificationEmail)
          -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
          -TsaBugAreaPath $(_TsaBugAreaPath)
          -TsaIterationPath $(_TsaIterationPath)
          -TsaRepositoryName $(_TsaRepositoryName)
          -TsaCodebaseName $(_TsaCodebaseName)
          -TsaOnboard $(_TsaOnboard)
          -TsaPublish $(_TsaPublish)'

