trigger: none # We only want to trigger manually or based on resources
pr: none

parameters:
  - name: DryRun
    displayName: Dry run only?
    type: boolean
    default: false

  - name: PreRelease
    displayName: Publish as prerelease?
    type: boolean
    default: false

  - name: ReleaseDateOverride
    displayName: |
      Release Date Override value.
      If provided, this parameter overrides the Release Date for the request; otherwise, today‚Äôs date is used. Use following value format: MM/dd/yyyy
    type: string
    default: ' ' # non-empty string so parameter is optional

resources:
  repositories:
    - repository: MicroBuildTemplate
      type: git
      name: 1ESPipelineTemplates/MicroBuildTemplate
      ref: refs/tags/release

# Consume variable groups at top-level so all approvals are done at once.
variables:
  - template: GlobalVariables.yml
    # This group must provide the VisualStudioMarketplacePAT (https://code.visualstudio.com/api/working-with-extensions/publishing-extension#get-a-personal-access-token)
    # This is a very special PAT that must be periodically generated by a tool:
    # The tool can be found in this repo under `tools\PATGenerators`
    # dotnet run --project tools\PATGenerators -- marketplace
    # Then take the PAT that is printed to the console and update the `VisualStudioMarketplacePAT` variable in the "VisualStudioMarketplace" variable group:
    # https://dev.azure.com/devdiv/DevDiv/_library?itemType=VariableGroups&view=VariableGroupView&variableGroupId=481&path=VisualStudioMarketplace
  - group: VisualStudioMarketplace
    # Release Telemetry variable groups for Test/DryRun or Prod runs, expected to provide RTAppIdentity and RTAccessToken
  - ${{ if eq(parameters.DryRun, 'true') }}:
      - group: DevDiv.Release.Telemetry-Test
  - ${{ if ne(parameters.DryRun, 'true') }}:
      - group: DevDiv.Release.Telemetry-Prod

extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    sdl:
      sourceAnalysisPool: VSEngSS-MicroBuild2022-1ES

    stages:
      - stage: prepare
        displayName: Prepare
        jobs:
          - job: prepare
            displayName: Prepare
            pool:
              name: AzurePipelines-EO
              image: 1ESPT-Ubuntu20.04
              os: Linux
            steps:
              - checkout: none
              - powershell: Write-Host "##vso[build.updatebuildnumber]$(Build.BuildNumber)"
                displayName: ‚öô Set run name
              - pwsh: |
                  $ShippingBranch = '$(Build.SourceBranch)'
                  Write-Host "Shipping branch: $ShippingBranch"
                  $tagName = 'v$(Build.BuildNumber)'
                  if ($ShippingBranch -ne 'refs/heads/release') {
                    $tagName += '-prerelease'
                  }

                  $headers = @{ Authorization = 'Bearer $(System.AccessToken)' }
                  $uri = 'https://devdiv.visualstudio.com/DevDiv/_apis/git/repositories/vs-green/annotatedtags?api-version=7.0'
                  $requestBody = @{
                    name = $tagName
                    message = "Released on $(get-date -Format 'yyyy-MM-dd')"
                    taggedObject = @{
                      objectId = '$(Build.SourceVersion)'
                    }
                  }
                  $requestJson = ConvertTo-Json $requestBody
                  $contentType = 'application/json'
                  $tagPushResult = Invoke-RestMethod -uri $uri -method POST -Headers $headers -ContentType $contentType -Body $requestJson -StatusCodeVariable pushTagStatusCode -SkipHttpErrorCheck
                  if ($pushTagStatusCode -eq 409) {
                    Write-Host "##vso[task.logissue type=warning]Tag $tagName already exists."
                  } elseif ($pushTagStatusCode -ne 201) {
                    Write-Host "##vso[task.logissue type=warning]Pushing tag failed with status code $pushTagStatusCode. Response: $($tagPushResult.message)"
                  }
                displayName: üè∑Ô∏è Push tag

      # We use unique stages for marketplace and telemetry instead of jobs in a single stage
      # because Azure Pipelines provides us with the option to skip individual stages at queue time.

      - stage: marketplace
        displayName: Marketplace
        dependsOn: prepare
        jobs:
          - job: release
            displayName: Publish
            pool:
              name: AzurePipelines-EO
              image: 1ESPT-Ubuntu20.04
              os: Linux
            steps:
              - checkout: none
              - pwsh: npm i -g @vscode/vsce
                displayName: ‚öôÔ∏è Install vsce
              - powershell: |
                  $contentType = 'application/json';
                  $headers = @{ Authorization = 'Bearer $(System.AccessToken)' };
                  $rawRequest = @{ daysValid = 365 * 2; definitionId = $(System.DefinitionId); ownerId = 'User:$(Build.RequestedForId)'; protectPipeline = $false; runId = $(Build.BuildId) };
                  $request = ConvertTo-Json @($rawRequest);
                  Write-Host $request
                  $uri = "$(System.CollectionUri)$(System.TeamProject)/_apis/build/retention/leases?api-version=6.0-preview.1";
                  Invoke-RestMethod -uri $uri -method POST -Headers $headers -ContentType $contentType -Body $request;
                displayName: üóª Retain build
              - download: CI
                artifact: package
                displayName: üîª Download package artifact
              - task: AzureCLI@2
                displayName: 'üì¶ Publish to Marketplace'
                inputs:
                  azureSubscription: 'VSEng-VisualStudioMarketplace'
                  scriptType: pscore
                  scriptLocation: inlineScript
                  workingDirectory: '$(System.DefaultWorkingDirectory)/extension'
                  inlineScript: |
                    $basePublishArgs = ,'publish'
                    $basePublishArgs += '--azure-credential'

                    $usePreRelease = '${{ parameters.PreRelease }}' -eq 'true'
                    $ShippingBranch = '$(Build.SourceBranch)'
                    Write-Host "Shipping branch: $ShippingBranch"
                    Write-Host "PreRelease parameter: ${{ parameters.PreRelease }}"
                    
                    # Use PreRelease parameter if explicitly set, otherwise fall back to branch-based logic
                    if ($usePreRelease -or ($ShippingBranch -ne 'refs/heads/release')) {
                      $basePublishArgs += '--pre-release'
                      Write-Host "Publishing as pre-release"
                    } else {
                      Write-Host "Publishing as stable release"
                    }
                    
                    $basePublishArgs += '--packagePath'
                    $publishArgs = $basePublishArgs + (Get-ChildItem *.vsix | Sort-Object Name -Descending |% { $_.Name })
                    if ('${{ parameters.DryRun }}' -eq 'true') {
                      Write-Host "##[command]vsce $publishArgs"
                      Write-Host "##vso[task.logissue type=warning]Marketplace publish skipped for dry run."
                      exit 0
                    }

                    Write-Host "##[command]vsce $publishArgs"
                    vsce @publishArgs
      - stage: telemetry
        displayName: Release telemetry
        dependsOn: prepare
        jobs:
          - job: shipready
            displayName: Release telemetry
            pool:
              ${{ if eq(parameters.DryRun, 'true') }}:
                name: devdiv-rs-publish-1ESpool-test
              ${{ else }}:
                name: devdiv-rs-publish-1ESpool
            steps:
              - checkout: self
                fetchTags: false
                fetchDepth: 1
              - task: NuGetAuthenticate@1
                displayName: üîè Authenticate NuGet feeds
              - download: CI
                artifact: package
                patterns: '**/csdevkit-win32-x64-*.vsix'
                displayName: üîª Download package artifact
              - pwsh: |
                  # Extract the version from the package name
                  $packageName = (Get-ChildItem '$(Pipeline.Workspace)/CI/package/csdevkit-win32-x64-*.vsix')[0].Name
                  Write-Host "##[group]Extracting package version from the package name '$packageName'"
                  $packageVersion = [Version]($packageName -replace 'csdevkit-win32-x64-(\d*\.?\d*\.?\d*).*\.vsix', '$1')
                  Write-Host "Extracted package version '$packageVersion'"
                  Write-Host "##[endgroup]"

                  $feedUrl = 'https://pkgs.dev.azure.com/devdiv/_packaging/Engineering/nuget/v3/index.json'
                  $psModulePackageId = 'DevDiv.RM.Release.Telemetry'
                  $psModuleBasePath = '$(Pipeline.Workspace)\Staging\NuGetPackage'
                  $psModulePath = Join-Path $psModuleBasePath $psModulePackageId 'scripts'
                  Write-Host "##[group]Installing the $psModulePackageId PowerShell Module"

                  $nugetPath = & "$(Build.SourcesDirectory)/azure-pipelines/Get-NuGetTool.ps1"

                  # For Test/Dry run, we get PreRelease nuget package and target Staging Release Telemetry env.
                  $rmExecutionEnvironment = "Staging";
                  if ('${{ parameters.DryRun }}' -eq 'true') {
                    Write-Host "Downloading the pre-released Release Telemetry Nuget Package"
                    & $nugetPath install $psModulePackageId -Source $feedUrl -OutputDirectory $psModuleBasePath -Verbosity Detailed -PreRelease -ExcludeVersion
                  }
                  else
                  {
                    Write-Host "Downloading the released Release Telemetry Nuget Package"
                    & $nugetPath install $psModulePackageId -Source $feedUrl -OutputDirectory $psModuleBasePath -Verbosity Detailed -ExcludeVersion
                    $rmExecutionEnvironment = "Production";
                  }
                  Write-Host "Setting the 'RMExecutionEnvironment' environment variable to '$rmExecutionEnvironment'"
                  $env:RMExecutionEnvironment = $rmExecutionEnvironment

                  Import-Module $psModulePath\RM.Release.Telemetry.Common.psm1
                  Write-Host "##[endgroup]"

                  Write-Host "##[section]Start Publishing C# DevKit Telemetry";
                  $date = Get-Date -Format "MM/dd/yyyy"
                  $displayVersion = '$(resources.pipeline.CI.runName)'
                  $channelId = 'release'
                  if ('$(resources.pipeline.CI.sourceBranch)' -ne 'refs/heads/release') {
                    $channelId = 'prerelease'
                    $displayVersion += ' (prerelease)'
                  }

                  # Checking if Release Data Override is provided
                  $releaseDate = $date;
                  $releaseDateOverride = '${{ parameters.ReleaseDateOverride }}'.Trim()
                  if (!$releaseDateOverride) {
                    Write-Host "Using current date '$releaseDate' for a Release Date parameter";
                  }
                  else
                  {
                    Write-Host "Using Release Date Override value '$releaseDateOverride' for a Release Date parameter";
                    $releaseDate = $releaseDateOverride;
                  }

                  $pubId = ("CSDevKit_" + (Get-Date -Format "yyyy_MM_dd__HH_mm_ss"))
                  $buildId = "$(Build.BuildId)"
                  Write-Host "Calling 'Publish-VSCodeExtensionsTelemetry' for publishing id '$pubId' and build id '$buildId'";
                  Publish-VSCodeExtensionsTelemetry `
                    -MIClientId "$(MI_ClientId_RT)" `
                    -Id $pubId `
                    -ExtensionName 'C# Dev Kit' `
                    -ExtensionVersion '$(resources.pipeline.CI.runName)' `
                    -MajorVersion $packageVersion.Major `
                    -MinorVersion $packageVersion.Minor `
                    -ProductDisplayVersion $displayVersion `
                    -ReleaseScope 'public' `
                    -ChannelId $channelId `
                    -BuildDate $date `
                    -ReleaseDate $releaseDate `
                    -Branch '$(resources.pipeline.CI.sourceBranch)' `
                    -RMReleaseId $buildId
                displayName: üì¢ Publish C# DevKit Telemetry
