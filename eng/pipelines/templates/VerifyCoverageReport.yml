steps:

  # This downloads *cobertura.xml from Windows_CodeCoverageResults artifact to the root of the repo
  - task: DownloadPipelineArtifact@2
    displayName: Download Windows code coverage reports
    inputs:
      buildType: 'current'
      artifactName: Windows_CodeCoverageResults
      itemPattern: '*.cobertura.xml'
      targetPath: $(Build.SourcesDirectory)/Windows_CodeCoverageResults

  # This downloads *cobertura.xml from Linux_CodeCoverageResults artifact to the root of the repo
  - task: DownloadPipelineArtifact@2
    displayName: Download Linux code coverage reports
    inputs:
      buildType: 'current'
      artifactName: Linux_CodeCoverageResults
      itemPattern: '*.cobertura.xml'
      targetPath: $(Build.SourcesDirectory)/Linux_CodeCoverageResults

  # Merge the downloaded files (Windows_cobertura.xml and Linux_cobertura.xml) as one (merged.cobertura.xml)
  - script: $(Build.SourcesDirectory)/.dotnet/dotnet dotnet-coverage merge
            $(Build.SourcesDirectory)/**/*.cobertura.xml
            --output-format cobertura
            --output $(Build.SourcesDirectory)/merged.cobertura.xml
    displayName: Merge code coverage reports

  - script: $(Build.SourcesDirectory)/.dotnet/dotnet reportgenerator
            -reports:$(Build.SourcesDirectory)/merged.cobertura.xml
            -targetdir:./CoverageResultsHtml
            -reporttypes:HtmlInline_AzurePipelines
    displayName: Generate code coverage report

  - task: PublishCodeCoverageResults@1
    displayName: Publish coverage report
    env:
      DISABLE_COVERAGE_AUTOGENERATE: 'true'
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/merged.cobertura.xml
      pathToSources: $(Build.SourcesDirectory)
      reportDirectory: ./CoverageResultsHtml

  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    - pwsh: |
          $(Build.SourcesDirectory)/eng/scripts/ValidateProjectCoverage.ps1 -CoberturaReportXml $(Build.SourcesDirectory)/merged.cobertura.xml
      displayName: Check per-project coverage
      continueOnError: 'true' # Don't fail builds during the grace period

  - ${{ if and(eq(variables['System.TeamProject'], 'public'), eq(variables['Build.Reason'], 'PullRequest')) }}:
    - task: GitHubComment@0
      condition: always()
      inputs:
        gitHubConnection: dotnet-comment-bot-service-connection
        repositoryName: '$(Build.Repository.Name)'
        id: $(System.PullRequest.PullRequestNumber)
      displayName: Report coverage to GitHub
      continueOnError: 'true' # Avoid failing the build if the GitHub comment posting failed
