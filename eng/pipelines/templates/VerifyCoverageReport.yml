parameters:
  testVariants: ''

steps:

  - ${{ each testVariant in split(parameters.testVariants, ',') }}:
    # This downloads *cobertura.xml from Windows_CodeCoverageResults artifact to the root of the repo
    - task: DownloadPipelineArtifact@2
      displayName: Download Windows${{ testVariant }} code coverage reports
      inputs:
        buildType: 'current'
        artifactName: Windows${{ testVariant }}_CodeCoverageResults
        itemPattern: '*.cobertura.xml'
        targetPath: $(Build.SourcesDirectory)/Windows_CodeCoverageResults

    # This downloads *cobertura.xml from Linux_CodeCoverageResults artifact to the root of the repo
    - task: DownloadPipelineArtifact@2
      displayName: Download Linux${{ testVariant }} code coverage reports
      inputs:
        buildType: 'current'
        artifactName: Linux${{ testVariant }}_CodeCoverageResults
        itemPattern: '*.cobertura.xml'
        targetPath: $(Build.SourcesDirectory)/Linux_CodeCoverageResults

  # Merge the downloaded files (Windows_cobertura.xml and Linux_cobertura.xml) as one (merged.cobertura.xml)
  - script: $(Build.SourcesDirectory)/.dotnet/dotnet dotnet-coverage merge
            $(Build.SourcesDirectory)/**/*.cobertura.xml
            --output-format cobertura
            --output $(Build.SourcesDirectory)/merged.cobertura.xml
    displayName: Merge code coverage reports

  - script: $(Build.SourcesDirectory)/.dotnet/dotnet reportgenerator
            -reports:$(Build.SourcesDirectory)/merged.cobertura.xml
            -targetdir:./CoverageResultsHtml
            -reporttypes:HtmlInline_AzurePipelines
    displayName: Generate code coverage report

  - task: PublishCodeCoverageResults@1
    displayName: Publish coverage report
    env:
      DISABLE_COVERAGE_AUTOGENERATE: 'true'
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/merged.cobertura.xml
      pathToSources: $(Build.SourcesDirectory)
      reportDirectory: ./CoverageResultsHtml
