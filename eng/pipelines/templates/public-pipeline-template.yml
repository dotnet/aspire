parameters:
  - name: testVariants
    type: string
    default: ''

variables:
  - template: /eng/common/templates/variables/pool-providers.yml

  - name: _BuildConfig
    value: Release
  - name: Build.Arcade.ArtifactsPath
    value: $(Build.SourcesDirectory)/artifacts/
  - name: Build.Arcade.LogsPath
    value: $(Build.Arcade.ArtifactsPath)log/$(_BuildConfig)/
  - name: Build.Arcade.TestResultsPath
    value: $(Build.Arcade.ArtifactsPath)TestResults/$(_BuildConfig)/

  # needed for darc (dependency flow) publishing
  - name: _PublishArgs
    value: ''
  - name: _OfficialBuildIdArgs
    value: ''
  # needed for signing
  - name: _SignType
    value: test
  - name: _SignArgs
    value: ''
  - name: _Sign
    value: false
  - name: HelixApiAccessToken
    value: ''
  - name: _InternalBuildArgs
    value: ''

  # Set test variants based on parameter or build reason
  - ${{ if ne(parameters.testVariants, '') }}:
    - name: testVariants
      value: ${{ parameters.testVariants }}
  - ${{ else }}:
    # Use the build reason to decide whether to include helix_tests
    - ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
      - name: testVariants
        value: '_integration_matrix_tests'
    - ${{ else }}:
      - name: testVariants
        value: ''

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm

stages:

# ----------------------------------------------------------------
# This stage performs build, test, packaging
# ----------------------------------------------------------------
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts: false
          logs:
            name: 'Logs_Build_$(Agent.JobName)_$(_BuildConfig)'
          manifests: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      publishAssetsImmediately: true
      enablePublishTestResults: true
      testResultsFormat: vstest
      enableSourceIndex: false
      workspace:
        clean: all

      jobs:

      # Integration Tests Matrix - replaces old pipeline tests
      - ${{ each testVariant in split( variables.testVariants, ',' ) }}:
        - ${{ if contains(testVariant, '_integration_matrix_tests') }}:
          - job: EnumerateIntegrationTests
            displayName: 'Enumerate Integration Tests'
            pool:
              name: $(DncEngPublicBuildPool)
              demands: ImageOverride -equals build.ubuntu.2204.amd64.open

            steps:
              - checkout: self
                fetchDepth: 1
                clean: true

              - pwsh: |
                  if ($env:AGENT_OS -eq "Windows_NT") {
                    ./restore.cmd
                  } else {
                    ./restore.sh
                  }
                displayName: 'Restore .NET SDK'

              - pwsh: |
                  if ($env:AGENT_OS -eq "Windows_NT") {
                    ./dotnet.cmd build tests/Shared/GetTestProjects.proj /bl:$(Build.Arcade.LogsPath)/GetTestProjects.binlog /p:TestsListOutputPath=$(Build.Arcade.ArtifactsPath)/IntegrationTests.list /p:ContinuousIntegrationBuild=true
                  } else {
                    ./dotnet.sh build tests/Shared/GetTestProjects.proj /bl:$(Build.Arcade.LogsPath)/GetTestProjects.binlog /p:TestsListOutputPath=$(Build.Arcade.ArtifactsPath)/IntegrationTests.list /p:ContinuousIntegrationBuild=true
                  }
                displayName: 'Generate integration tests list'

              - pwsh: |
                  $testsListFile = "$(Build.Arcade.ArtifactsPath)/IntegrationTests.list"
                  if (-not (Test-Path $testsListFile)) {
                    throw "Tests list file not found: $testsListFile"
                  }

                  $testNames = Get-Content $testsListFile | Where-Object { $_.Trim() -ne "" } | Sort-Object
                  if ($testNames.Count -eq 0) {
                    throw "No integration tests found"
                  }

                  Write-Host "Found $($testNames.Count) integration test projects:"
                  $testNames | ForEach-Object { Write-Host "  - $_" }

                  # Create matrix for each test x platform combination
                  $matrix = @{}

                  $platforms = @(
                    @{ name = 'Linux'; image = 'build.ubuntu.2204.amd64.open'; script = 'dotnet.sh' },
                    @{ name = 'Windows'; image = 'windows.vs2022preview.amd64.open'; script = 'dotnet.cmd' }
                  )

                  foreach ($testName in $testNames) {
                    foreach ($platform in $platforms) {
                      $key = "$testName`_$($platform.name)"
                      $matrix[$key] = @{
                        testShortName = $testName
                        platformName = $platform.name
                        agentImage = $platform.image
                        scriptName = $platform.script
                        jobDisplayName = "$testName / $($platform.name)"
                      }
                    }
                  }

                  $matrixJson = $matrix | ConvertTo-Json -Compress
                  Write-Host "Generated matrix: $matrixJson"

                  # Set pipeline variable for the matrix
                  Write-Host "##vso[task.setVariable variable=integrationTestsMatrix;isOutput=true]$matrixJson"
                displayName: 'Generate test matrix'
                name: 'GenerateMatrix'

          - job: RunIntegrationTests
            displayName: '$(jobDisplayName)'
            dependsOn: EnumerateIntegrationTests
            condition: succeeded()

            strategy:
              matrix: $[ dependencies.EnumerateIntegrationTests.outputs['GenerateMatrix.integrationTestsMatrix'] ]

            timeoutInMinutes: 20

            pool:
              name: $(DncEngPublicBuildPool)
              demands: ImageOverride -equals $(agentImage)

            steps:
              - checkout: self
                fetchDepth: 1
                clean: true

              - task: DockerInstaller@0
                inputs:
                  dockerVersion: '28.0.0'
                displayName: 'Install Docker CLI'
                condition: ne(variables['platformName'], 'Windows')

              - script: dotnet dev-certs https
                displayName: 'Install dev-certs'
                continueOnError: true
                condition: and(succeeded(), eq(variables['platformName'], 'Windows'))

              - script: $(Build.SourcesDirectory)/tests/external-scripts/ubuntu-create-dotnet-devcert.sh
                displayName: 'Install devcerts'
                continueOnError: true
                condition: and(succeeded(), ne(variables['platformName'], 'Windows'))

              # FIXME: script name can be a variable instead of duplicating the pwsh block
              - pwsh: |
                  if ("$(platformName)" -eq "Windows") {
                    ./dotnet.cmd test tests/Aspire.$(testShortName).Tests/Aspire.$(testShortName).Tests.csproj --configuration $(_BuildConfig) --logger "trx;LogFileName=$(testShortName)-$(platformName).trx" --logger "console;verbosity=normal" --results-directory $(Build.Arcade.TestResultsPath) --filter "Category!=quarantined&Category!=outerloop"
                  } else {
                    ./dotnet.sh test tests/Aspire.$(testShortName).Tests/Aspire.$(testShortName).Tests.csproj --configuration $(_BuildConfig) --logger "trx;LogFileName=$(testShortName)-$(platformName).trx" --logger "console;verbosity=normal" --results-directory $(Build.Arcade.TestResultsPath) --filter "Category!=quarantined&Category!=outerloop"
                  }
                displayName: 'Run $(testShortName) tests on $(platformName)'
                env:
                  DOCKER_BUILDKIT: 1
                  DOTNET_ASPIRE_DEPENDENCY_CHECK_TIMEOUT: 180
                  DCP_DIAGNOSTICS_LOG_LEVEL: debug
                  DCP_DIAGNOSTICS_LOG_FOLDER: $(Build.ArtifactStagingDirectory)/artifacts/log/dcp
                  DCP_PRESERVE_EXECUTABLE_LOGS: 1
                  DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
                  PATH: $(Build.SourcesDirectory)/.dotnet:$(PATH)
                timeoutInMinutes: 15

              - task: PublishTestResults@2
                displayName: 'Publish $(testShortName) test results'
                condition: always()
                inputs:
                  testResultsFormat: 'VSTest'
                  testResultsFiles: '$(Build.Arcade.TestResultsPath)/$(testShortName)-$(platformName).trx'
                  testRunTitle: 'Integration Tests $(testShortName) $(platformName)'
                  mergeTestResults: false
                  failTaskOnFailedTests: true

      # Helix jobs (Templates, EndToEnd - temporarily preserved)
      - ${{ each testVariant in split( variables.testVariants, ',' ) }}:
        - ${{ if contains(testVariant, '_helix') }}:
          - job: Windows${{ testVariant }}

            # timeout accounts for wait times for helix agents up to 30mins
            timeoutInMinutes: 90

            pool:
              name: $(DncEngPublicBuildPool)
              demands: ImageOverride -equals windows.vs2022preview.amd64.open

            variables:
              - name: _buildScript
                value: $(Build.SourcesDirectory)/build.cmd -ci

            preSteps:
              - checkout: self
                fetchDepth: 1
                clean: true

            steps:
              - template: /eng/pipelines/templates/BuildAndTest.yml
                parameters:
                  runAsPublic: true
                  dotnetScript: $(Build.SourcesDirectory)/dotnet.cmd
                  buildScript: $(_buildScript)
                  buildConfig: $(_BuildConfig)
                  repoArtifactsPath: $(Build.Arcade.ArtifactsPath)
                  repoLogPath: $(Build.Arcade.LogsPath)
                  repoTestResultsPath: $(Build.Arcade.TestResultsPath)
                  isWindows: true
                  runHelixTests: true
                  runPipelineTests: false

          - job: Linux${{ testVariant }}

            # timeout accounts for wait times for helix agents up to 30mins
            timeoutInMinutes: 90

            pool:
              name: $(DncEngPublicBuildPool)
              demands: ImageOverride -equals build.ubuntu.2204.amd64.open

            variables:
              - name: _buildScript
                value: $(Build.SourcesDirectory)/build.sh --ci

            preSteps:
              - checkout: self
                fetchDepth: 1
                clean: true

            steps:
              - template: /eng/pipelines/templates/BuildAndTest.yml
                parameters:
                  runAsPublic: true
                  dotnetScript: $(Build.SourcesDirectory)/dotnet.sh
                  buildScript: $(_buildScript)
                  buildConfig: $(_BuildConfig)
                  repoArtifactsPath: $(Build.Arcade.ArtifactsPath)
                  repoLogPath: $(Build.Arcade.LogsPath)
                  repoTestResultsPath: $(Build.Arcade.TestResultsPath)
                  isWindows: false
                  runHelixTests: true
                  runPipelineTests: false
