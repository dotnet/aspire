parameters:
  - name: testVariants
    type: string
    default: ''

variables:
  - template: /eng/common/templates/variables/pool-providers.yml

  - name: _BuildConfig
    value: Release
  - name: Build.Arcade.ArtifactsPath
    value: $(Build.SourcesDirectory)/artifacts/
  - name: Build.Arcade.LogsPath
    value: $(Build.Arcade.ArtifactsPath)log/$(_BuildConfig)/
  - name: Build.Arcade.TestResultsPath
    value: $(Build.Arcade.ArtifactsPath)TestResults/$(_BuildConfig)/

  # needed for darc (dependency flow) publishing
  - name: _PublishArgs
    value: ''
  - name: _OfficialBuildIdArgs
    value: ''
  # needed for signing
  - name: _SignType
    value: test
  - name: _SignArgs
    value: ''
  - name: _Sign
    value: false
  - name: HelixApiAccessToken
    value: ''
  - name: _InternalBuildArgs
    value: ''

  # Set test variants based on parameter or build reason
  - ${{ if ne(parameters.testVariants, '') }}:
    - name: testVariants
      value: ${{ parameters.testVariants }}
  - ${{ else }}:
    # Use the build reason to decide whether to include helix_tests
    - ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
      - name: testVariants
        value: '_integration_matrix_tests'
    - ${{ else }}:
      - name: testVariants
        value: ''

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm

stages:

# ----------------------------------------------------------------
# Helix-based stages (for non-matrix tests)
# ----------------------------------------------------------------
- ${{ if not(contains(variables.testVariants, '_integration_matrix_tests')) }}:
  - stage: build
    displayName: Build
    jobs:
    - template: /eng/common/templates/jobs/jobs.yml
      parameters:
        artifacts:
          publish:
            artifacts: false
            logs:
              name: 'Logs_Build_$(Agent.JobName)_$(_BuildConfig)'
            manifests: true
        enableMicrobuild: true
        enablePublishUsingPipelines: true
        publishAssetsImmediately: true
        enablePublishTestResults: true
        testResultsFormat: vstest
        enableSourceIndex: false
        workspace:
          clean: all

        jobs:

        # Helix jobs (Templates, EndToEnd - temporarily preserved)
        - ${{ each testVariant in split( variables.testVariants, ',' ) }}:
          - ${{ if contains(testVariant, '_helix') }}:
          - job: Windows${{ testVariant }}

            # timeout accounts for wait times for helix agents up to 30mins
            timeoutInMinutes: 90

            pool:
              name: $(DncEngPublicBuildPool)
              demands: ImageOverride -equals windows.vs2022preview.amd64.open

            variables:
              - name: _buildScript
                value: $(Build.SourcesDirectory)/build.cmd -ci

            preSteps:
              - checkout: self
                fetchDepth: 1
                clean: true

            steps:
              - template: /eng/pipelines/templates/BuildAndTest.yml
                parameters:
                  runAsPublic: true
                  dotnetScript: $(Build.SourcesDirectory)/dotnet.cmd
                  buildScript: $(_buildScript)
                  buildConfig: $(_BuildConfig)
                  repoArtifactsPath: $(Build.Arcade.ArtifactsPath)
                  repoLogPath: $(Build.Arcade.LogsPath)
                  repoTestResultsPath: $(Build.Arcade.TestResultsPath)
                  isWindows: true
                  runHelixTests: true
                  runPipelineTests: false

          - job: Linux${{ testVariant }}

            # timeout accounts for wait times for helix agents up to 30mins
            timeoutInMinutes: 90

            pool:
              name: $(DncEngPublicBuildPool)
              demands: ImageOverride -equals build.ubuntu.2204.amd64.open

            variables:
              - name: _buildScript
                value: $(Build.SourcesDirectory)/build.sh --ci

            preSteps:
              - checkout: self
                fetchDepth: 1
                clean: true

            steps:
              - template: /eng/pipelines/templates/BuildAndTest.yml
                parameters:
                  runAsPublic: true
                  dotnetScript: $(Build.SourcesDirectory)/dotnet.sh
                  buildScript: $(_buildScript)
                  buildConfig: $(_BuildConfig)
                  repoArtifactsPath: $(Build.Arcade.ArtifactsPath)
                  repoLogPath: $(Build.Arcade.LogsPath)
                  repoTestResultsPath: $(Build.Arcade.TestResultsPath)
                  isWindows: false
                  runHelixTests: true
                  runPipelineTests: false

# ----------------------------------------------------------------
# Setup Stage - .NET SDK setup and test enumeration
# ----------------------------------------------------------------
- ${{ if contains(variables.testVariants, '_integration_matrix_tests') }}:
  - stage: Setup
    displayName: 'Setup'
    jobs:
      - job: SetupDotNetLinux
        displayName: 'Setup .NET SDK - Linux'
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals build.ubuntu.2204.amd64.open

        steps:
          - checkout: self
            fetchDepth: 1
            clean: true

          - pwsh: |
              ./restore.sh
            displayName: 'Restore .NET SDK'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish .NET SDK - Linux'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/.dotnet'
              artifactName: 'dotnet-sdk-linux'
              publishLocation: 'pipeline'

      - job: SetupDotNetWindows
        displayName: 'Setup .NET SDK - Windows'
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals windows.vs2022preview.amd64.open

        steps:
          - checkout: self
            fetchDepth: 1
            clean: true

          - pwsh: |
              ./restore.cmd
            displayName: 'Restore .NET SDK'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish .NET SDK - Windows'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/.dotnet'
              artifactName: 'dotnet-sdk-windows'
              publishLocation: 'pipeline'

      - job: EnumerateIntegrationTests
        displayName: 'Enumerate Integration Tests'
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals build.ubuntu.2204.amd64.open

        steps:
          - checkout: self
            fetchDepth: 1
            clean: true

          - pwsh: |
              ./restore.sh
            displayName: 'Restore .NET SDK'

          - pwsh: |
              ./dotnet.sh build tests/Shared/GetTestProjects.proj /bl:$(Build.Arcade.LogsPath)/GetTestProjects.binlog /p:TestsListOutputPath=$(Build.Arcade.ArtifactsPath)/IntegrationTests.list /p:ContinuousIntegrationBuild=true
            displayName: 'Generate integration tests list'

          - pwsh: |
              $testsListFile = "$(Build.Arcade.ArtifactsPath)/IntegrationTests.list"
              if (-not (Test-Path $testsListFile)) {
                throw "Tests list file not found: $testsListFile"
              }

              $testNames = Get-Content $testsListFile | Where-Object { $_.Trim() -ne "" } | Sort-Object
              if ($testNames.Count -eq 0) {
                throw "No integration tests found"
              }

              Write-Host "Found $($testNames.Count) integration test projects:"
              $testNames | ForEach-Object { Write-Host "  - $_" }

              # Create separate matrices for Linux and Windows
              $linuxMatrix = @{}
              $windowsMatrix = @{}

              $linuxPlatform = @{ name = 'Linux'; image = 'build.ubuntu.2204.amd64.open'; script = 'dotnet.sh' }
              $windowsPlatform = @{ name = 'Windows'; image = 'windows.vs2022preview.amd64.open'; script = 'dotnet.cmd' }

              foreach ($testName in $testNames) {
                # Linux matrix
                $linuxKey = "$testName`_Linux"
                $linuxMatrix[$linuxKey] = @{
                  testShortName = $testName
                  platformName = $linuxPlatform.name
                  agentImage = $linuxPlatform.image
                  scriptName = $linuxPlatform.script
                }

                # Windows matrix
                $windowsKey = "$testName`_Windows"
                $windowsMatrix[$windowsKey] = @{
                  testShortName = $testName
                  platformName = $windowsPlatform.name
                  agentImage = $windowsPlatform.image
                  scriptName = $windowsPlatform.script
                }
              }

              $linuxMatrixJson = $linuxMatrix | ConvertTo-Json -Compress
              $windowsMatrixJson = $windowsMatrix | ConvertTo-Json -Compress

              Write-Host "Generated Linux matrix: $linuxMatrixJson"
              Write-Host "Generated Windows matrix: $windowsMatrixJson"

              # Set separate pipeline variables for each matrix
              Write-Host "##vso[task.setVariable variable=linuxTestsMatrix;isOutput=true]$linuxMatrixJson"
              Write-Host "##vso[task.setVariable variable=windowsTestsMatrix;isOutput=true]$windowsMatrixJson"
            displayName: 'Generate test matrix'
            name: 'GenerateMatrix'

  # ----------------------------------------------------------------
  # Linux Tests Stage
  # ----------------------------------------------------------------
  - stage: LinuxTests
    displayName: 'Linux Integration Tests'
    dependsOn: Setup
    jobs:
      - job: RunIntegrationTestsLinux
        displayName: 'Test'
        strategy:
          matrix: $[ stageDependencies.Setup.EnumerateIntegrationTests.outputs['GenerateMatrix.linuxTestsMatrix'] ]

        timeoutInMinutes: 20

        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals $(agentImage)

        steps:
          - checkout: self
            fetchDepth: 1
            clean: true

          - task: DownloadPipelineArtifact@2
            displayName: 'Download .NET SDK - Linux'
            inputs:
              artifactName: 'dotnet-sdk-linux'
              targetPath: '$(Build.SourcesDirectory)/.dotnet'

          - script: chmod +x $(Build.SourcesDirectory)/.dotnet/dotnet
            displayName: 'Fix .NET permissions'

          - task: DockerInstaller@0
            inputs:
              dockerVersion: '28.0.0'
            displayName: 'Install Docker CLI'

          - script: $(Build.SourcesDirectory)/tests/external-scripts/ubuntu-create-dotnet-devcert.sh
            displayName: 'Install devcerts'
            continueOnError: true

          - pwsh: |
              ./dotnet.sh test tests/Aspire.$(testShortName).Tests/Aspire.$(testShortName).Tests.csproj --configuration $(_BuildConfig) --logger "trx;LogFileName=$(testShortName)-$(platformName).trx" --logger "console;verbosity=normal" --results-directory $(Build.Arcade.TestResultsPath) --filter "Category!=quarantined&Category!=outerloop"
            displayName: 'Run tests'
            env:
              DOCKER_BUILDKIT: 1
              DOTNET_ASPIRE_DEPENDENCY_CHECK_TIMEOUT: 180
              DCP_DIAGNOSTICS_LOG_LEVEL: debug
              DCP_DIAGNOSTICS_LOG_FOLDER: $(Build.ArtifactStagingDirectory)/artifacts/log/dcp
              DCP_PRESERVE_EXECUTABLE_LOGS: 1
              DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
              PATH: $(Build.SourcesDirectory)/.dotnet:$(PATH)
            timeoutInMinutes: 15

          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '$(Build.Arcade.TestResultsPath)/$(testShortName)-$(platformName).trx'
              testRunTitle: 'Integration Tests'
              mergeTestResults: false
              failTaskOnFailedTests: true

  # ----------------------------------------------------------------
  # Windows Tests Stage
  # ----------------------------------------------------------------
  - stage: WindowsTests
    displayName: 'Windows Integration Tests'
    dependsOn: Setup
    jobs:
      - job: RunIntegrationTestsWindows
        displayName: 'Test'
        strategy:
          matrix: $[ stageDependencies.Setup.EnumerateIntegrationTests.outputs['GenerateMatrix.windowsTestsMatrix'] ]

        timeoutInMinutes: 20

        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals $(agentImage)

        steps:
          - checkout: self
            fetchDepth: 1
            clean: true

          - task: DownloadPipelineArtifact@2
            displayName: 'Download .NET SDK - Windows'
            inputs:
              artifactName: 'dotnet-sdk-windows'
              targetPath: '$(Build.SourcesDirectory)/.dotnet'

          - script: dotnet dev-certs https
            displayName: 'Install dev-certs'
            continueOnError: true

          - pwsh: |
              & ./dotnet.cmd test tests/Aspire.$(testShortName).Tests/Aspire.$(testShortName).Tests.csproj --configuration $(_BuildConfig) --logger "trx;LogFileName=$(testShortName)-$(platformName).trx" --logger "console;verbosity=normal" --results-directory $(Build.Arcade.TestResultsPath) --filter 'Category!=quarantined&Category!=outerloop'
            displayName: 'Run tests'
            env:
              DOCKER_BUILDKIT: 1
              DOTNET_ASPIRE_DEPENDENCY_CHECK_TIMEOUT: 180
              DCP_DIAGNOSTICS_LOG_LEVEL: debug
              DCP_DIAGNOSTICS_LOG_FOLDER: $(Build.ArtifactStagingDirectory)/artifacts/log/dcp
              DCP_PRESERVE_EXECUTABLE_LOGS: 1
              DOTNET_ROOT: $(Build.SourcesDirectory)/.dotnet
              PATH: $(Build.SourcesDirectory)/.dotnet:$(PATH)
            timeoutInMinutes: 15

          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '$(Build.Arcade.TestResultsPath)/$(testShortName)-$(platformName).trx'
              testRunTitle: 'Integration Tests'
              mergeTestResults: false
              failTaskOnFailedTests: true
