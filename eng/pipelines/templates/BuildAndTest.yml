parameters:
  - name: runAsPublic
    type: boolean
    default: false
  - name: buildScript
    type: string
  - name: buildConfig
    type: string
  - name: repoArtifactsPath
    type: string
  - name: repoLogPath
    type: string
  - name: repoTestResultsPath
    type: string
  - name: isWindows
    type: string
  - name: dotnetScript
    type: string
  - name: skipTests
    type: boolean
    default: false

steps:
  - ${{ if eq(parameters.isWindows, 'true') }}:
    - script: ${{ parameters.buildScript }}
              -restore -build
              -configuration ${{ parameters.buildConfig }}
              /p:ArchiveTests=true
              /bl:${{ parameters.repoLogPath }}/build.binlog
              $(_OfficialBuildIdArgs)
      displayName: Build
  - ${{ if ne(parameters.isWindows, 'true') }}:
    # temporary: Use -pack for linux as it is required for workload testing
    # Issue: https://github.com/dotnet/aspire/issues/2687
    - script: ${{ parameters.buildScript }}
              -restore -build
              -pack
              -configuration ${{ parameters.buildConfig }}
              /p:ArchiveTests=true
              /bl:${{ parameters.repoLogPath }}/build.binlog
              $(extraBuildArgs)
              $(_OfficialBuildIdArgs)
      displayName: Build

  - ${{ if ne(parameters.skipTests, 'true') }}:
    - script: ${{ parameters.dotnetScript }} dotnet-coverage collect
              --settings $(Build.SourcesDirectory)/eng/CodeCoverage.config
              --output ${{ parameters.repoTestResultsPath }}/NonHelix.cobertura.xml
              "${{ parameters.buildScript }} -testnobuild -test -configuration ${{ parameters.buildConfig }} /bl:${{ parameters.repoLogPath }}/tests.binlog $(_OfficialBuildIdArgs)"
      displayName: Run non-helix tests

    - ${{ if ne(parameters.isWindows, 'true') }}:
      # E2E tests are disabled on windows for now
      - script: ${{ parameters.buildScript }}
                -p:ContinuousIntegrationBuild=true
                -p:Configuration=${{ parameters.buildConfig }}
                -p:TriggerInstallWorkloadForTesting=true
                -bl:${{ parameters.repoLogPath }}/WorkloadInstallForTesting.binlog
                --projects $(Build.SourcesDirectory)/tests/Aspire.EndToEnd.Tests/Aspire.EndToEnd.Tests.csproj
        displayName: Install sdk+workload for testing

    # Helix captures code coverage information and, once tests are complete, the code coverage information is
    # downloaded to <repo root>/artifacts/helixresults folder.
    - template: /eng/pipelines/templates/send-to-helix.yml
      parameters:
        HelixProjectPath: '$(Build.SourcesDirectory)/tests/helix/send-to-helix-ci.proj'
        HelixProjectArguments: /m /p:Configuration=${{ parameters.buildConfig }} /p:RunWithCodeCoverage=true /p:RepoTestResultsPath=${{ parameters.repoTestResultsPath }}

        ${{ if eq(parameters.isWindows, 'true') }}:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            HelixTargetQueues: Windows.11.Amd64.Client.Open
          ${{ if eq(variables['System.TeamProject'], 'internal') }}:
            HelixTargetQueues: Windows.11.Amd64.Client
        ${{ if ne(parameters.isWindows, 'true') }}:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            HelixTargetQueues: Ubuntu.2204.Amd64.Open
          ${{ if eq(variables['System.TeamProject'], 'internal') }}:
            HelixTargetQueues: Ubuntu.2204.Amd64

        IsWindows: ${{ parameters.isWindows }}
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          Creator: $(Build.DefinitionName)
        HelixBuild: $(Build.BuildNumber)
        HelixAccessToken: $(HelixApiAccessToken)

    - task: CopyFiles@2
      inputs:
        Contents: '${{ parameters.repoArtifactsPath }}/**/*.cobertura.xml'
        TargetFolder: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
        flattenFolders: true
      displayName: Gather code coverage results

    - ${{ if eq(parameters.runAsPublic, 'true') }}:
      - task: PublishPipelineArtifact@1
        displayName: Publish coverage results (cobertura.xml)
        inputs:
          targetPath: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
          artifactName: '$(Agent.JobName)_CodeCoverageResults'
          publishLocation: 'pipeline'

    - ${{ if ne(parameters.runAsPublic, 'true') }}:
      - task: 1ES.PublishPipelineArtifact@1
        displayName: Publish code coverage results
        inputs:
          targetPath: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
          artifactName: '$(Agent.JobName)_CodeCoverageResults'

  - ${{ if eq(parameters.isWindows, 'true') }}:
    - script: ${{ parameters.buildScript }}
              -pack
              -sign $(_SignArgs)
              -publish $(_PublishArgs)
              -configuration ${{ parameters.buildConfig }}
              /bl:${{ parameters.repoLogPath }}/pack.binlog
              /p:Restore=false /p:Build=false
              $(_OfficialBuildIdArgs)
      displayName: Pack, Sign, and Publish

    - script: ${{ parameters.buildScript }}
        -restore -build
        -pack
        -sign $(_SignArgs)
        -publish $(_PublishArgs)
        -configuration $(_BuildConfig)
        /bl:${{ parameters.repoLogPath }}/build-workloads.binlog
        -projects eng\workloads\workloads.csproj
        $(_InternalBuildArgs)
      displayName: Build Workloads

    - ${{ if eq(parameters.runAsPublic, 'true') }}:
      - task: PublishPipelineArtifact@1
        displayName: Publish VSDrop MSIs
        inputs:
          targetPath: '$(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)'
          artifactName: VSDropInsertion
          publishLocation: 'pipeline'

    - ${{ if ne(parameters.runAsPublic, 'true') }}:
      - task: 1ES.PublishPipelineArtifact@1
        displayName: Publish VSDrop MSIs
        inputs:
          targetPath: '$(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)'
          artifactName: VSDropInsertion
