<Project>
  <!--

    This file is used to generate a list of tests to run on GitHub Actions.

    - For projects not requiring packages:
         .\build.cmd -test /p:TestRunnerName=TestRunsheetBuilder [/bl /p:GITHUB_ACTIONS=true]

    - For projects requiring packages (e.g., E2E, templates and playground):
         .\build.cmd -test /p:TestRunnerName=TestRunsheetBuilder /p:FullE2e=true [/bl /p:GITHUB_ACTIONS=true]

    For the large part this is a copy of the Arcade SDK's implementations:
      - https://github.com/dotnet/arcade/blob/b888df17/src/Microsoft.DotNet.Arcade.Sdk/tools/XUnit/XUnit.Runner.targets
      - https://github.com/dotnet/arcade/blob/b888df17/src/Microsoft.DotNet.Arcade.Sdk/tools/VSTest.targets
   -->

  <Target Name="RunTests"
          Outputs="%(TestToRun.ResultsStdOutPath)"
          Condition=" '$(SkipTests)' != 'true' and '$(IsGitHubActionsRunner)' == 'true' and '$(RunOnGithubActions)' == 'true' ">

    <PropertyGroup>
      <!--

        The runsheet is created in two scenarios:
        - For projects requiring packages, only if full end-to-end tests (`FullE2e`) are enabled.
        - For projects not requiring packages, only if full end-to-end tests (`FullE2e`) are disabled.

        This logic ensures runsheets are generated appropriately based on the project's characteristics and the testing scenario.

        FIXME: Aspire.Playground.Tests are currently not running in "out of repo" mode.
        FIXME: Aspire.Templates.Tests are currently left alone.

        -->
      <_RequiresPackages Condition=" '$(MSBuildProjectName)' == 'Aspire.EndToEnd.Tests' ">true</_RequiresPackages>

      <_CreateRunsheet>false</_CreateRunsheet>
      <_CreateRunsheet Condition=" '$(_RequiresPackages)' == 'true' and '$(FullE2e)' == 'true' ">true</_CreateRunsheet>
      <_CreateRunsheet Condition=" '$(_RequiresPackages)' != 'true' and '$(FullE2e)' != 'true' ">true</_CreateRunsheet>

      <_CreateRunsheet Condition=" '$(MSBuildProjectName)' == 'Aspire.Templates.Tests' ">false</_CreateRunsheet>

      <_PreCommand>$(TestRunnerPreCommand)</_PreCommand>
    </PropertyGroup>

    <PropertyGroup>
      <!--
        We do not care whether the project is multi-targeting, we're only generating a command to kick off the testing sequence,
        which in turn will run the tests for all the target frameworks.

        So, instead of using "%(TestToRun.ResultsFilePathWithoutExtension)" (which looks something like "Aspire.Cli.Tests_net8.0_x64")
        we use the project name (which looks something like "Aspire.Cli.Tests").
        -->
      <_TestRunsheet>$(MSBuildProjectName)</_TestRunsheet>
      <_TestRunsheetFileNameWindows>$(ArtifactsTmpDir)\$(_TestRunsheet).win.runsheet.json</_TestRunsheetFileNameWindows>
      <_TestRunsheetFileNameLinux>$(ArtifactsTmpDir)\$(_TestRunsheet).linux.runsheet.json</_TestRunsheetFileNameLinux>

      <_TestBinLog>$([MSBuild]::NormalizePath($(ArtifactsLogDir), '$(_TestRunsheet).binlog'))</_TestBinLog>

      <_RelativeTestProjectPath>$([System.String]::Copy('$(MSBuildProjectFullPath)').Replace('$(RepoRoot)', '%24(pwd)/'))</_RelativeTestProjectPath>
      <_RelativeTestBinLog>$([System.String]::Copy('$(_TestBinLog)').Replace('$(RepoRoot)', '%24(pwd)/'))</_RelativeTestBinLog>

      <_TestRunnerWindows>./eng/build.ps1</_TestRunnerWindows>
      <_TestRunnerLinux>./eng/build.sh</_TestRunnerLinux>
      <_TestCommand>-restore -build -test -projects &quot;$(_RelativeTestProjectPath)&quot; /bl:&quot;$(_RelativeTestBinLog)&quot; -c $(Configuration) -ci</_TestCommand>

      <!-- Tests requiring packages must be run in the "out of repo" mode -->
      <_TestCommand Condition=" '$(_RequiresPackages)' == 'true' ">$(_TestCommand) /p:TestsRunningOutsideOfRepo=true</_TestCommand>

      <!-- Replace \ with /, and then escape " with \", so we have a compliant JSON -->
      <_PreCommand>$([System.String]::Copy($(_PreCommand)).Replace("\", "/").Replace('&quot;', '\&quot;'))</_PreCommand>
      <_TestCommand>$([System.String]::Copy($(_TestCommand)).Replace("\", "/").Replace('&quot;', '\&quot;'))</_TestCommand>

      <_TestRunsheetWindows>{ "project": "$(_TestRunsheet)", "os": "windows-latest", "command": "./eng/build.ps1 $(_TestCommand)" }</_TestRunsheetWindows>
      <_TestRunsheetLinux>{ "project": "$(_TestRunsheet)", "os": "ubuntu-latest", "command": "$(_PreCommand)./eng/build.sh $(_TestCommand)" }</_TestRunsheetLinux>
    </PropertyGroup>

    <ItemGroup>
      <_OutputFiles Include="$(_TestRunsheetFileNameWindows)" />
      <_OutputFiles Include="$(_TestRunsheetFileNameLinux)" />
    </ItemGroup>

    <MakeDir Directories="@(_OutputFiles->'%(RootDir)%(Directory)')"/>
    <Delete Files="@(_OutputFiles)" />

    <WriteLinesToFile
            Condition=" '$(RunOnGithubActionsWindows)' == 'true' and '$(_CreateRunsheet)' == 'true' "
            File="$(_TestRunsheetFileNameWindows)"
            Lines="$(_TestRunsheetWindows)"
            Overwrite="true"
            WriteOnlyWhenDifferent="true" />
    <WriteLinesToFile
            Condition=" '$(RunOnGithubActionsLinux)' == 'true' and '$(_CreateRunsheet)' == 'true' "
            File="$(_TestRunsheetFileNameLinux)"
            Lines="$(_TestRunsheetLinux)"
            Overwrite="true"
            WriteOnlyWhenDifferent="true" />

    <!--
      On Linux there's a bug in MSBuild, which "normalises" all slashes (see https://github.com/dotnet/msbuild/issues/3468).
      This is a workaround to replace `/"` with the required `\"`.
      -->
    <Exec Command="pwsh -Command &quot;(Get-Content -Path '$(_TestRunsheetFileNameWindows)') -replace '/\&quot;', '\\\&quot;' | Set-Content -Path '$(_TestRunsheetFileNameWindows)'&quot; "
          Condition=" Exists('$(_TestRunsheetFileNameWindows)') and '$(BuildOs)' != 'windows' " />
    <Exec Command="pwsh -Command &quot;(Get-Content -Path '$(_TestRunsheetFileNameLinux)') -replace '/\&quot;', '\\\&quot;' | Set-Content -Path '$(_TestRunsheetFileNameLinux)'&quot; "
          Condition=" Exists('$(_TestRunsheetFileNameLinux)') and '$(BuildOs)' != 'windows' " />

    <!--
      The final piece of the puzzle is in eng/AfterSolutionBuild.targets, where we combine the runsheets from all the test projects into a single runsheet.
      -->
  </Target>

</Project>
