<Project>
  <!--

    This file is used to generate a list of tests to run on GitHub Actions.

         .\build.cmd -test /p:TestRunnerName=QuarantinedTestRunsheetBuilder /p:RunQuarantinedTests=true [/bl /p:GITHUB_ACTIONS=true]

    For the large part this is a copy of the Arcade SDK's implementations:
      - https://github.com/dotnet/arcade/blob/b888df17/src/Microsoft.DotNet.Arcade.Sdk/tools/XUnit/XUnit.Runner.targets
      - https://github.com/dotnet/arcade/blob/b888df17/src/Microsoft.DotNet.Arcade.Sdk/tools/VSTest.targets
   -->

  <!--
    In short, this file automates the detection of quarantined tests and generates appropriate GitHub Actions runsheets to execute these tests separately,
    ensuring quarantined tests are handled explicitly and systematically.

    This MSBuild targets file automates the detection and handling of quarantined tests within a .NET project's CI pipeline.
    Here's a high-level overview of its logic:

    1. **Run Tests and Capture Output**:
      - Executes test assemblies using the configured test runner.
      - Captures the output into a log file (`ResultsStdOutPath`).

    2. **Check for Errors**:
      - If the test runner exits with a non-zero exit code (`_TestErrorCode`), it triggers an MSBuild `<Error>` task, indicating the test search failed.

    3. **Detect Quarantined Tests**:
      - Reads the captured test output log file.
      - Checks if the log contains the phrase `"No test matches the given testcase filter"`. If found, it means there are no quarantined tests.

    4. **Set Flags Based on Detection**:
      - Sets a property `_HasQuarantinedTests` to `true` or `false` based on the presence or absence of quarantined tests.

    5. **Generate Test Runsheets**:
      - If quarantined tests are detected (`_HasQuarantinedTests` is `true`), it constructs JSON-formatted "runsheet" files for GitHub Actions.
        These runsheets contain commands to execute quarantined tests specifically on Windows (`build.ps1`) or Linux (`build.sh`).
        For example:

          ```json
          {
            "project": "Aspire.Test",
            "os": "windows-latest",
            "command": "./eng/build.ps1 -restore -build -test -projects \"$(RelativeTestProjectPath)\" /bl:\"$(RelativeTestBinLog)\" -c $(Configuration) -ci /p:RunQuarantinedTests=true /p:CI=false"
          }
          ```

    6. **Write Runsheets to Files**:
      - Writes the generated JSON runsheets to the artifacts directory, separately for Windows and Linux environments, conditioned on the environment
        variables (`RunOnGithubActionsWindows`, `RunOnGithubActionsLinux`).

    NOTE: The final piece of the puzzle is in eng/AfterSolutionBuild.targets, where we combine the runsheets from all the test projects into a single runsheet.

    -->
  <Target Name="RunTests"
          Outputs="%(TestToRun.ResultsStdOutPath)"
          Condition=" '$(SkipTests)' != 'true' and '$(IsGitHubActionsRunner)' == 'true' and '$(RunOnGithubActions)' == 'true' ">

    <PropertyGroup>
      <_TestEnvironment>%(TestToRun.EnvironmentDisplay)</_TestEnvironment>
      <_TestAssembly>%(TestToRun.Identity)</_TestAssembly>
      <_TestAssembly Condition="'$(OS)'=='Windows_NT'">$([System.IO.Path]::ChangeExtension($(_TestAssembly), '.exe'))</_TestAssembly>
      <_TestAssembly Condition="'$(OS)'!='Windows_NT'">$(_TestAssembly.TrimEnd('.dll'))</_TestAssembly>
      <_TestTimeout>%(TestToRun.TestTimeout)</_TestTimeout>

      <_TargetDir>$([System.IO.Path]::GetDirectoryName('$(_TestAssembly)'))\</_TargetDir>

      <_TestRunnerCommand>$(_TestAssembly) --list-tests $(_QuarantinedTestRunAdditionalArgs)</_TestRunnerCommand>

      <!--
        Redirect std output of the runner.
        -->
      <_TestRunnerCommand Condition="'$(TestCaptureOutput)' != 'false'">$(_TestRunnerCommand) >> "%(TestToRun.ResultsStdOutPath)" 2>&amp;1</_TestRunnerCommand>
    </PropertyGroup>

    <ItemGroup>
      <_OutputFiles Include="%(TestToRun.ResultsStdOutPath)" />
    </ItemGroup>

    <MakeDir Directories="@(_OutputFiles->'%(RootDir)%(Directory)')"/>
    <Delete Files="@(_OutputFiles)" />

    <!--
      Add command line to the log.
      -->
    <Exec Command="echo === COMMAND LINE === > %(TestToRun.ResultsStdOutPath)
                   echo $(_TestRunnerCommand) >> %(TestToRun.ResultsStdOutPath)" />

    <Message Text="Searching for quarantined tests: $(_TestAssembly) [$(_TestEnvironment)]" Importance="high"/>
    <Exec Command='$(_TestRunnerCommand)'
          LogStandardErrorAsError="false"
          WorkingDirectory="$(_TargetDir)"
          IgnoreExitCode="true"
          Timeout="$(_TestTimeout)"
          EnvironmentVariables="DOTNET_ROOT=$(DotNetRoot);DOTNET_ROOT_X86=$(DotNetRoot)x86"
          ContinueOnError="WarnAndContinue">
      <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
    </Exec>

    <PropertyGroup>
      <_ResultsFileToDisplay>%(TestToRun.ResultsStdOutPath)</_ResultsFileToDisplay>
    </PropertyGroup>

    <!--
      Report test status.
      -->
    <Message Text="Search complete, no quarantined tests found: $(_TestAssembly) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '8'" Importance="high" />
    <Message Text="ðŸ’¡ Search complete, quarantined tests found: $(_TestAssembly) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '0'" Importance="high" />
    <Error Text="Search failed: $(_ResultsFileToDisplay) [$(_TestEnvironment)]" Condition=" '$(_TestErrorCode)' != '0' and '$(_TestErrorCode)' != '8' " File="QuarantinedTestRunsheetBuilder" />

    <PropertyGroup>
      <_HasQuarantinedTests>true</_HasQuarantinedTests>
      <_HasQuarantinedTests Condition=" '$(_TestErrorCode)' == '8' ">false</_HasQuarantinedTests>
    </PropertyGroup>

    <!--
      Generate test runsheet, if there are quarantined tests.
      -->
    <PropertyGroup Condition=" '$(_HasQuarantinedTests)' == 'true' ">
      <!--
        We do not care whether the project is multi-targeting, we're only generating a command to kick off the testing sequence,
        which in turn will run the tests for all the target frameworks.

        So, instead of using "%(TestToRun.ResultsFilePathWithoutExtension)" (which looks something like "Aspire.Cli.Tests_net8.0_x64")
        we use the project name (which looks something like "Aspire.Cli.Tests").
        -->
      <_TestRunsheet>$(MSBuildProjectName)</_TestRunsheet>
      <_TestRunsheetFileNameWindows>$(ArtifactsTmpDir)\$(_TestRunsheet).win.runsheet.json</_TestRunsheetFileNameWindows>
      <_TestRunsheetFileNameLinux>$(ArtifactsTmpDir)\$(_TestRunsheet).linux.runsheet.json</_TestRunsheetFileNameLinux>
      <_TestRunsheetFileNameMacOS>$(ArtifactsTmpDir)\$(_TestRunsheet).macos.runsheet.json</_TestRunsheetFileNameMacOS>

      <_TestBinLog>$([MSBuild]::NormalizePath($(ArtifactsLogDir), '$(_TestRunsheet).binlog'))</_TestBinLog>

      <_RelativeTestProjectPath>$([System.String]::Copy('$(MSBuildProjectFullPath)').Replace('$(RepoRoot)', '%24(pwd)/'))</_RelativeTestProjectPath>
      <_RelativeTestBinLog>$([System.String]::Copy('$(_TestBinLog)').Replace('$(RepoRoot)', '%24(pwd)/'))</_RelativeTestBinLog>

      <_TestRunnerWindows>./eng/build.ps1</_TestRunnerWindows>
      <_TestRunnerLinux>./eng/build.sh</_TestRunnerLinux>
      <_TestCommand>-restore -build -test -projects &quot;$(_RelativeTestProjectPath)&quot; /bl:&quot;$(_RelativeTestBinLog)&quot; -c $(Configuration) -ci /p:RunQuarantinedTests=true /p:CI=false</_TestCommand>

      <_PreCommand>$(TestRunnerPreCommand)</_PreCommand>

      <!--
        Some quarantinted test may only be executable on Windows or Linux, however we can't possibly know that at this time.
        The MTP runner will return exit code 8 if no tests are found, and we need to ignore it instead of failing the test.
        -->
      <_TestCommand>$(_TestCommand) /p:IgnoreZeroTestResult=true</_TestCommand>

      <!-- Replace \ with /, and then escape " with \", so we have a compliant JSON -->
      <_PreCommand>$([System.String]::Copy($(_PreCommand)).Replace("\", "/").Replace('&quot;', '\&quot;'))</_PreCommand>
      <_TestCommand>$([System.String]::Copy($(_TestCommand)).Replace("\", "/").Replace('&quot;', '\&quot;'))</_TestCommand>

      <_TestRunsheetWindows>{ "project": "$(_TestRunsheet)", "os": "windows-latest", "command": "./eng/build.ps1 $(_TestCommand)" }</_TestRunsheetWindows>
      <_TestRunsheetLinux>{ "project": "$(_TestRunsheet)", "os": "ubuntu-latest", "command": "$(_PreCommand)./eng/build.sh $(_TestCommand)" }</_TestRunsheetLinux>
      <_TestRunsheetMacOS>{ "project": "$(_TestRunsheet)", "os": "macos-latest", "command": "$(_PreCommand)./eng/build.sh $(_TestCommand)" }</_TestRunsheetMacOS>
    </PropertyGroup>

    <ItemGroup>
      <_OutputFiles Include="$(_TestRunsheetFileNameWindows)" />
      <_OutputFiles Include="$(_TestRunsheetFileNameLinux)" />
      <_OutputFiles Include="$(_TestRunsheetFileNameMacOS)" />
    </ItemGroup>

    <MakeDir Directories="@(_OutputFiles->'%(RootDir)%(Directory)')"/>
    <Delete Files="@(_OutputFiles)" />

    <WriteLinesToFile
            Condition=" '$(RunOnGithubActionsWindows)' == 'true' and  '$(_HasQuarantinedTests)' == 'true'"
            File="$(_TestRunsheetFileNameWindows)"
            Lines="$(_TestRunsheetWindows)"
            Overwrite="true"
            WriteOnlyWhenDifferent="true" />
    <WriteLinesToFile
            Condition=" '$(RunOnGithubActionsLinux)' == 'true' and '$(_HasQuarantinedTests)' == 'true' "
            File="$(_TestRunsheetFileNameLinux)"
            Lines="$(_TestRunsheetLinux)"
            Overwrite="true"
            WriteOnlyWhenDifferent="true" />
    <WriteLinesToFile
            Condition=" '$(RunOnGithubActionsMacOS)' == 'true' and '$(_HasQuarantinedTests)' == 'true' "
            File="$(_TestRunsheetFileNameMacOS)"
            Lines="$(_TestRunsheetMacOS)"
            Overwrite="true"
            WriteOnlyWhenDifferent="true" />

    <!--
      On Linux there's a bug in MSBuild, which "normalises" all slashes (see https://github.com/dotnet/msbuild/issues/3468).
      This is a workaround to replace `/"` with the required `\"`.
      -->
    <Exec Command="pwsh -Command &quot;(Get-Content -Path '$(_TestRunsheetFileNameWindows)') -replace '/\&quot;', '\\\&quot;' | Set-Content -Path '$(_TestRunsheetFileNameWindows)'&quot; "
          Condition=" Exists('$(_TestRunsheetFileNameWindows)') and '$(BuildOs)' != 'windows' " />
    <Exec Command="pwsh -Command &quot;(Get-Content -Path '$(_TestRunsheetFileNameLinux)') -replace '/\&quot;', '\\\&quot;' | Set-Content -Path '$(_TestRunsheetFileNameLinux)'&quot; "
          Condition=" Exists('$(_TestRunsheetFileNameLinux)') and '$(BuildOs)' != 'windows' " />
    <Exec Command="pwsh -Command &quot;(Get-Content -Path '$(_TestRunsheetFileNameMacOS)') -replace '/\&quot;', '\\\&quot;' | Set-Content -Path '$(_TestRunsheetFileNameMacOS)'&quot; "
          Condition=" Exists('$(_TestRunsheetFileNameMacOS)') and '$(BuildOs)' != 'windows' " />

    <!--
      The final piece of the puzzle is in eng/AfterSolutionBuild.targets, where we combine the runsheets from all the test projects into a single runsheet.
      -->
  </Target>

</Project>
