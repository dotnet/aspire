<Project DefaultTargets="Restore;Build">
  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props" />

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <IncludeBuildOutput>false</IncludeBuildOutput>

    <WorkloadIntermediateOutputPath>$(ArtifactsObjDir)workloads/</WorkloadIntermediateOutputPath>
    <VSTemp>$(WorkloadIntermediateOutputPath)VS/</VSTemp>
    <WorkloadOutputPath>$(ArtifactsBinDir)workloads/</WorkloadOutputPath>
    <WorkloadOutputPath Condition="'$(workloadArtifactsPath)' != ''">$(workloadArtifactsPath)/</WorkloadOutputPath>
    <PackageSource>$(ArtifactsShippingPackagesDir)</PackageSource>
    <PackageSource Condition="'$(workloadPackagesPath)' != ''">$(workloadPackagesPath)/</PackageSource>
    <RunAnalyzers>false</RunAnalyzers>
  </PropertyGroup>

  <!-- Arcade -->
  <PropertyGroup>
    <!-- Temp directory for light command layouts -->
    <LightCommandObjDir>$(ArtifactsObjDir)/LightCommandPackages</LightCommandObjDir>
    <!-- Directory for the zipped up light command package -->
    <LightCommandPackagesDir>$(ArtifactsNonShippingPackagesDir)</LightCommandPackagesDir>
  </PropertyGroup>

  <PropertyGroup>
    <WixToolsetPath>$(PkgMicrosoft_Signed_Wix)\tools</WixToolsetPath>
    <SwixPluginPath>$(PkgMicroBuild_Plugins_SwixBuild_Dotnet)</SwixPluginPath>
    <SwixBuildTargets>$(SwixPluginPath)\build\MicroBuild.Plugins.SwixBuild.targets</SwixBuildTargets>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Workloads" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.Signed.WiX" GeneratePathProperty="true" />
    <PackageReference Include="MicroBuild.Plugins.SwixBuild.Dotnet" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Installers" GeneratePathProperty="true" />
  </ItemGroup>

  <!-- The list of runtimes DCP provides binaries for -->
  <ItemGroup>
    <_DcpRuntimes Include="win-x86" />
    <_DcpRuntimes Include="win-x64" />
    <_DcpRuntimes Include="win-arm64" />
    <_DcpRuntimes Include="linux-x64" />
    <_DcpRuntimes Include="linux-arm64" />
    <_DcpRuntimes Include="osx-x64" />
    <_DcpRuntimes Include="osx-arm64" />
  </ItemGroup>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />

  <Target Name="Build" DependsOnTargets="GetAssemblyVersion;_GetVersionProps;_GenerateMsiVersionString">
    <ItemGroup>
      <!-- Overrides for Visual Studio setup generation. If the workload definition IDs change,
           these must be updated. -->
      <_ComponentResources Include="aspire" Title=".NET Aspire SDK"
                          Description=".NET Aspire SDK"/>
      <_ComponentResources Include="aspire-host-runtime" Title=".NET Aspire SDK Hosts"
                          Description=".NET Aspire SDK Hosts"/>
      <ComponentResources Include="@(_ComponentResources)" Version="$(FileVersion)"/>
    </ItemGroup>

    <!-- BAR requires having version information in blobs -->
    <PropertyGroup>
      <VersionedVisualStudioSetupInsertionPath>$(VisualStudioSetupInsertionPath)$(SDKBundleVersion)\</VersionedVisualStudioSetupInsertionPath>
    </PropertyGroup>

    <!-- Shorten package names to avoid long path issues in Visual Studio -->
    <ItemGroup>
      <!-- These need to be in order - matching rules will try in order. -->
      <ShortNames Include="Microsoft.NET.SDK.Aspire.">
        <Replacement>Aspire.</Replacement>
      </ShortNames>
    </ItemGroup>

    <MSBuild Projects="../dcppack/dcppack.csproj" Targets="restore;build" Properties="DcpRuntime=%(_DcpRuntimes.Identity);PackageOutputPath=$(PackageSource)" />

    <ItemGroup>
      <ManifestPackages Include="$(PackageSource)Microsoft.NET.Sdk.Aspire.Manifest*.nupkg"
                        MsiVersion="$(MsiVersion)"
                        SupportsMachineArch="true" />
    </ItemGroup>

    <CreateVisualStudioWorkload BaseIntermediateOutputPath="$(WorkloadIntermediateOutputPath)"
                                AllowMissingPacks="True"
                                BaseOutputPath="$(WorkloadOutputPath)"
                                EnableSideBySideManifests="true"
                                ComponentResources="@(ComponentResources)"
                                PackageSource="$(PackageSource)"
                                ShortNames="@(ShortNames)"
                                WorkloadManifestPackageFiles="@(ManifestPackages)"
                                WixToolsetPath="$(WixToolsetPath)"
                                ManifestMsiVersion="$(MsiVersion)">
      <Output TaskParameter="SwixProjects" ItemName="SwixProjects" />
      <Output TaskParameter="Msis" ItemName="Msis" />
    </CreateVisualStudioWorkload>

    <!-- Split SWIX projects for packs and components/manifests and build them into separate folders. This allows us to consume pack-only drops
         across multiple VS builds to support multi-targeting. -->
    <ItemGroup>
      <SwixWorkloadPackProjects Include="@(SwixProjects)" Condition="'%(PackageType)' == 'msi-pack'"
                                ManifestOutputPath="$(VStemp)\p\%(SwixProjects.SdkFeatureBand)"
                                ZipFile="Workload.VSDrop.aspire.net.$(MajorVersion).$(MinorVersion)-%(SwixProjects.SdkFeatureBand).packs.zip"/>
      <SwixComponentsAndManifests Include="@(SwixProjects)" Condition="('%(PackageType)' == 'msi-manifest') Or ('%(PackageType)' == 'manifest-package-group') Or ('%(PackageType)' == 'component' And '%(IsPreview)' == 'false')"
                                  ManifestOutputPath="$(VStemp)\c\%(SwixProjects.SdkFeatureBand)"
                                  ZipFile="Workload.VSDrop.aspire.net.$(MajorVersion).$(MinorVersion)-%(SwixProjects.SdkFeatureBand).components.zip"/>
      <SwixPreviewComponentsAndManifests Include="@(SwixProjects)" Condition="('%(PackageType)' == 'msi-manifest') Or ('%(PackageType)' == 'component' And '%(IsPreview)' == 'true')"
                                         ManifestOutputPath="$(VStemp)\c\%(SwixProjects.SdkFeatureBand).pre"
                                         ZipFile="Workload.VSDrop.aspire.net.$(MajorVersion).$(MinorVersion)-%(SwixProjects.SdkFeatureBand)-pre.components.zip"/>
      <PartitionedSwixProjects Include="@(SwixWorkloadPackProjects);@(SwixComponentsAndManifests);@(SwixPreviewComponentsAndManifests)" />
    </ItemGroup>

    <!-- Can't build in parallel to the same output folder because of a shared file from the SWIX compiler. -->
    <MSBuild Projects="@(PartitionedSwixProjects)" Properties="SwixBuildTargets=$(SwixBuildTargets);ManifestOutputPath=%(ManifestOutputPath)"/>

    <!-- Create the zip files used for VSDROP creation. -->
    <ItemGroup>
      <SdkFeatureBand Include="%(SwixProjects.SdkFeatureBand)" />
    </ItemGroup>

    <ItemGroup>
      <VSDrop Include="%(PartitionedSwixProjects.ZipFile)" SourceDirectory="%(ManifestOutputPath)" />
    </ItemGroup>

    <MakeDir Directories="$(ArtifactsNonShippingPackagesDir)" />
    <MakeDir Directories="$(VisualStudioSetupInsertionPath)" />
    <ZipDirectory Overwrite="true" SourceDirectory="%(SourceDirectory)"
                  DestinationFile="$(VisualStudioSetupInsertionPath)%(VSDrop.Identity)" />

    <!-- Gather .wixobj files for post-build signing. We'll have to batch since we generated multiple MSIs in the previous step. -->
    <MSBuild Projects="$(MSBuildProjectFile)" Properties="_WixObjDir=%(Msis.WixObj);_Msi=%(Msis.Identity)" Targets="CreateWixPack" />

    <!-- Build all the MSI payload packages for NuGet. -->
    <ItemGroup>
      <MsiPackageProjects Include="%(Msis.PackageProject)" />
    </ItemGroup>

    <!-- We disable PackageValidation which runs because these projects import the repo's Directory.Build.props and Directory.Build.targets file. -->
    <MSBuild Projects="@(MsiPackageProjects)" Properties="OutputPath=$(ArtifactsShippingPackagesDir);IncludeSymbols=false;EnablePackageValidation=false" Targets="restore;pack" />
  </Target>

  <!-- Target to create a single wixpack for signing -->
  <Target Name="CreateWixPack">
    <ItemGroup>
      <_WixObj Include="$(_WixObjDir)\**\*.wixobj" />
    </ItemGroup>

    <CreateLightCommandPackageDrop
      LightCommandWorkingDir="$(LightCommandObjDir)"
      OutputFolder="$(LightCommandPackagesDir)"
      NoLogo="true"
      Cultures="en-us"
      InstallerFile="$(_Msi)"
      WixExtensions="WixUIExtension;WixDependencyExtension;WixUtilExtension"
      WixSrcFiles="@(_WixObj)">
      <Output TaskParameter="OutputFile" PropertyName="_LightCommandPackageNameOutput" />
    </CreateLightCommandPackageDrop>
  </Target>

  <!-- These are just individual targets for testing local builds. -->
  <Target Name="BuildSwixProjects">
    <ItemGroup>
      <SwixProjects Include="$(WorkloadIntermediateOutputPath)**\*.swixproj" />
    </ItemGroup>

    <MSBuild Projects="@(SwixProjects)" BuildInParallel="true" Properties="SwixBuildTargets=$(SwixBuildTargets);ManifestOutputPath=$(VisualStudioSetupInsertionPath)" />
  </Target>

  <Target Name="_GetVersionProps">
    <PropertyGroup>
      <_MajorVersion>$([System.Version]::Parse('$(AssemblyVersion)').Major)</_MajorVersion>
      <_MinorVersion>$([System.Version]::Parse('$(AssemblyVersion)').Minor)</_MinorVersion>
      <_PatchVersion>$([System.Version]::Parse('$(AssemblyVersion)').Build)</_PatchVersion>
      <_BuildNumber>$([System.Version]::Parse('$(AssemblyVersion)').Revision)</_BuildNumber>
    </PropertyGroup>
  </Target>

  <Target Name="_GenerateMsiVersionString">
    <PropertyGroup>
      <VersionPadding Condition="'$(VersionPadding)'==''">5</VersionPadding>
      <!-- Using the following default comparison date will produce versions that align with our internal build system. -->
      <VersionComparisonDate Condition="'$(VersionComparisonDate)'==''">1996-04-01</VersionComparisonDate>
    </PropertyGroup>

    <GenerateCurrentVersion
      SeedDate="$([System.DateTime]::Now.ToString(yyyy-MM-dd))"
      OfficialBuildId="$(OfficialBuildId)"
      ComparisonDate="$(VersionComparisonDate)"
      Padding="$(VersionPadding)">
      <Output PropertyName="BuildNumberMajor" TaskParameter="GeneratedVersion" />
      <Output PropertyName="BuildNumberMinor" TaskParameter="GeneratedRevision" />
    </GenerateCurrentVersion>

    <GenerateMsiVersion
      Major="$(_MajorVersion)"
      Minor="$(_MinorVersion)"
      Patch="$(_PatchVersion)"
      BuildNumberMajor="$(BuildNumberMajor)"
      BuildNumberMinor="$(BuildNumberMinor)">
      <Output TaskParameter="MsiVersion" PropertyName="MsiVersion" />
    </GenerateMsiVersion>
  </Target>
</Project>
