@page "/"
@using Microsoft.Extensions.AI
@using System.Diagnostics
@inject IChatClient chatClient
@inject ILogger<Home> logger

<div class="storybox" style="margin: 25%">
    @foreach (var message in chatMessages.Where(m => m.Role == ChatRole.Assistant))
    {
        <p style="font-size: 3em;">@message.Text</p>
    }

    <button @onclick="GenerateNextParagraph" autofocus>Generate</button>
    
    <p style="margin-top: 20px; font-size: 1em; color: #666;">
        Powered by GitHub Models
    </p>
</div>

@code {
    private static readonly string[] s_allNames = new[]
    {
        "James", "Mary", "John", "Patricia", "Robert", "Jennifer",
        "Michael", "Linda", "William", "Elizabeth", "David", "Barbara",
        "Richard", "Susan", "Joseph", "Jessica", "Thomas", "Sarah",
        "Charles", "Karen"
    };

    private List<ChatMessage> chatMessages = new List<ChatMessage>
    {
        new(ChatRole.System, "You are a story generator. Format stories in Markdown. Use bold and italics for emphasis. Each sentence must include a Markdown formatted link to Wikipedia about a topic in the sentence.")
    };

    public Task<List<string>> GenerateNamesAsync(int number)
    {
        // Note that this could randomly select the same name multiple times.
        var names = Enumerable.Range(1, number)
            .Select(i => s_allNames[Random.Shared.Next(0, s_allNames.Length)])
            .ToList();

        return Task.FromResult(names);
    }

    private async Task GenerateNextParagraph()
    {
        var chatOptions = new ChatOptions
        {
            Tools = [AIFunctionFactory.Create(GenerateNamesAsync, name: "generate_names", description: "Generates a list of fictional names for the story.")]
        };

        if (chatMessages.Count > 1)
        {
            chatMessages.Add(new ChatMessage(ChatRole.User, "Write the next sentence in the story."));
        }
        else
        {
            chatMessages.Add(new ChatMessage(ChatRole.User, "Pick a random topic and write a sentence of a fictional story about it. If you need character names, call the generate_names tool."));
        }

        var response = await chatClient.GetResponseAsync(chatMessages, chatOptions);
        chatMessages.AddMessages(response);
    }

    protected override async Task OnInitializedAsync()
    {
        await GenerateNextParagraph();
    }
}
