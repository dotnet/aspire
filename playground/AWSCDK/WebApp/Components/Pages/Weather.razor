@page "/weather"
@using Amazon.DynamoDBv2.DocumentModel
@using Microsoft.Extensions.Options
@using Amazon.DynamoDBv2
@inject IAmazonDynamoDB DynamoDB
@inject IOptions<AWSResources> awsResources;
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {

        var results = new List<WeatherForecast>();
        var table = Table.LoadTable(DynamoDB, awsResources.Value.TableName);
        var search = table.Scan(new ScanFilter());
        do
        {
            var documentations = await search.GetNextSetAsync();
            results.AddRange(documentations.Select(d =>
                new WeatherForecast()
                {
                    Date = DateOnly.Parse(d["id"]),
                    Summary = d["summary"],
                    TemperatureC = d["temperature"].AsInt()
                }));
        } while (!search.IsDone);
        forecasts = results.ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
