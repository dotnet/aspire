# Workflow to run tests for a given test project

name: Run Tests

on:
  workflow_call:
    inputs:
      testShortName:
        required: true
        type: string
      testProjectPath:
        # relative the repo root
        required: false
        type: string
      testSessionTimeoutMs:
        required: false
        type: string
        default: "600000"
      testHangTimeout:
        required: false
        type: string
        default: "7m"
      extraTestArgs:
        required: false
        type: string
      os:
        required: false
        type: string
        default: "ubuntu-latest"

jobs:

  test:
    runs-on: ${{ inputs.os }}
    timeout-minutes: 60
    name: ${{ inputs.testShortName }}
    if: inputs.os != 'windows-latest' || inputs.testShortName != 'Playground'
    steps:
      - name: Validate arguments
        shell: pwsh
        run: |
          if ([string]::IsNullOrEmpty("${{ inputs.testShortName }}")) {
            Write-Error "Error: testShortName is required."
            exit 1
          }

      - name: Setup vars (Linux)
        if: ${{ inputs.os == 'ubuntu-latest' }}
        run: |
          echo "DOTNET_SCRIPT=./dotnet.sh" >> $GITHUB_ENV
          echo "BUILD_SCRIPT=./build.sh" >> $GITHUB_ENV

      - name: Setup vars (Windows)
        if: ${{ inputs.os == 'windows-latest' }}
        run: |
          echo "DOTNET_SCRIPT=.\dotnet.cmd" >> $env:GITHUB_ENV
          echo "BUILD_SCRIPT=.\build.cmd" >> $env:GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trust HTTPS development certificate (Linux)
        if: inputs.os == 'ubuntu-latest'
        run: ${{ env.DOTNET_SCRIPT }} dev-certs https --trust

      - name: Verify Docker is running
        # nested docker containers not supported on windows
        if: inputs.os == 'ubuntu-latest'
        run: docker info

      - name: Build with packages
        if: ${{ contains(inputs.testProjectPath, 'Aspire.Workload.Tests') }}
        env:
          CI: false
        run: ${{ env.BUILD_SCRIPT }} -restore -build -ci -pack -testnobuild /bl

      - name: Install sdk for workload testing
        if: ${{ contains(inputs.testProjectPath, 'Aspire.Workload.Tests') }}
        env:
          CI: false
        run: >
          ${{ env.DOTNET_SCRIPT }} build ${{ github.workspace }}/tests/workloads.proj
          /p:SkipPackageCheckForWorkloadTesting=true
          /bl:${{ github.workspace }}/artifacts/log/Debug/InstallSdkForTesting.binlog

      - name: Install Azure Functions Core Tools
        if: inputs.os == 'ubuntu-latest' && (inputs.testShortName == 'Playground' || inputs.testShortName == 'Azure')
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-functions-core-tools-4

      - name: Compute test project path
        id: compute_project_path
        shell: pwsh
        env:
          CI: false
        run: |
          $testShortName = "${{ inputs.testShortName }}"
          $overrideTestProjectPath = "${{ inputs.testProjectPath }}"
          $projectPath1 = "${{ github.workspace }}/tests/$testShortName.Tests/$testShortName.Tests.csproj"
          $projectPath2 = "${{ github.workspace }}/tests/Aspire.$testShortName.Tests/Aspire.$testShortName.Tests.csproj"

          if (-not [string]::IsNullOrEmpty($overrideTestProjectPath)) {
              $projectPath = "${{ github.workspace }}/$overrideTestProjectPath"
          } elseif (Test-Path -Path $projectPath1) {
              $projectPath = $projectPath1
          } elseif (Test-Path -Path $projectPath2) {
              $projectPath = $projectPath2
          } else {
              Write-Error "No matching project path found."
              exit 1
          }

          echo "TEST_PROJECT_PATH=$projectPath" >> $env:GITHUB_ENV

      - name: Build test project
        env:
          CI: false
        run: |
          ${{ env.BUILD_SCRIPT }} -restore -ci -build -projects ${{ env.TEST_PROJECT_PATH }}

      # Workaround for bug in Azure Functions Worker SDK. See https://github.com/Azure/azure-functions-dotnet-worker/issues/2969.
      - name: Rebuild for Azure Functions project
        if: inputs.testShortName == 'Playground'
        env:
          CI: false
        run: |
          ${{ env.DOTNET_SCRIPT }} build ${{ github.workspace }}/playground/AzureFunctionsEndToEnd/AzureFunctionsEndToEnd.Functions/AzureFunctionsEndToEnd.Functions.csproj /p:SkipUnstableEmulators=true

      - name: Run tests
        id: run-tests
        env:
          CI: false
          DCP_DIAGNOSTICS_LOG_LEVEL: debug
          DCP_DIAGNOSTICS_LOG_FOLDER: ${{ github.workspace }}/testresults/dcp
          DISABLE_PLAYWRIGHT_TESTS: ${{ inputs.os == 'ubuntu-latest' }}
        run: >
          ${{ env.DOTNET_SCRIPT }} test ${{ env.TEST_PROJECT_PATH }}
          /p:ContinuousIntegrationBuild=true
          -s eng/testing/.runsettings
          -l "console;verbosity=normal"
          -l "trx;LogFilePrefix=${{ inputs.testShortName }}"
          -l "GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true"
          "--blame"
          --blame-hang-timeout ${{ inputs.testHangTimeout }}
          --blame-crash
          --results-directory testresults
          --no-restore
          --no-build
          ${{ inputs.extraTestArgs }}
          --
          RunConfiguration.CollectSourceInformation=true
          RunConfiguration.TestSessionTimeout=${{ inputs.testSessionTimeoutMs }}

      # Save the result of the previous steps - success or failure
      # in the form of a file result-success/result-failure -{name}.rst
      - name: Store result - success
        if: ${{ success() }}
        run: touch result-success-${{ inputs.testShortName }}.rst
      - name: Store result - failure
        if: ${{ !success() }}
        run: touch result-failed-${{ inputs.testShortName }}.rst

      # Upload that result file to artifact named test-job-result-{name}
      - name: Upload test result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-job-result-${{ inputs.testShortName }}-${{ inputs.os }}
          path: result-*.rst

      - name: Dump docker info
        if: always()
        run: |
          docker container ls --all
          docker container ls --all --format json
          docker volume ls
          docker network ls

      - name: Upload logs, and test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ inputs.testShortName }}-${{ inputs.os }}
          path: |
            **/*.binlog
            testresults/**
