name: Integration

on:
  pull_request:
    branches:
      - main
      - 'release/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup_for_tests:
    name: Enumerate test projects (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          include:
            - os: ubuntu-latest
              dotnet_script: ./dotnet.sh
            - os: windows-latest
              dotnet_script: .\dotnet.cmd
    outputs:
      tests_matrix: ${{ steps.generate_test_matrix.outputs.tests_matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get list of tests
        env:
          CI: false
        run: >
          ${{ matrix.dotnet_script }} build ${{ github.workspace }}/tests/Shared/GetTestProjects.proj
          /p:TestsListOutputPath=${{ github.workspace }}/artifacts/TestsForGithubActions.list
          /p:ContinuousIntegrationBuild=true

      - name: Generate tests matrix
        id: generate_test_matrix
        shell: pwsh
        env:
          CI: false
        run: |
          $filePath = "${{ github.workspace }}/artifacts/TestsForGithubActions.list"
          $lines = Get-Content $filePath
          $jsonObject = @{
              "shortname" = $lines | Sort-Object
          }
          $jsonString = ConvertTo-Json $jsonObject -Compress
          "tests_matrix=$jsonString"
          "tests_matrix=$jsonString" | Out-File -FilePath $env:GITHUB_OUTPUT

  test:
    uses: ./.github/workflows/run-tests.yml
    needs: setup_for_tests
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup_for_tests.outputs.tests_matrix) }}
    with:
      testShortName: ${{ matrix.shortname }}
      testSessionTimeoutMs: ${{ matrix.testSessionTimeoutMs }}
      extraTestArgs: ${{ matrix.extraTestArgs }}

  results: # This job is used for branch protection. It ensures all the above tests passed
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Final Results
    needs: [test]
    steps:
      # get all the test-job-result* artifacts into a single directory
      - uses: actions/download-artifact@v4
        with:
          pattern: test-job-result-*
          merge-multiple: true
          path: test-job-result

      # return success if zero result-failed-* files are found
      - name: Compute result
        run: |
          [ 0 -eq $(find test-job-result -name 'result-failed-*' | wc -l) ]
