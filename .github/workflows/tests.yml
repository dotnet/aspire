name: Run Integration Tests

on:
  pull_request:
    branches:
      - main
      - 'release/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Hosting projects
          - project: tests/Aspire.Hosting.Analyzers.Tests/Aspire.Hosting.Analyzers.Tests.csproj
            name: Hosting.Analyzers
          - project: tests/Aspire.Hosting.Azure.Tests/Aspire.Hosting.Azure.Tests.csproj
            name: Hosting.Azure
          - project: tests/Aspire.Hosting.Containers.Tests/Aspire.osting.Containers.Tests.csproj
            name: Hosting.Containers
    steps:
      #- name: Checkout code
        #uses: actions/checkout@v4

      #- name: Set up .NET Core
        #uses: actions/setup-dotnet@v4
        #with:
          #dotnet-version: |
            #8.x
            #9.x

      #- name: Trust HTTPS development certificate
        #run: dotnet dev-certs https --trust

      #- name: Verify Docker is running
        #run: docker info

      #- name: Install Azure Functions Core Tools
        #if: matrix.name == 'Playground' || matrix.name == 'Azure'
        #run: |
          #sudo apt-get update
          #sudo apt-get install -y azure-functions-core-tools-4

      #- name: Build test project
        #env:
          #CI: false
        #run: |
          #./build.sh -restore -ci -build -projects ${{ github.workspace }}/${{ matrix.project }} /bl

      #- name: Run tests
        #id: run-tests
        #env:
          #CI: false
          #DCP_DIAGNOSTICS_LOG_LEVEL: debug
          #DCP_DIAGNOSTICS_LOG_FOLDER: ${{ github.workspace }}/testresults/dcp
        #run: |
          #./dotnet.sh test ${{ github.workspace }}/${{ matrix.project }} \
            #/p:ContinuousIntegrationBuild=true \
            #-s eng/testing/.runsettings \
            #--logger "console;verbosity=normal" \
            #--logger "trx" \
            #--logger "GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true" \
            #--blame \
            #--blame-hang-timeout 7m \
            #--blame-crash \
            #--results-directory testresults \
            #--no-restore \
            #--no-build -- RunConfiguration.CollectSourceInformation=true

      - name: first
        if: ${{ matrix.name == '-asdHosting.Containers' }}
        run: |
          echo fail
          exit 1

      - name: first
        if: ${{ matrix.name != 'Hosting.Containers' }}
        run: |
          echo success

      - name: second
        run: echo hello

      - name: Store result - success
        if: ${{ success() }}
        run: touch result-success-${{ matrix.name }}.rst

      - name: Store result - failure
        if: ${{ !success() }}
        run: touch result-failed-${{ matrix.name }}.rst

      - name: Save exit code from the tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-job-result-${{ matrix.name }}
          path: result-*.rst

      - name: Dump docker info
        if: always()
        run: |
          docker container ls --all
          docker container ls --all --format json
          docker volume ls
          docker network ls

      - name: Upload bin log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: binlog-${{ matrix.name }}
          path: "**/*.binlog"

      - name: Upload test results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: testresults-${{ matrix.name }}
          path: testresults/**

  final-results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Final Results
    needs: [test]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: test-job-result-*
          merge-multiple: true
          path: test-job-result

      - run: |
          ls -al test-job-result/
          ls test-job-result/result-failed-*; [ $? -ne 0 ]
