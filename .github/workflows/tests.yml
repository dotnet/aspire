# Executes all the tests on all the platforms
name: Tests

on:
  workflow_call:
    inputs:
      versionOverrideArg:
        required: false
        type: string

jobs:
  # Duplicated jobs so their dependencies are not blocked on both the
  # setup jobs

  setup_for_tests_lin:
    name: Setup for tests (Linux)
    runs-on: ubuntu-latest
    outputs:
      integrations_tests_matrix: ${{ steps.generate_tests_matrix.outputs.integrations_tests_matrix }}
      templates_tests_matrix: ${{ steps.generate_tests_matrix.outputs.templates_tests_matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ./.github/actions/enumerate-tests
        id: generate_tests_matrix
        with:
          includeIntegrations: true
          includeTemplates: true

  setup_for_tests_macos:
    name: Setup for tests (macOS)
    runs-on: macos-latest
    outputs:
      integrations_tests_matrix: ${{ steps.generate_tests_matrix.outputs.integrations_tests_matrix }}
      templates_tests_matrix: ${{ steps.generate_tests_matrix.outputs.templates_tests_matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ./.github/actions/enumerate-tests
        id: generate_tests_matrix
        with:
          includeIntegrations: true
          includeTemplates: true

  setup_for_tests_win:
    name: Setup for tests (Windows)
    runs-on: windows-latest
    outputs:
      integrations_tests_matrix: ${{ steps.generate_tests_matrix.outputs.integrations_tests_matrix }}
      templates_tests_matrix: ${{ steps.generate_tests_matrix.outputs.templates_tests_matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ./.github/actions/enumerate-tests
        id: generate_tests_matrix
        with:
          includeIntegrations: true
          includeTemplates: true

  build_packages:
    name: Build packages
    uses: ./.github/workflows/build-packages.yml
    with:
      versionOverrideArg: ${{ inputs.versionOverrideArg }}

  integrations_test_lin:
    uses: ./.github/workflows/run-tests.yml
    name: Integrations Linux
    needs: setup_for_tests_lin
    strategy:
      fail-fast: false
      matrix:
        ${{ fromJson(needs.setup_for_tests_lin.outputs.integrations_tests_matrix) }}
    with:
      testShortName: ${{ matrix.shortname }}
      os: "ubuntu-latest"
      extraTestArgs: "--filter-not-trait \"quarantined=true\""
      versionOverrideArg: ${{ inputs.versionOverrideArg }}

  integrations_test_macos:
    uses: ./.github/workflows/run-tests.yml
    name: Integrations macos
    needs: setup_for_tests_macos
    strategy:
      fail-fast: false
      matrix:
        ${{ fromJson(needs.setup_for_tests_macos.outputs.integrations_tests_matrix) }}
    with:
      testShortName: ${{ matrix.shortname }}
      os: "macos-latest"
      extraTestArgs: "--filter-not-trait \"quarantined=true\""
      versionOverrideArg: ${{ inputs.versionOverrideArg }}

  integrations_test_win:
    uses: ./.github/workflows/run-tests.yml
    name: Integrations Windows
    needs: setup_for_tests_win
    strategy:
      fail-fast: false
      matrix:
        ${{ fromJson(needs.setup_for_tests_win.outputs.integrations_tests_matrix) }}
    with:
      testShortName: ${{ matrix.shortname }}
      os: "windows-latest"
      extraTestArgs: "--filter-not-trait \"quarantined=true\""
      versionOverrideArg: ${{ inputs.versionOverrideArg }}

  templates_test_lin:
    name: Templates Linux
    uses: ./.github/workflows/run-tests.yml
    needs: [setup_for_tests_lin, build_packages]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup_for_tests_lin.outputs.templates_tests_matrix) }}
    with:
      testShortName: ${{ matrix.shortname }}
      os: "ubuntu-latest"
      testProjectPath: tests/Aspire.Templates.Tests/Aspire.Templates.Tests.csproj
      testSessionTimeout: 20m
      testHangTimeout: 12m
      extraTestArgs: "--filter-not-trait quarantined=true --filter-class Aspire.Templates.Tests.${{ matrix.shortname }}"
      versionOverrideArg: ${{ inputs.versionOverrideArg }}
      requiresNugets: true
      requiresTestSdk: true

  templates_test_macos:
    name: Templates macos
    uses: ./.github/workflows/run-tests.yml
    needs: [setup_for_tests_macos, build_packages]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup_for_tests_macos.outputs.templates_tests_matrix) }}
    with:
      testShortName: ${{ matrix.shortname }}
      os: "macos-latest"
      testProjectPath: tests/Aspire.Templates.Tests/Aspire.Templates.Tests.csproj
      testSessionTimeout: 20m
      testHangTimeout: 12m
      extraTestArgs: "--filter-not-trait quarantined=true --filter-class Aspire.Templates.Tests.${{ matrix.shortname }}"
      versionOverrideArg: ${{ inputs.versionOverrideArg }}
      requiresNugets: true
      requiresTestSdk: true

  templates_test_win:
    name: Templates Windows
    uses: ./.github/workflows/run-tests.yml
    needs: [setup_for_tests_win, build_packages]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup_for_tests_win.outputs.templates_tests_matrix) }}
    with:
      testShortName: ${{ matrix.shortname }}
      os: "windows-latest"
      testProjectPath: tests/Aspire.Templates.Tests/Aspire.Templates.Tests.csproj
      testSessionTimeout: 20m
      testHangTimeout: 12m
      extraTestArgs: "--filter-not-trait quarantined=true --filter-class Aspire.Templates.Tests.${{ matrix.shortname }}"
      versionOverrideArg: ${{ inputs.versionOverrideArg }}
      requiresNugets: true
      requiresTestSdk: true

  endtoend_tests:
    name: EndToEnd Linux
    uses: ./.github/workflows/run-tests.yml
    needs: build_packages
    with:
      testShortName: EndToEnd
      # EndToEnd is not run on Windows/macOS due to missing Docker support
      os: ubuntu-latest
      testProjectPath: tests/Aspire.EndToEnd.Tests/Aspire.EndToEnd.Tests.csproj
      requiresNugets: true
      versionOverrideArg: ${{ inputs.versionOverrideArg }}

  extension_tests_win:
    name: Run VS Code extension tests (Windows)
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./extension
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install
      - name: Run tests
        run: yarn test
      - name: Package VSIX
        run: npx @vscode/vsce package --yarn --pre-release -o out/aspire-extension.vsix
      - name: Upload VSIX
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: aspire-extension
          path: extension/out/aspire-extension.vsix

  results:
    runs-on: ubuntu-latest
    name: Final Test Results
    needs: [
      endtoend_tests,
      extension_tests_win,
      integrations_test_lin,
      integrations_test_macos,
      integrations_test_win,
      templates_test_lin,
      templates_test_macos,
      templates_test_win
    ]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          pattern: logs-*-ubuntu-latest
          merge-multiple: true
          path: ${{ github.workspace }}/testresults/ubuntu-latest

      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          pattern: logs-*-windows-latest
          merge-multiple: true
          path: ${{ github.workspace }}/testresults/windows-latest

      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          pattern: logs-*-macos-latest
          merge-multiple: true
          path: testresults/macos-latest

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: All-TestResults
          path: ${{ github.workspace }}/testresults/**/*.trx

      - name: Generate test results summary
        if: always()
        env:
          CI: false
        run: >
          ${{ github.workspace }}/dotnet.sh
          run
          --project ${{ github.workspace }}/tools/GenerateTestSummary/GenerateTestSummary.csproj
          --
          ${{ github.workspace }}/testresults
          --combined

      - name: Fail if any dependency failed
        # 'skipped' can be when a transitive dependency fails and the dependent job gets 'skipped'.
        # For example, one of setup_* jobs failing and the Integration test jobs getting 'skipped'
        if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped')) }}
        run: |
          echo "One or more dependent jobs failed."
          exit 1
