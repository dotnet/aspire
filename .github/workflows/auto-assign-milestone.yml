name: Auto Assign Milestone to PR

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  assign-milestone:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Assign milestone
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          #!/bin/bash
          set -e

          # Function to extract version from milestone title
          # (e.g., "9.5", "v9.5" -> "9.5")
          extract_version() {
            echo "$1" | grep -o '[0-9]\+\(\.[0-9]\+\)*' | head -1
          }

          # Function to compare versions
          # (returns 0 if v1 == v2, 1 if v1 > v2, 2 if v1 < v2)
          compare_versions() {
            if [[ "$1" == "$2" ]]; then
              return 0
            fi

            local IFS=.
            local i ver1=($1) ver2=($2)

            # Fill empty fields in ver1 with zeros
            for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
              ver1[i]=0
            done

            # Fill empty fields in ver2 with zeros
            for ((i=${#ver2[@]}; i<${#ver1[@]}; i++)); do
              ver2[i]=0
            done

            # Compare versions
            for ((i=0; i<${#ver1[@]}; i++)); do
              if [[ -z ${ver2[i]} ]]; then
                ver2[i]=0
              fi
              if ((10#${ver1[i]} > 10#${ver2[i]})); then
                return 1
              fi
              if ((10#${ver1[i]} < 10#${ver2[i]})); then
                return 2
              fi
            done
            return 0
          }

          echo "Getting milestones for repository: $REPO"

          # Get all milestones (open and closed)
          milestones_json=$(gh api \
            "repos/$REPO/milestones?state=all&per_page=100")

          # Get current PR info
          pr_json=$(gh api "repos/$REPO/issues/$PR_NUMBER")
          current_milestone_id=$(echo "$pr_json" | \
            jq -r '.milestone.number // empty')

          milestone_id=""

          # Check if this is a release branch
          if [[ "$BASE_BRANCH" =~ ^release/(v?([0-9]+(\.[0-9]+)*))$ ]]; then
            target_version="${BASH_REMATCH[2]}"
            echo "Release branch detected. Looking for milestone matching" \
              "version: $target_version"

            # Find milestone with matching version
            milestone_id=$(echo "$milestones_json" | jq -r \
              --arg ver "$target_version" \
              '.[] | select(.title | test("\\b" + $ver + "\\b")) |
               .number | tostring' | head -1)

          elif [[ "$BASE_BRANCH" == "main" ]]; then
            echo "Main branch detected. Finding appropriate milestone..."

            # Find highest closed milestone version
            highest_closed_version=""
            closed_milestones=$(echo "$milestones_json" | jq -r \
              '.[] | select(.state == "closed") | .title')

            while IFS= read -r milestone_title; do
              if [[ -z "$milestone_title" ]]; then
                continue
              fi
              version=$(extract_version "$milestone_title")
              if [[ -n "$version" ]]; then
                if [[ -z "$highest_closed_version" ]]; then
                  highest_closed_version="$version"
                else
                  compare_versions "$version" "$highest_closed_version"
                  if [[ $? -eq 1 ]]; then
                    highest_closed_version="$version"
                  fi
                fi
              fi
            done <<< "$closed_milestones"

            echo "Highest closed milestone version:" \
              "${highest_closed_version:-none}"

            # Find lowest open milestone greater than highest closed
            lowest_valid_version=""
            lowest_valid_milestone_id=""
            open_milestones=$(echo "$milestones_json" | jq -r \
              '.[] | select(.state == "open") |
               "\(.title)|\(.number)"')

            while IFS='|' read -r milestone_title milestone_num; do
              if [[ -z "$milestone_title" ]]; then
                continue
              fi
              version=$(extract_version "$milestone_title")
              if [[ -n "$version" ]]; then
                # Check if version is greater than highest closed
                if [[ -z "$highest_closed_version" ]]; then
                  # No closed milestones, this is valid
                  is_valid=true
                else
                  compare_versions "$version" "$highest_closed_version"
                  is_valid=$([[ $? -eq 1 ]] && echo true || echo false)
                fi

                if [[ "$is_valid" == "true" ]]; then
                  if [[ -z "$lowest_valid_version" ]]; then
                    lowest_valid_version="$version"
                    lowest_valid_milestone_id="$milestone_num"
                  else
                    compare_versions "$version" "$lowest_valid_version"
                    if [[ $? -eq 2 ]]; then
                      lowest_valid_version="$version"
                      lowest_valid_milestone_id="$milestone_num"
                    fi
                  fi
                fi
              fi
            done <<< "$open_milestones"

            milestone_id="$lowest_valid_milestone_id"
            echo "Selected milestone version: ${lowest_valid_version:-none}"
          fi

          if [[ -n "$milestone_id" ]]; then
            if [[ "$current_milestone_id" != "$milestone_id" ]]; then
              echo "Assigning milestone $milestone_id to PR $PR_NUMBER"
              gh api "repos/$REPO/issues/$PR_NUMBER" --method PATCH \
                --field milestone="$milestone_id"
              echo "Milestone assigned successfully"
            else
              echo "PR already has the correct milestone ($milestone_id)"
            fi
          else
            echo "No matching milestone found for branch: $BASE_BRANCH"
          fi
