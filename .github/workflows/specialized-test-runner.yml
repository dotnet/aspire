# Reusable workflow for running specialized test suites (quarantined and outerloop tests)
name: Specialized Test Runner

on:
  workflow_call:
    inputs:
      testRunnerName:
        required: true
        type: string
        description: 'Arcade test runner name'
      extraRunSheetBuilderArgs:
        required: false
        type: string
      extraTestArgs:
        required: false
        type: string
      # Controls whether to install Playwright browsers during project build
      enablePlaywrightInstall:
        required: true
        type: boolean
        default: false

jobs:

  generate_tests_matrix:
    name: Generate test runsheet
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'dotnet' }}
    outputs:
      runsheet: ${{ steps.generate_tests_matrix.outputs.runsheet }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # We need to build the whole solution, so that we can interrogate each test project
      # and find out whether it contains any tests of the specified type.
      - name: Build the solution
        run: >
          ./build.sh
          --restore
          --build
          -c Release
          --ci
          /p:CI=false
          /p:GeneratePackageOnBuild=false
          ${{ !inputs.enablePlaywrightInstall && '/p:InstallBrowsersForPlaywright=false' || '' }}

      - name: Generate test runsheet
        id: generate_tests_matrix
        run: >
          ./build.sh
          --test
          /p:TestRunnerName=${{ inputs.testRunnerName }}
          ${{ inputs.extraRunSheetBuilderArgs }}
          -c Release
          --ci
          /p:CI=false
          /p:Restore=false
          /p:Build=false
          /bl:${{ github.workspace }}/artifacts/log/Release/runsheet.binlog

      - name: Upload logs, and test results
        if: ${{ always() }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: logs-runsheet
          path: |
            ${{ github.workspace }}/artifacts/log/*/runsheet.binlog
            ${{ github.workspace }}/artifacts/log/*/TestLogs/**
            ${{ github.workspace }}/artifacts/tmp/*/combined_runsheet.json
          retention-days: 5

  build_packages:
    name: Build packages
    if: ${{ github.repository_owner == 'dotnet' }}
    uses: ./.github/workflows/build-packages.yml

  run_tests:
    name: Test
    needs: [generate_tests_matrix, build_packages]
    strategy:
      fail-fast: false
      matrix:
        tests: ${{ fromJson(needs.generate_tests_matrix.outputs.runsheet) }}
    if: ${{ always() && !cancelled() && github.repository_owner == 'dotnet' && needs.generate_tests_matrix.outputs.runsheet != '[]' }}
    uses: ./.github/workflows/run-tests.yml
    with:
      testShortName: ${{ matrix.tests.project }}
      requiresNugets: ${{ matrix.tests.requiresNugets == true }}
      requiresTestSdk: ${{ matrix.tests.requiresTestSdk == true }}
      os: ${{ matrix.tests.os }}
      enablePlaywrightInstall: ${{ inputs.enablePlaywrightInstall }}
      extraTestArgs: ${{ inputs.extraTestArgs }}

  results:
    if: ${{ always() && github.repository_owner == 'dotnet' }}
    runs-on: ubuntu-latest
    name: Final Results
    needs: [generate_tests_matrix, build_packages, run_tests]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Check if there were no tests to run
      - name: Check if tests were run
        id: check_tests
        run: |
          if [ "${{ needs.generate_tests_matrix.outputs.runsheet }}" = "[]" ]; then
            echo "No tests found for this test type"
            echo "tests_run=false" >> $GITHUB_OUTPUT
          else
            echo "tests_run=true" >> $GITHUB_OUTPUT
          fi

      # get all the test logs artifacts into a single directory
      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        if: steps.check_tests.outputs.tests_run == 'true'
        with:
          pattern: 'logs-*'
          path: ${{ github.workspace }}/artifacts/all-logs

      # Organize the .trx files by OS
      - name: Organize test results by OS
        if: steps.check_tests.outputs.tests_run == 'true'
        shell: pwsh
        run: |
          $logDirectory = "${{ github.workspace }}/artifacts/all-logs"

          # Create OS-specific directories
          New-Item -ItemType Directory -Path "${{ github.workspace }}/testresults/ubuntu-latest" -Force
          New-Item -ItemType Directory -Path "${{ github.workspace }}/testresults/windows-latest" -Force
          New-Item -ItemType Directory -Path "${{ github.workspace }}/testresults/macos-latest" -Force

          # Find all .trx files
          $trxFiles = Get-ChildItem -Path $logDirectory -Filter *.trx -Recurse

          # Copy each .trx file to the appropriate OS folder
          foreach ($trxFile in $trxFiles) {
              if ($trxFile.FullName -match "ubuntu") {
                  Copy-Item -Path $trxFile.FullName -Destination "${{ github.workspace }}/testresults/ubuntu-latest/" -Force
              } elseif ($trxFile.FullName -match "windows") {
                  Copy-Item -Path $trxFile.FullName -Destination "${{ github.workspace }}/testresults/windows-latest/" -Force
              } elseif ($trxFile.FullName -match "macos") {
                  Copy-Item -Path $trxFile.FullName -Destination "${{ github.workspace }}/testresults/macos-latest/" -Force
              }
          }

      - name: Generate test results summary
        if: steps.check_tests.outputs.tests_run == 'true'
        env:
          CI: false
        run: >
          ${{ github.workspace }}/dotnet.sh
          run
          --project ${{ github.workspace }}/tools/GenerateTestSummary/GenerateTestSummary.csproj
          --
          ${{ github.workspace }}/testresults
          --combined
