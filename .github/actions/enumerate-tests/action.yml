name: 'Enumerate test projects'
description: 'Enumerate list of test projects'
inputs:
  includeIntegrations:
    required: false
    type: boolean
    default: false
  includeTemplates:
    required: false
    type: boolean
    default: false

outputs:
  tests_matrix_requires_nugets:
    description: Combined tests matrix for tests that require nugets
    value: ${{ steps.generate_combined_matrix.outputs.tests_matrix_requires_nugets }}
  tests_matrix_no_nugets:
    description: Combined tests matrix for tests that do not require nugets
    value: ${{ steps.generate_combined_matrix.outputs.tests_matrix_no_nugets }}
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0
      with:
        global-json-file: ${{ github.workspace }}/global.json

    - name: Restore
      shell: bash
      run: ./restore.sh

    - name: Generate combined test matrix
      shell: bash
      run: >
        ./build.sh -test
        /p:TestRunnerName=TestEnumerationRunsheetBuilder
        /p:TestsListOutputPath=artifacts/TestsForGithubActions.list
        /p:TestMatrixOutputPath=artifacts/combined-test-matrix.json
        /p:BuildOs=${{ runner.os == 'Linux' && 'linux' || runner.os == 'macOS' && 'darwin' || 'windows' }}
        -p:GenerateCIPartitions=true
        -bl

    - name: Generate combined matrix outputs
      id: generate_combined_matrix
      shell: pwsh
      run: |
        $matrixFilePath = "${{ github.workspace }}/artifacts/combined-test-matrix.json"
        if (Test-Path $matrixFilePath) {
          $matrixContent = Get-Content -Raw $matrixFilePath | ConvertFrom-Json

          # Define defaults to apply when properties are missing
          $defaults = @{
            extraTestArgs = ''
            requiresNugets = 'false'
            requiresTestSdk = 'false'
            enablePlaywrightInstall = 'false'
            testSessionTimeout = '20m'
            testHangTimeout = '10m'
            supportedOSes = @('windows', 'linux', 'macos')
          }

          # Split tests based on requiresNugets property and expand by OS
          $testsRequiringNugets = @()
          $testsNotRequiringNugets = @()

          foreach ($test in $matrixContent.include) {
            # Apply defaults for missing properties
            foreach ($key in $defaults.Keys) {
              if ($key -ne 'supportedOSes' -and -not $test.PSObject.Properties.Name.Contains($key)) {
                $test | Add-Member -NotePropertyName $key -NotePropertyValue $defaults[$key] -Force
              }
            }

            # Get supported OSes (use test-specific if present, otherwise default)
            $supportedOSes = if ($test.PSObject.Properties.Name.Contains('supportedOSes')) {
              $test.supportedOSes
            } else {
              $defaults.supportedOSes
            }

            # Expand test entry for each supported OS
            foreach ($os in $supportedOSes) {
              # Create a new entry for each OS
              $testCopy = [PSCustomObject]@{}
              foreach ($prop in $test.PSObject.Properties) {
                if ($prop.Name -ne 'supportedOSes') {
                  $testCopy | Add-Member -NotePropertyName $prop.Name -NotePropertyValue $prop.Value -Force
                }
              }

              # Add OS runner mapping
              $osRunner = switch ($os) {
                'windows' { 'windows-latest' }
                'linux' { 'ubuntu-latest' }
                'macos' { 'macos-latest' }
                default { 'ubuntu-latest' }
              }
              $testCopy | Add-Member -NotePropertyName 'runs-on' -NotePropertyValue $osRunner -Force

              # Normalize boolean string values to ensure consistency
              if ($testCopy.PSObject.Properties.Name.Contains('requiresNugets')) {
                $testCopy.requiresNugets = ($testCopy.requiresNugets -eq 'true' -or $testCopy.requiresNugets -eq $true).ToString().ToLower()
              }
              if ($testCopy.PSObject.Properties.Name.Contains('requiresTestSdk')) {
                $testCopy.requiresTestSdk = ($testCopy.requiresTestSdk -eq 'true' -or $testCopy.requiresTestSdk -eq $true).ToString().ToLower()
              }
              if ($testCopy.PSObject.Properties.Name.Contains('enablePlaywrightInstall')) {
                $testCopy.enablePlaywrightInstall = ($testCopy.enablePlaywrightInstall -eq 'true' -or $testCopy.enablePlaywrightInstall -eq $true).ToString().ToLower()
              }

              # Add to appropriate list based on requiresNugets
              if ($testCopy.requiresNugets -eq 'true') {
                $testsRequiringNugets += $testCopy
              } else {
                $testsNotRequiringNugets += $testCopy
              }
            }
          }

          # Create matrices
          $nugetMatrix = @{ "include" = $testsRequiringNugets }
          $nonNugetMatrix = @{ "include" = $testsNotRequiringNugets }

          $nugetMatrixJson = ConvertTo-Json $nugetMatrix -Compress -Depth 10
          $nonNugetMatrixJson = ConvertTo-Json $nonNugetMatrix -Compress -Depth 10

          "tests_matrix_requires_nugets=$nugetMatrixJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "tests_matrix_no_nugets=$nonNugetMatrixJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          Write-Host "Combined test matrices generated successfully"
          Write-Host "Tests requiring nugets: $($testsRequiringNugets.Count)"
          Write-Host "Tests not requiring nugets: $($testsNotRequiringNugets.Count)"
        } else {
          # Empty matrices if no combined matrix found
          $emptyMatrix = '{"include":[]}'
          "tests_matrix_requires_nugets=$emptyMatrix" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "tests_matrix_no_nugets=$emptyMatrix" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "No combined test matrix found, using empty matrices"
        }

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
      with:
        name: logs-enumerate-tests-${{ runner.os }}
        path: |
          artifacts/log/**/*.binlog
          artifacts/**/*.list
          artifacts/combined-test-matrix.json
