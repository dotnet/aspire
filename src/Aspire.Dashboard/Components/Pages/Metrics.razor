@page "/metrics"
@page "/metrics/resource/{applicationName}"
@page "/metrics/resource/{applicationName}/meter/{meterName}"
@page "/metrics/resource/{applicationName}/meter/{meterName}/instrument/{instrumentName}"

@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Utils
@using Aspire.Dashboard.Components.Controls.Chart
@inject IStringLocalizer<Dashboard.Resources.Metrics> Loc
@inject IStringLocalizer<ControlsStrings> ControlsStringsLoc

<PageTitle><ApplicationName ResourceName="@nameof(Dashboard.Resources.Metrics.MetricsPageTitle)" Loc="@Loc" /></PageTitle>

<div class="page-content-container">
    <AspirePageContentLayout
        AddNewlineOnToolbar="true"
        @ref="_contentLayout"
        HeaderStyle="margin-bottom: calc(var(--design-unit) * 2px);">
        <PageTitleSection>
            <h1 class="page-header">@Loc[nameof(Dashboard.Resources.Metrics.MetricsHeader)]</h1>
        </PageTitleSection>
        <ToolbarSection>
            <ResourceSelect Resources="_applicationViewModels"
                            AriaLabel="@ControlsStringsLoc[nameof(ControlsStrings.SelectAnApplication)]"
                            @bind-SelectedResource="PageViewModel.SelectedApplication"
                            @bind-SelectedResource:after="HandleSelectedApplicationChangedAsync"/>

            @if (PageViewModel.SelectedDashpage is not null)
            {
                <div slot="end">
                <FluentMenuButton ButtonAppearance="Appearance.Stealth"
                                  Text="@(ControlsStringsLoc[PageViewModel.SelectedViewKind is MetricViewKind.Table ? nameof(ControlsStrings.ChartContainerTableTab) : nameof(ControlsStrings.ChartContainerGraphTab)])"
                                  OnMenuChanged="@HandleDashpageMetricViewKindChangedAsync"
                                  slot="end">
                    <FluentMenuItem Id="@MetricViewKind.Graph.ToString()">@ControlsStringsLoc[nameof(ControlsStrings.ChartContainerGraphTab)]</FluentMenuItem>
                    <FluentMenuItem Id="@MetricViewKind.Table.ToString()">@ControlsStringsLoc[nameof(ControlsStrings.ChartContainerTableTab)]</FluentMenuItem>
                </FluentMenuButton>
                </div>
            }

            <FluentIcon slot="end" Icon="Icons.Regular.Size20.Clock" Style="margin-right:5px;"/>
            <FluentSelect slot="end" TOption="SelectViewModel<TimeSpan>"
                          Items="@_durations"
                          OptionText="@(c => c.Name)"
                          @bind-SelectedOption="PageViewModel.SelectedDuration"
                          @bind-SelectedOption:after="HandleSelectedDurationChangedAsync"
                          AriaLabel="@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectADuration)]"/>
        </ToolbarSection>
        <MainSection>
            <div style="width: 100%; height: 100%; overflow: auto;">
                @if (PageViewModel.Instruments?.Count > 0)
                {
                    <FluentSplitter Style="height:100%" Panel1Size="2fr" Panel2Size="8fr" BarSize="5">
                        <Panel1>
                            <FluentTreeView Class="metrics-tree" @bind-CurrentSelected="PageViewModel.SelectedTreeItem" @bind-CurrentSelected:after="HandleSelectedTreeItemChangedAsync">
                                <ChildContent>
                                    @if (PageViewModel.Dashpages.Length is not 0)
                                    {
                                        var filteredDashpages = PageViewModel.Dashpages.Where(PageViewModel.IsDashpageAvailable).ToList();

                                        if (filteredDashpages.Count is not 0)
                                        {
                                            <FluentTreeItem Text="@Loc[Aspire.Dashboard.Resources.Metrics.DashpagesSectionName]" title="@Loc[Aspire.Dashboard.Resources.Metrics.DashpagesSectionName]" InitiallyExpanded="true">
                                                @foreach (DashpageDefinition dashpage in filteredDashpages)
                                                {
                                                    <FluentTreeItem @key="dashpage" Class="nested" Text="@dashpage.Name" Data="@dashpage" title="@dashpage.Name" InitiallySelected="@(dashpage.Name == PageViewModel.SelectedDashpage?.Name)"/>
                                                }
                                            </FluentTreeItem>
                                        }
                                    }
                                    @foreach ((var meter, var instruments) in PageViewModel.Instruments.GroupBy(i => i.Parent).OrderBy(g => g.Key.MeterName))
                                    {
                                        <FluentTreeItem @key="meter" Text="@meter.MeterName" Data="@meter" title="@meter.MeterName" InitiallyExpanded="true" InitiallySelected="@(PageViewModel.SelectedInstrument == null && meter.MeterName == PageViewModel.SelectedMeter?.MeterName)">
                                            @foreach (OtlpInstrument instrument in instruments.OrderBy(i => i.Name))
                                            {
                                                <FluentTreeItem @key="instrument" Class="nested" Text="@instrument.Name" Data="@instrument" title="@instrument.Name" InitiallySelected="@(instrument.Name == PageViewModel.SelectedInstrument?.Name && instrument.Parent.MeterName == PageViewModel.SelectedMeter?.MeterName)"/>
                                            }
                                        </FluentTreeItem>
                                    }
                                </ChildContent>
                            </FluentTreeView>
                        </Panel1>
                        <Panel2>
                            <div>
                                <div class="metrics-content">
                                    @if (PageViewModel.SelectedDashpage is not null && PageViewModel.SelectedApplication.Id is not null)
                                    {
                                        <DashpageCharts Applications="@_applications"
                                                        Instruments="@PageViewModel.Instruments"
                                                        SelectedApplication="@PageViewModel.SelectedApplication"
                                                        SelectedDuration="@PageViewModel.SelectedDuration"
                                                        SelectedDashpage="@PageViewModel.SelectedDashpage"
                                                        SelectedMeter="@PageViewModel.SelectedMeter"
                                                        SelectedViewKind="@PageViewModel.SelectedViewKind"
                                                        OnViewChangedAsync="@OnViewChangedAsync"/>
                                    }
                                    else if (PageViewModel.SelectedMeter is not null)
                                    {
                                        if (PageViewModel.SelectedApplication.Id?.InstanceId is not null && PageViewModel.SelectedInstrument is not null)
                                        {
                                            // We've got a selected instrument and application, so show the chart
                                            <ChartContainer
                                                ApplicationKey="@(PageViewModel.SelectedApplication.Id.GetApplicationKey())"
                                                MeterName="@(PageViewModel.SelectedMeter.MeterName)"
                                                InstrumentName="@(PageViewModel.SelectedInstrument.Name)"
                                                Duration="PageViewModel.SelectedDuration.Id"
                                                ActiveView="@(PageViewModel.SelectedViewKind ?? MetricViewKind.Graph)"
                                                OnViewChangedAsync="@OnViewChangedAsync"
                                                Applications="_applications" />
                                        }
                                        else
                                        {
                                            // Show a table of values for the selected meter
                                            <h3>@PageViewModel.SelectedMeter.MeterName</h3>
                                            <FluentDataGrid Style="max-width:1100px;" Items="@PageViewModel.Instruments.Where(i => i.Parent == PageViewModel.SelectedMeter).OrderBy(i => i.Name).AsQueryable()" GridTemplateColumns="3fr 5fr" TGridItem="OtlpInstrument">
                                                <ChildContent>
                                                    <TemplateColumn Title="@Loc[nameof(Dashboard.Resources.Metrics.MetricsInsturementNameGridNameColumnHeader)]">
                                                        <FluentAnchor Href="@DashboardUrls.MetricsUrl(resource: PageViewModel.SelectedApplication.Name, meter: context.Parent.MeterName, instrument: context.Name)" Appearance="Appearance.Lightweight">
                                                            @context.Name
                                                        </FluentAnchor>
                                                    </TemplateColumn>
                                                    <PropertyColumn Title="@Loc[nameof(Dashboard.Resources.Metrics.MetricsInsturementDescriptionGridNameColumnHeader)]" Property="@(c => c.Description)" Class="multiline-text"/>
                                                </ChildContent>
                                            </FluentDataGrid>
                                        }
                                    }
                                    else
                                    {
                                        <p>@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectInstrument)]</p>
                                    }
                                </div>
                            </div>
                        </Panel2>
                    </FluentSplitter>
                }
                else if (PageViewModel.Instruments == null)
                {
                    <div class="empty-content">
                        <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple"/>&nbsp;@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectAResource)]
                    </div>
                }
                else
                {
                    <div class="empty-content">
                        <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple"/>&nbsp;@Loc[nameof(Dashboard.Resources.Metrics.MetricsNoMetricsForResource)]
                    </div>
                }
            </div>
        </MainSection>
    </AspirePageContentLayout>
</div>
