@page "/Metrics"
@page "/Metrics/{applicationInstanceId}"
@page "/Metrics/{applicationInstanceId}/Meter/{meterName}"
@page "/Metrics/{applicationInstanceId}/Meter/{meterName}/Instrument/{instrumentName}"

@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Otlp.Model
@inject IStringLocalizer<Dashboard.Resources.Metrics> Loc
@inject IStringLocalizer<ControlsStrings> ControlsStringsLoc

<PageTitle><ApplicationName ResourceName="@nameof(Dashboard.Resources.Metrics.MetricsPageTitle)" Loc="@Loc" /></PageTitle>

<div class="metrics-layout">
    <h1 class="page-header">@Loc[nameof(Dashboard.Resources.Metrics.MetricsHeader)]</h1>
    <FluentToolbar Orientation="Orientation.Horizontal">
        <FluentSelect TOption="SelectViewModel<string>"
                      Items="@_applications"
                      OptionText="@(c => c.Name)"
                      @bind-SelectedOption="ViewModel.SelectedApplication"
                      @bind-SelectedOption:after="HandleSelectedApplicationChangedAsync"
                      AriaLabel="@ControlsStringsLoc[nameof(ControlsStrings.SelectAnApplication)]"/>
        <FluentIcon slot="end" Icon="Icons.Regular.Size20.Clock" Style="margin-right:5px;" />
        <FluentSelect slot="end" TOption="SelectViewModel<TimeSpan>"
                      Items="@_durations"
                      OptionText="@(c => c.Name)"
                      @bind-SelectedOption="ViewModel.SelectedDuration"
                      @bind-SelectedOption:after="HandleSelectedDurationChangedAsync"
                      AriaLabel="@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectADuration)]"/>
    </FluentToolbar>
    <div class="page-content-area">
        @if (ViewModel.Instruments?.Count > 0)
        {
            <FluentSplitter Style="height:100%" Panel1Size="2fr" Panel2Size="8fr" BarSize="5">
                <Panel1>
                    <FluentTreeView Class="metrics-tree" @bind-CurrentSelected="ViewModel.SelectedTreeItem" @bind-CurrentSelected:after="HandleSelectedTreeItemChangedAsync">
                        <ChildContent>
                            @foreach (var meterGroup in ViewModel.Instruments.GroupBy(i => i.Parent).OrderBy(g => g.Key.MeterName))
                            {
                                <FluentTreeItem @key="meterGroup.Key" Text="@meterGroup.Key.MeterName" Data="@meterGroup.Key" title="@meterGroup.Key.MeterName" InitiallyExpanded="true" InitiallySelected="@(ViewModel.SelectedInstrument == null && meterGroup.Key.MeterName == ViewModel.SelectedMeter?.MeterName)">
                                    @foreach (var instrument in meterGroup.OrderBy(i => i.Name))
                                    {
                                        <FluentTreeItem @key="instrument" Class="nested" Text="@instrument.Name" Data="@instrument" title="@instrument.Name" InitiallySelected="@(instrument.Name == ViewModel.SelectedInstrument?.Name && instrument.Parent.MeterName == ViewModel.SelectedMeter?.MeterName)" />
                                    }
                                </FluentTreeItem>
                            }
                        </ChildContent>
                    </FluentTreeView>
                </Panel1>
                <Panel2>
                    <div class="metrics-content">
                        @if (ViewModel.SelectedApplication.Id != null && ViewModel.SelectedMeter != null && ViewModel.SelectedInstrument != null)
                        {
                            <ChartContainer ApplicationId="@(ViewModel.SelectedApplication.Id)" MeterName="@(ViewModel.SelectedMeter.MeterName)" InstrumentName="@(ViewModel.SelectedInstrument.Name)" Duration="ViewModel.SelectedDuration.Id" />
                        }
                        else if (ViewModel.SelectedMeter != null)
                        {
                            <h3>@ViewModel.SelectedMeter.MeterName</h3>
                            <FluentDataGrid Style="max-width:1100px;" Items="@ViewModel.Instruments.Where(i => i.Parent == ViewModel.SelectedMeter).OrderBy(i => i.Name).AsQueryable()" GridTemplateColumns="3fr 5fr" TGridItem="OtlpInstrument">
                                <ChildContent>
                                    <TemplateColumn Title="@Loc[nameof(Dashboard.Resources.Metrics.MetricsInsturementNameGridNameColumnHeader)]">
                                        <FluentAnchor Href="@($"/Metrics/{ViewModel.SelectedApplication.Id}/Meter/{context.Parent.MeterName}/Instrument/{context.Name}")" Appearance="Appearance.Lightweight">
                                            @context.Name
                                        </FluentAnchor>
                                    </TemplateColumn>
                                    <PropertyColumn Title="@Loc[nameof(Dashboard.Resources.Metrics.MetricsInsturementDescriptionGridNameColumnHeader)]" Property="@(c => c.Description)" Class="multiline-text" />
                                </ChildContent>
                            </FluentDataGrid>
                        }
                        else
                        {
                            <p>@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectInstrument)]</p>
                        }
                    </div>
                </Panel2>
            </FluentSplitter>
        }
        else if (ViewModel.Instruments == null)
        {
            <div class="empty-content">
                <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple" />&nbsp;@Loc[nameof(Dashboard.Resources.Metrics.MetricsSelectAResource)]
            </div>
        }
        else
        {
            <div class="empty-content">
                <FluentIcon Icon="Icons.Regular.Size24.ChartMultiple" />&nbsp;@Loc[nameof(Dashboard.Resources.Metrics.MetricsNoMetricsForResource)]
            </div>
        }
    </div>
</div>
