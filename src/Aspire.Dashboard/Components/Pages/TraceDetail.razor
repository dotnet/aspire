@page "/Trace/{traceId}"

@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Otlp.Model
@using System.Globalization
@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Utils
@inject IStringLocalizer<Dashboard.Resources.TraceDetail> Loc
@inject IStringLocalizer<ControlsStrings> ControlStringsLoc

<PageTitle><ApplicationName ResourceName="@nameof(Dashboard.Resources.TraceDetail.TraceDetailPageTitle)" Loc="@Loc" /></PageTitle>

@if (_trace != null)
{
    <div class="trace-detail-layout">
        <div class="trace-detail-header page-header">
            <h1 style="display:inline-block">@GetResourceName(_trace.FirstSpan.Source): @_trace.FirstSpan.Name</h1>
            <span class="trace-id">@OtlpHelpers.ToShortenedId(_trace.TraceId)</span>
        </div>
        <FluentToolbar Orientation="Orientation.Horizontal">
            <div>
                @Loc[nameof(Dashboard.Resources.TraceDetail.TraceDetailTraceStartHeader)] <strong>@FormatHelpers.FormatDateTime(_trace.FirstSpan.StartTime, includeMilliseconds: true)</strong>
            </div>
            <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
            <div>
                @Loc[nameof(Dashboard.Resources.TraceDetail.TraceDetailDurationHeader)] <strong>@DurationFormatter.FormatDuration(_trace.Duration)</strong>
            </div>
            <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
            <div>
                @Loc[nameof(Dashboard.Resources.TraceDetail.TraceDetailResourcesHeader)] <strong>@_trace.Spans.GroupBy(s => s.Source).Count()</strong>
            </div>
            <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
            <div>
                @Loc[nameof(Dashboard.Resources.TraceDetail.TraceDetailDepthHeader)] <strong>@_maxDepth</strong>
            </div>
            <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
            <div>
                @Loc[nameof(Dashboard.Resources.TraceDetail.TraceDetailTotalSpansHeader)] <strong>@_trace.Spans.Count</strong>
            </div>
            <FluentAnchor slot="end" Appearance="Appearance.Lightweight" Href="@($"/StructuredLogs?traceId={_trace.TraceId}")">@ControlStringsLoc[nameof(ControlsStrings.ViewLogsLink)]</FluentAnchor>
        </FluentToolbar>

        <SummaryDetailsView ShowDetails="SelectedSpan is not null" OnDismiss="() => ClearSelectedSpan()" ViewKey="TraceDetail">
            <DetailsTitleTemplate>
                @{ var shortedSpanId = OtlpHelpers.ToShortenedId(SelectedSpan!.Span.SpanId); }
                <div class="span-details-title" title="@($"{SelectedSpan!.Title} ({shortedSpanId})")">
                    @SelectedSpan!.Title
                    <span class="span-id">@shortedSpanId</span>
                </div>
            </DetailsTitleTemplate>
            <Summary>
                <FluentDataGrid Class="trace-view-grid" ResizableColumns="true" ItemsProvider="@GetData" TGridItem="SpanWaterfallViewModel" RowClass="@GetRowClass" GridTemplateColumns="4fr 12fr 85px">
                    <TemplateColumn Title="Name">
                        <div class="col-long-content" title="@context.GetTooltip()" @onclick="() => OnShowProperties(context)">
                            @{
                                var isServerKind = context.Span.Kind == OtlpSpanKind.Server;
                                // Indent the span name based on the depth of the span.
                                var marginLeft = (context.Depth - 1) * 15;

                                // We want to have consistent margin for both client and server spans.
                                string spanNameContainerStyle;
                                if (!isServerKind)
                                {
                                    // Client span has 19px extra content:
                                    // - 5px extra margin-left
                                    // - 5px border
                                    // - 9px padding-left
                                    spanNameContainerStyle = $"margin-left: 5px; border-left-color: {ColorGenerator.Instance.GetColorHexByKey(GetResourceName(context.Span.Source))}; border-left-width: 5px; border-left-style: solid; padding-left: 9px;";
                                }
                                else
                                {
                                    // Server span has 19px extra content:
                                    // - 16px icon
                                    // - 3px padding-left
                                    spanNameContainerStyle = string.Empty;
                                }
                            }

                            <span style="margin-left: @(marginLeft)px;">
                                <span class="span-collapse-symbol" @onclick="() => OnToggleCollapse(context)" @onclick:stopPropagation="true">
                                    @if (context.Children.Count > 0)
                                    {
                                        @(context.IsCollapsed ? '+' : '-')
                                    }
                                </span>
                                <span class="span-name-container" style="@spanNameContainerStyle">
                                    @if (isServerKind)
                                    {
                                        <FluentIcon Class="server-request-icon"
                                                    Color="Color.Custom"
                                                    CustomColor="@ColorGenerator.Instance.GetColorHexByKey(GetResourceName(context.Span.Source))"
                                                    Icon="Icons.Filled.Size16.Server" />
                                    }

                                    @if (context.IsError)
                                    {
                                        <FluentIcon Icon="Icons.Filled.Size12.ErrorCircle" Color="Color.Error" Class="trace-tag-icon" />
                                    }
                                    @GetResourceName(context.Span.Source)
                                    @if (context.HasUninstrumentedPeer)
                                    {
                                        <span class="uninstrumented-peer">
                                            @{
                                                Icon icon;
                                                if (context.Span.Attributes.HasKey("db.system"))
                                                {
                                                    icon = new Icons.Filled.Size16.Database();
                                                }
                                                else
                                                {
                                                    // Everything else.
                                                    icon = new Icons.Filled.Size16.ArrowCircleRight();
                                                }
                                            }
                                            <FluentIcon
                                                Style="@($"fill: {ColorGenerator.Instance.GetColorHexByKey(context.UninstrumentedPeer)};")"
                                                Value="icon"
                                                Class="uninstrumented-peer-icon" />
                                            @context.UninstrumentedPeer
                                        </span>
                                    }
                                    <span class="span-row-name">@context.GetDisplaySummary()</span>
                                </span>
                            </span>
                        </div>
                    </TemplateColumn>
                    <TemplateColumn>
                        <HeaderCellItemTemplate>
                            <div class="ticks">
                                <div class="tick" style="grid-column: 1;"></div>
                                <span class="tick-label" style="grid-column: 1;">@DurationFormatter.FormatDuration(TimeSpan.Zero)</span>

                                <div class="tick" style="grid-column: 2;"></div>
                                <span class="tick-label" style="grid-column: 2;">@DurationFormatter.FormatDuration(_trace.Duration / 4)</span>

                                <div class="tick" style="grid-column: 3;"></div>
                                <span class="tick-label" style="grid-column: 3;">@DurationFormatter.FormatDuration(_trace.Duration / 4 * 2)</span>

                                <div class="tick" style="grid-column: 4;"></div>
                                <span class="tick-label" style="grid-column: 4;">@DurationFormatter.FormatDuration(_trace.Duration / 4 * 3)</span>

                                <span class="tick-label end-tick" style="grid-column: 4;">@DurationFormatter.FormatDuration(_trace.Duration)</span>
                                <div class="tick" style="grid-column: 5;"></div>
                            </div>
                        </HeaderCellItemTemplate>
                        <ChildContent>
                            <div class="ticks" @onclick="() => OnShowProperties(context)">
                                <div class="span-container" style="grid-template-columns: @context.LeftOffset.ToString("F2", CultureInfo.InvariantCulture)% @context.Width.ToString("F2", CultureInfo.InvariantCulture)% min-content;">
                                    <div class="span-bar" style="grid-column: 2; background: @ColorGenerator.Instance.GetColorHexByKey(GetResourceName(context.Span.Source));"></div>
                                    <div class="span-bar-label @(context.LabelIsRight ? "span-bar-label-right" : "span-bar-label-left")">
                                        <span class="span-bar-label-detail">@GetResourceName(context.Span.Source): @context.GetDisplaySummary()</span>
                                        <span>@DurationFormatter.FormatDuration(context.Span.Duration)</span>
                                    </div>
                                </div>
                                <div class="tick" style="grid-column: 1;"></div>
                                <div class="tick" style="grid-column: 2;"></div>
                                <div class="tick" style="grid-column: 3;"></div>
                                <div class="tick" style="grid-column: 4;"></div>
                                <div class="tick" style="grid-column: 5;"></div>
                            </div>
                        </ChildContent>
                    </TemplateColumn>
                    <TemplateColumn Title="@ControlStringsLoc[nameof(ControlsStrings.DetailsColumnHeader)]">
                        <FluentButton
                            Style="margin-left: 7px;"
                            Title="@ControlStringsLoc[nameof(ControlsStrings.ViewAction)]"
                            Appearance="Appearance.Lightweight" OnClick="() => OnShowProperties(context)">@ControlStringsLoc[nameof(ControlsStrings.ViewAction)]</FluentButton>
                    </TemplateColumn>
                </FluentDataGrid>
            </Summary>
            <Details>
                <SpanDetails ViewModel="SelectedSpan" />
            </Details>
        </SummaryDetailsView>
    </div>
}
else
{
    <div class="empty-content">
        <FluentIcon Icon="Icons.Regular.Size24.GanttChart" /> &nbsp; @Loc[nameof(Dashboard.Resources.TraceDetail.TraceDetailTraceNotFound)]
    </div>
}
