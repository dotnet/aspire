@page "/StructuredLogs/{applicationInstanceId?}"
@using Aspire.Dashboard.Components.Dialogs
@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Otlp.Storage
@using Microsoft.Extensions.Logging
@using System.Web
@inject NavigationManager NavigationManager
@inject IDashboardViewModelService DashboardViewModelService
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>@DashboardViewModelService.ApplicationName Structured Logs</PageTitle>

<div class="logs-layout">
    <h1>Structured Logs</h1>
    <FluentToolbar Orientation="Orientation.Horizontal">
        <FluentSelect TOption="SelectViewModel<string>"
                      Items="@_applications"
                      OptionText="@(c => c.Name)"
                      @bind-SelectedOption="_selectedApplication"
                      @bind-SelectedOption:after="HandleSelectedApplicationChangedAsync" />
        <FluentSearch @bind-Value="_filter"
                      @oninput="HandleFilter"
                      @bind-Value:after="HandleClear"
                      Placeholder="Filter..."
                      slot="end" />
        <FluentDivider slot="end" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
        <span slot="end">Level:</span>
        <FluentDivider slot="end" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
        <FluentSelect TOption="SelectViewModel<LogLevel?>"
                      Items="@_logLevels"
                      OptionText="@(c => c.Name)"
                      @bind-SelectedOption="_selectedLogLevel"
                      @bind-SelectedOption:after="HandleSelectedLogLevelChangedAsync"
                      Width="120px"
                      Style="min-width: auto;"
                      slot="end" />
        <FluentDivider slot="end" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
        <FluentLabel slot="end">Filters: </FluentLabel>
        @if (ViewModel.Filters.Count == 0)
        {
            <span slot="end">No Filters</span>
        }
        else
        {
            foreach (var filter in ViewModel.Filters)
            {
                <FluentButton slot="end" Appearance="Appearance.Outline" OnClick="() => OpenFilterAsync(filter)">@filter.FilterText</FluentButton>
                <FluentDivider slot="end" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
            }
        }
        <FluentButton slot="end" Appearance="Appearance.Stealth" aria-label="Add Filter" OnClick="() => OpenFilterAsync(null)"><FluentIcon Value="@(new Icons.Regular.Size16.Filter())" /></FluentButton>
    </FluentToolbar>
    <div class="datagrid-overflow-area continuous-scroll-overflow" tabindex="-1">
        <FluentDataGrid Virtualize="true" RowClass="@GetRowClass" GenerateHeader="GenerateHeaderOption.Sticky" ItemSize="46" ResizableColumns="true" ItemsProvider="@GetData" TGridItem="OtlpLogEntry" GridTemplateColumns="1fr 1fr 1fr 5fr 0.8fr 0.8fr">
            <ChildContent>
                <TemplateColumn Title="Service" Tooltip="true" TooltipText="(e) => e.Application.ApplicationName">
                    <span style="padding-left:5px; border-left-width: 5px; border-left-style: solid; border-left-color: @(ColorGenerator.Instance.GetColorHexByKey(context.Application.ApplicationName));">
                        @context.Application.ApplicationName
                    </span>
                </TemplateColumn>
                <TemplateColumn Title="Level">
                    @if (context.Severity is LogLevel.Error or LogLevel.Critical)
                    {
                        <FluentIcon Icon="Icons.Filled.Size16.ErrorCircle" Color="Color.Error" Class="logs-severity-icon" />
                    }
                    else if (context.Severity is LogLevel.Warning)
                    {
                        <FluentIcon Icon="Icons.Filled.Size16.Warning" Color="Color.Warning" Class="logs-severity-icon" />
                    }
                    @context.Severity
                </TemplateColumn>
                <PropertyColumn Title="Timestamp" Property="@(context => OtlpHelpers.FormatTimeStamp(context.TimeStamp))" Tooltip="true" />
                <TemplateColumn Title="Message" Tooltip="true" TooltipText="(e) => e.Message">
                    <FluentHighlighter HighlightedText="@(ViewModel.FilterText)" Text="@context.Message" />
                </TemplateColumn>
                <TemplateColumn Title="Trace">
                    @if (!string.IsNullOrEmpty(context.TraceId))
                    {
                        <a href="@($"/Trace/{HttpUtility.UrlEncode(context.TraceId)}")" class="long-inner-content">
                            @OtlpHelpers.ToShortenedId(context.TraceId)
                        </a>
                    }
                </TemplateColumn>
                <TemplateColumn Title="Details">
                    <FluentButton Appearance="Appearance.Lightweight" OnClick="() => OnShowProperties(context)">View</FluentButton>
                </TemplateColumn>
            </ChildContent>
            <EmptyContent>
                <FluentIcon Icon="Icons.Regular.Size24.SlideTextSparkle" />&nbsp;No structured logs found
            </EmptyContent>
        </FluentDataGrid>
    </div>
    <TotalItemsFooter @ref="_totalItemsFooter" />
</div>
