@page "/"
@using Aspire.Dashboard.Model;
@using Aspire.Dashboard.Services;
@implements IDisposable
@inherits ResourcesListBase<ProjectViewModel>

<PageTitle>@DashboardViewModelService.ApplicationName Projects</PageTitle>

<h1>Projects</h1>

<div>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentToolbar Orientation="Orientation.Horizontal">
            <FluentSearch Placeholder="Filter..."
                          Immediate="true"
                          @bind-Value="filter"
                          @oninput="HandleFilter"
                          AfterBindValue="HandleClear"
                          slot="end" />
        </FluentToolbar>
        <div class="datagrid-overflow-area" tabindex="-1">
            <FluentDataGrid Items="@FilteredResources" ResizableColumns="true" GridTemplateColumns="2fr 1fr 2fr 2fr 2fr 1fr 1fr">
                <ChildContent>
                    <TemplateColumn Title="Name" Sortable="true" SortBy="@nameSort">
                        <div class="col-long-content" title="@context.Name">
                            <FluentHighlighter HighlightedText="@filter" Text="@context.Name" />
                        </div>
                    </TemplateColumn>
                    <PropertyColumn Property="@(e => e.State)" Sortable="true" />
                    <PropertyColumn Property="@(c => c.CreationTimeStamp)" Title="Start Time" Sortable="true" />
                    <TemplateColumn Title="Source Location" Sortable="true" SortBy="@projectPathSort">
                        <div class="col-long-content" title="@context.ProjectPath">
                            <FluentHighlighter HighlightedText="@filter" Text="@context.ProjectPath" />
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Endpoints" Sortable="false">
                        <FluentStack Orientation="Orientation.Vertical">
                            @* If we have no endpoints, and the app isn't running anymore or we're not expecting any, then just say None *@
                            @if (context.Endpoints.Count == 0 && (context.State == FinishedState || context.ExpectedEndpointsCount == 0))
                            {
                                <span>None</span>
                            }
                            else
                            {
                                @* If we have any, regardless of the state, go ahead and display them *@
                                foreach (var endpoint in context.Endpoints.OrderBy(e => e))
                                {
                                    <a href="@endpoint" target="_blank">@endpoint</a>
                                }
                                @* If we're expecting more, say Starting..., unless the app isn't running anymore *@
                                if (context.State != FinishedState && context.ExpectedEndpointsCount > context.Endpoints.Count)
                                {
                                    <span>Starting...</span>
                                }
                            }
                        </FluentStack>
                    </TemplateColumn>
                    <TemplateColumn Title="Environment" Sortable="false">
                        <FluentButton Appearance="Appearance.Lightweight"
                                      Disabled="@(!context.Environment.Any())"
                                      Title="@(context.Environment.Any() ? "View" : "No Environment Variables")"
                                      OnClick="async() => await ShowEnvironmentVariables(context)">View</FluentButton>
                    </TemplateColumn>
                    <TemplateColumn Title="Logs">
                        <FluentAnchor Appearance="Appearance.Lightweight" Href="@($"/ProjectLogs/{context.Name}")">View</FluentAnchor>
                    </TemplateColumn>
                </ChildContent>
                <EmptyContent>
                    <FluentIcon Icon="Icons.Regular.Size24.AppGeneric" />&nbsp;No running projects found
                </EmptyContent>
            </FluentDataGrid>
        </div>
    </FluentStack>
</div>

@code
{
    // Ideally we'd be pulling this from Aspire.Hosting.Dcp.Model.ExecutableStates,
    // but unfortunately the reference goes the other way
    private const string FinishedState = "Finished";

    protected override Task<List<ProjectViewModel>> GetResources(IDashboardViewModelService dashboardViewModelService)
        => dashboardViewModelService.GetProjectsAsync();

    protected override IAsyncEnumerable<ResourceChanged<ProjectViewModel>> WatchResources(
    IDashboardViewModelService dashboardViewModelService,
        IEnumerable<NamespacedName> initialList,
        CancellationToken cancellationToken)
        => dashboardViewModelService.WatchProjectsAsync(initialList, cancellationToken);

    protected override bool Filter(ProjectViewModel resource)
        => resource.Name.Contains(filter, StringComparison.CurrentCultureIgnoreCase)
        || resource.ProjectPath.Contains(filter, StringComparison.CurrentCultureIgnoreCase);

    private GridSort<ProjectViewModel> projectPathSort = GridSort<ProjectViewModel>.ByAscending(p => p.ProjectPath);
}
