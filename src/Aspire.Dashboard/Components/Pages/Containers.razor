@page "/Containers"
@using Aspire.Dashboard.Model;
@using Aspire.Dashboard.Services;
@implements IDisposable
@inherits ResourcesListBase<ContainerViewModel>

<PageTitle>@DashboardViewModelService.ApplicationName Containers</PageTitle>

<div class="content-layout-with-toolbar">
    <FluentToolbar Orientation="Orientation.Horizontal">
        <h1 slot="label">Containers</h1>
        <FluentSearch Placeholder="Filter..."
                        Immediate="true"
                        @bind-Value="filter"
                        @oninput="HandleFilter"
                        AfterBindValue="HandleClear"
                        slot="end" />
    </FluentToolbar>
    <div class="datagrid-overflow-area" tabindex="-1">
        <FluentDataGrid Items="@FilteredResources" ResizableColumns="true" GridTemplateColumns="2fr 2fr 2fr 2fr 2fr 1fr 2fr 1fr 1fr">
            <ChildContent>
                <TemplateColumn Title="Name" Sortable="true" SortBy="@nameSort" Tooltip="true" TooltipText="(c) => c.Name">
                    <FluentHighlighter HighlightedText="@filter" Text="@context.Name" />
                </TemplateColumn>
                <TemplateColumn Title="Container ID">
                    <GridValue HighlightText="@filter" Value="@context.ContainerId" />
                </TemplateColumn>
                <TemplateColumn Title="State" Sortable="true" SortBy="@stateSort">
                    <div class="resource-state-container">
                        @context.State
                        <UnreadLogErrorsBadge UnviewedCount="@GetUnviewedErrorCount(context)" OnClick="@(() => ViewErrorStructuredLogs(context))" />
                    </div>
                </TemplateColumn>
                <PropertyColumn Property="@(c => c.CreationTimeStamp)" Title="Start Time" Sortable="true" Tooltip="true" />
                <TemplateColumn Title="Container Image" Sortable="true" SortBy="@imageSort" Tooltip="true" TooltipText="(c) => c.Image">
                    <FluentHighlighter HighlightedText="@filter" Text="@context.Image" />
                </TemplateColumn>
                <TemplateColumn Title="Ports" Sortable="false" Tooltip="true" TooltipText="@((c) => string.Join(";", c.Ports.Select(e => e.ToString())))">
                    <span>@string.Join(";", context.Ports.Select(e => e.ToString()))</span>
                </TemplateColumn>
                <TemplateColumn Title="Endpoints" Sortable="false">
                    <FluentStack Orientation="Orientation.Vertical">
                        @* If we have no endpoints, and the app isn't running anymore or we're not expecting any, then just say None *@
                        @if (context.Endpoints.Count == 0 && (context.State == FinishedState || context.ExpectedEndpointsCount == 0))
                        {
                            <span class="long-inner-content">None</span>
                        }
                        else
                        {
                            @* If we have any, regardless of the state, go ahead and display them *@
                            foreach (var endpoint in context.Endpoints.OrderBy(e => e))
                            {
                                <a href="@endpoint" target="_blank" class="long-inner-content">@endpoint</a>
                            }
                            @* If we're expecting more, say Starting..., unless the app isn't running anymore *@
                            if (context.State != FinishedState
                            && (context.ExpectedEndpointsCount is null || context.ExpectedEndpointsCount > context.Endpoints.Count))
                            {
                                <span class="long-inner-content">Starting...</span>
                            }
                        }
                    </FluentStack>
                </TemplateColumn>
                <TemplateColumn Title="Environment" Sortable="false">
                    <FluentButton Appearance="Appearance.Lightweight"
                                    Disabled="@(!context.Environment.Any())"
                                    Title="@(context.Environment.Any() ? "View" : "No Environment Variables")"
                                    OnClick="async() => await ShowEnvironmentVariables(context)">View</FluentButton>
                </TemplateColumn>
                <TemplateColumn Title="Logs">
                    <FluentAnchor Appearance="Appearance.Lightweight" Href="@($"/containerLogs/{context.Name}")">View</FluentAnchor>
                </TemplateColumn>
            </ChildContent>
            <EmptyContent>
                    <FluentIcon Icon="Icons.Regular.Size24.BinFull" />&nbsp;No running containers found
            </EmptyContent>
        </FluentDataGrid>
    </div>
</div>

@code {
    protected override ViewModelMonitor<ContainerViewModel> GetViewModelMonitor(IDashboardViewModelService dashboardViewModelService)
        => dashboardViewModelService.GetContainers();

    protected override bool Filter(ContainerViewModel resource)
        => resource.Name.Contains(filter, StringComparison.CurrentCultureIgnoreCase)
        || resource.Image.Contains(filter, StringComparison.CurrentCultureIgnoreCase);

    private GridSort<ContainerViewModel> imageSort = GridSort<ContainerViewModel>.ByAscending(c => c.Image);

    protected override bool ShowSpecOnlyToggle => false;
}
