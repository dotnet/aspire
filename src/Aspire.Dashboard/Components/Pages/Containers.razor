@page "/Containers"
@using Aspire.Dashboard.Model;
@using Aspire.Dashboard.Services;
@inject IDashboardViewModelService DashboardViewModelService
@inject EnvironmentVariablesDialogService DialogService
@implements IDisposable

<PageTitle>Microsoft.Aspire Dashboard</PageTitle>

<h1>Containers</h1>

<div>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentToolbar Orientation="Orientation.Horizontal">
            <FluentSearch Placeholder="Filter..."
                          Immediate="true"
                          @bind-Value="filter"
                          @oninput="HandleFilter"
                          AfterBindValue="HandleClear"
                          slot="end" />
        </FluentToolbar>
        <div class="datagrid-overflow-area" tabindex="-1">
            <FluentDataGrid Items="@FilteredContainers" ResizableColumns="true" GridTemplateColumns="2fr 1fr 2fr 3fr 1fr 1fr 1fr">
                <ChildContent>
                    <TemplateColumn Title="Name" Sortable="true" SortBy="@nameSort">
                        <FluentHighlighter HighlightedText="@filter" Text="@context.Name" />
                    </TemplateColumn>
                    <PropertyColumn Property="@(e => e.State)" Sortable="true" />
                    <PropertyColumn Property="@(c => c.CreationTimeStamp)" Title="Start Time" Sortable="true" />
                    <TemplateColumn Title="Container Image" Sortable="true" SortBy="@imageSort">
                        <FluentHighlighter HighlightedText="@filter" Text="@context.Image" />
                    </TemplateColumn>
                    <TemplateColumn Title="Ports" Sortable="false">
                        <span>@string.Join(";", context.Ports.Select(e => e.ToString()))</span>
                    </TemplateColumn>
                    <TemplateColumn Title="Environment" Sortable="false">
                        <FluentButton Appearance="Appearance.Lightweight"
                                      Disabled="@(!context.Environment.Any())"
                                      Title="@(context.Environment.Any() ? "View" : "No Environment Variables")"
                                      OnClick="async() => await ShowEnvironmentVariables(context)">View</FluentButton>
                    </TemplateColumn>
                    <TemplateColumn Title="Logs">
                        <FluentAnchor Appearance="Appearance.Lightweight" Href="@($"/containerLogs/{context.ContainerId}")">View</FluentAnchor>
                    </TemplateColumn>
                </ChildContent>
                <EmptyContent>
                    <FluentIcon Icon="Icons.Regular.Size24.BinFull" />&nbsp;No running containers found
                </EmptyContent>
            </FluentDataGrid>
        </div>
    </FluentStack>
</div>

@code {
    private readonly Dictionary<string, ContainerViewModel> containersMap = new();
    private readonly CancellationTokenSource watchTaskCancellationTokenSource = new();
    private string filter = "";

    private IQueryable<ContainerViewModel>? FilteredContainers =>
        containersMap.Values.Where(c =>
            c.Name.Contains(filter, StringComparison.CurrentCultureIgnoreCase) ||
            c.Image.Contains(filter, StringComparison.CurrentCultureIgnoreCase)
        ).OrderBy(e => e.Name).AsQueryable();

    private GridSort<ContainerViewModel> nameSort = GridSort<ContainerViewModel>
        .ByAscending(c => c.Name);
    private GridSort<ContainerViewModel> imageSort = GridSort<ContainerViewModel>
        .ByAscending(c => c.Image);


    protected override Task OnInitializedAsync()
    {
        _ = Task.Run(async () =>
        {
            await foreach (var componentChanged in DashboardViewModelService.WatchContainersAsync(cancellationToken: watchTaskCancellationTokenSource.Token))
            {
                await OnContainerListChanged(componentChanged.ObjectChangeType, componentChanged.Component).ConfigureAwait(true);
            }
        }).ConfigureAwait(true);

        return Task.CompletedTask;
    }

    private async Task ShowEnvironmentVariables(ContainerViewModel container)
    {
        await DialogService.ShowDialogAsync(
            source: container.Name,
            variables: container.Environment
        );
    }

    private async Task OnContainerListChanged(ObjectChangeType objectChangeType, ContainerViewModel containerViewModel)
    {
        switch (objectChangeType)
        {
            case ObjectChangeType.Added:
                containersMap.Add(containerViewModel.Name, containerViewModel);
                break;

            case ObjectChangeType.Modified:
                containersMap[containerViewModel.Name] = containerViewModel;
                break;

            case ObjectChangeType.Deleted:
                containersMap.Remove(containerViewModel.Name);
                break;
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        watchTaskCancellationTokenSource.Cancel();
        watchTaskCancellationTokenSource.Dispose();
    }

    private void HandleFilter(ChangeEventArgs args)
    {
        if (args.Value is string newFilter)
        {
            filter = newFilter;
        }
    }

    private void HandleClear(string? value)
    {
        filter = value ?? string.Empty;
    }
}
