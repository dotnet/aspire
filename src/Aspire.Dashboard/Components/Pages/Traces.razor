@page "/Traces/{applicationInstanceId?}"

@using Aspire.Dashboard.Components.Dialogs
@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Otlp.Storage
@using Microsoft.Fast.Components.FluentUI
@using System.Web
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IDisposable

<h1>Traces</h1>

<div>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentToolbar Orientation="Orientation.Horizontal">
            <FluentSelect TOption="ApplicationViewModel"
                          Items="@_applications"
                          OptionValue="@(c => c.Id)"
                          OptionText="@(c => c.Name)"
                          @bind-SelectedOption="_selectedApplication"
                          @bind-SelectedOption:after="HandleSelectedApplicationChangedAsync" />
            <FluentSearch @bind-Value="_filter"
                          @oninput="HandleFilter"
                          AfterBindValue="HandleClear"
                          Placeholder="Filter..."
                          slot="end" />
        </FluentToolbar>
        <div class="datagrid-overflow-area continuous-scroll-overflow" tabindex="-1">
            <FluentDataGrid Class="SemanticLogsDataGrid" Virtualize="true" RowStyle="@GetRowStyle" GenerateHeader="GenerateHeaderOption.Sticky" ItemSize="48" ResizableColumns="true" ItemsProvider="@GetData" TGridItem="OtlpTrace" GridTemplateColumns="0.8fr 2fr 3fr 0.5fr 0.5fr">
                <ChildContent>
                    <PropertyColumn Title="Timestamp" Property="@(context => OtlpHelpers.FormatTimeStamp(context.FirstSpan.StartTime))" />
                    <TemplateColumn Title="Name">
                        <div class="col-long-content" title="@($"{context.FullName}: {OtlpHelpers.ToShortenedId(context.TraceId)}")">
                            <span><FluentHighlighter HighlightedText="@(ViewModel.FilterText)" Text="@(context.FullName)" /></span>
                            <span class="trace-id">@OtlpHelpers.ToShortenedId(context.TraceId)</span>
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Spans">
                        <FluentOverflow>
                            <ChildContent>
                                @foreach (var item in context.Spans.GroupBy(s => s.Source).OrderBy(g => g.Key.ApplicationName))
                                {
                                    <FluentOverflowItem>
                                        <span class="trace-tag trace-service-tag" style="border-left-color: @(ColorGenerator.Instance.GetColorHexByKey(item.Key.ApplicationName));">
                                            @if (item.Any(s => s.Status == OtlpSpanStatusCode.Error))
                                            {
                                                <FluentIcon Icon="Icons.Filled.Size12.ErrorCircle" Color="Color.Error" Class="trace-tag-icon" />
                                            }
                                            @item.Key.ApplicationName (@item.Count())
                                        </span>
                                    </FluentOverflowItem>
                                }
                            </ChildContent>
                            <MoreButtonTemplate Context="another_name">
                                <span class="trace-tag">
                                    @($"+{another_name.ItemsOverflow.Count()}")
                                </span>
                            </MoreButtonTemplate>
                        </FluentOverflow>
                    </TemplateColumn>
                    <PropertyColumn Title="Duration" Property="@(context => DurationFormatter.FormatDuration(context.Duration))" />
                    <TemplateColumn>
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="() => SelectTraceAsync(context)">View</FluentButton>
                    </TemplateColumn>
                </ChildContent>
                <EmptyContent>
                    <FluentIcon Icon="Icons.Regular.Size24.GanttChart" />&nbsp;No traces found
                </EmptyContent>
            </FluentDataGrid>
        </div>
        <TotalItemsFooter @ref="_totalItemsFooter" />
    </FluentStack>
</div>

@code {
    private static readonly ApplicationViewModel AllApplication = new ApplicationViewModel { Id = null, Name = "(All)" };

    private TotalItemsFooter _totalItemsFooter = default!;
    private List<ApplicationViewModel> _applications = default!;
    private ApplicationViewModel _selectedApplication = AllApplication;
    private Subscription? _applicationsSubscription;
    private Subscription? _tracesSubscription;
    private bool _applicationChanged;
    private CancellationTokenSource? _filterCts;
    private string _filter = string.Empty;

    [Parameter]
    public string? ApplicationInstanceId { get; set; }

    [Inject]
    public required TelemetryRepository TelemetryRepository { get; set; }

    [Inject]
    public required TracesViewModel ViewModel { get; set; }

    [Inject]
    public required IDialogService DialogService { get; set; }

    private string GetRowStyle(OtlpTrace trace)
    {
        var percentage = 0.0;
        if (ViewModel.MaxDuration != TimeSpan.Zero)
        {
            percentage = trace.Duration / ViewModel.MaxDuration * 100.0;
        }

        return $"background: linear-gradient(to right, var(--duration-color) {percentage.ToString("0.##")}%, transparent {percentage.ToString("0.##")}%);";
    }

    private ValueTask<GridItemsProviderResult<OtlpTrace>> GetData(GridItemsProviderRequest<OtlpTrace> request)
    {
        ViewModel.StartIndex = request.StartIndex;
        ViewModel.Count = request.Count;

        var traces = ViewModel.GetTraces();

        // Updating the total item count as a field doesn't work because it isn't updated with the grid.
        // The workaround is to put the count inside a control and explicitly update and refresh the control.
        _totalItemsFooter.SetTotalItemCount(traces.TotalItemCount);

        return ValueTask.FromResult(GridItemsProviderResult.From(traces.Items, traces.TotalItemCount));
    }

    protected override Task OnInitializedAsync()
    {
        UpdateApplications();
        _applicationsSubscription = TelemetryRepository.OnNewApplications(() => InvokeAsync(() =>
        {
            UpdateApplications();
            StateHasChanged();
        }));

        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        _selectedApplication = _applications.SingleOrDefault(e => e.Id == ApplicationInstanceId) ?? AllApplication;
        ViewModel.ApplicationServiceId = _selectedApplication.Id;
        UpdateSubscription();
    }

    private void UpdateApplications()
    {
        _applications = TelemetryRepository.GetApplications().Select(a => new ApplicationViewModel { Id = a.InstanceId, Name = a.ApplicationName }).ToList();
        _applications.Insert(0, AllApplication);
        UpdateSubscription();
    }

    private Task HandleSelectedApplicationChangedAsync()
    {
        NavigationManager.NavigateTo($"/Traces/{_selectedApplication.Id}");
        _applicationChanged = true;

        return Task.CompletedTask;
    }

    private void UpdateSubscription()
    {
        // Subscribe to updates.
        if (_tracesSubscription is null || _tracesSubscription.ApplicationId != _selectedApplication.Id)
        {
            _tracesSubscription?.Dispose();
            _tracesSubscription = TelemetryRepository.OnNewTraces(_selectedApplication.Id, async () =>
            {
                ViewModel.ClearData();
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private Task SelectTraceAsync(OtlpTrace trace)
    {
        NavigationManager.NavigateTo($"/Trace/{trace.TraceId}");
        return Task.CompletedTask;
    }

    private void HandleFilter(ChangeEventArgs args)
    {
        if (args.Value is string newFilter)
        {
            _filter = newFilter;
            _filterCts?.Cancel();

            // Debouncing logic. Apply the filter after a delay.
            var cts = _filterCts = new CancellationTokenSource();
            _ = Task.Run(async () =>
            {
                await Task.Delay(400, cts.Token);
                ViewModel.FilterText = newFilter ?? string.Empty;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void HandleClear(string value)
    {
        _filterCts?.Cancel();
        ViewModel.FilterText = string.Empty;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_applicationChanged)
        {
            await JS.InvokeVoidAsync("resetContinuousScrollPosition");
            _applicationChanged = false;
        }
        await JS.InvokeVoidAsync("initializeContinuousScroll");
    }

    public void Dispose()
    {
        _applicationsSubscription?.Dispose();
        _tracesSubscription?.Dispose();
    }
}
