@page "/Executables"
@using Aspire.Dashboard.Model;
@using Aspire.Dashboard.Services;
@implements IDisposable
@inherits ResourcesListBase<ExecutableViewModel>

<PageTitle>@DashboardViewModelService.ApplicationName Executables</PageTitle>

<div class="content-layout-with-toolbar">
    <FluentToolbar Orientation="Orientation.Horizontal">
        <h1 slot="label">Executables</h1>
        <FluentSearch Placeholder="Filter..."
                        Immediate="true"
                        @bind-Value="filter"
                        @oninput="HandleFilter"
                        AfterBindValue="HandleClear"
                        slot="end" />
    </FluentToolbar>
    <div class="datagrid-overflow-area" tabindex="-1">
        <FluentDataGrid Items="@FilteredResources" ResizableColumns="true" GridTemplateColumns="2fr 1fr 2fr 1fr 4fr 4fr 4fr 2fr 1fr 1fr">
            <ChildContent>
                <TemplateColumn Title="Name" Sortable="true" SortBy="@nameSort" Tooltip="true" TooltipText="(e) => e.Name" Class="data-grid-cell">
                    <FluentHighlighter HighlightedText="@filter" Text="@context.Name" />
                </TemplateColumn>
                <PropertyColumn Property="@(e => e.State)" Sortable="true" Tooltip="true" Class="data-grid-cell" />
                <PropertyColumn Property="@(c => c.CreationTimeStamp)" Title="Start Time" Sortable="true" Tooltip="true" Class="data-grid-cell" />
                <PropertyColumn Property="@(c => c.ProcessId)" Title="Process Id" Sortable="true" Tooltip="true" Class="data-grid-cell" />
                <TemplateColumn Title="Path" Sortable="true" SortBy="@executablePathSort" Tooltip="true" TooltipText="(e) => e.ExecutablePath" Class="data-grid-cell">
                    <FluentHighlighter HighlightedText="@filter" Text="@context.ExecutablePath" />
                </TemplateColumn>
                <TemplateColumn Title="Working Directory" Sortable="true" SortBy="@workingDirectorySort" Tooltip="true" TooltipText="(e) => e.WorkingDirectory" Class="data-grid-cell">
                    <FluentHighlighter HighlightedText="@filter" Text="@context.WorkingDirectory" />
                </TemplateColumn>
                <TemplateColumn Title="Arguments" Tooltip="true" TooltipText="@((e) => e.Arguments != null ? string.Join(" ", e.Arguments) : string.Empty)" Class="data-grid-cell">
                    <FluentHighlighter HighlightedText="@filter" Text="@(context.Arguments != null ? string.Join(" ", context.Arguments) : string.Empty)" />
                </TemplateColumn>
                <TemplateColumn Title="Endpoints" Sortable="false" Class="data-grid-cell">
                    <FluentStack Orientation="Orientation.Vertical">
                        @* If we have no endpoints, and the app isn't running anymore or we're not expecting any, then just say None *@
                        @if (context.Endpoints.Count == 0 && (context.State == FinishedState || context.ExpectedEndpointsCount == 0))
                        {
                            <span>None</span>
                        }
                        else
                        {
                            @* If we have any, regardless of the state, go ahead and display them *@
                            foreach (var endpoint in context.Endpoints.OrderBy(e => e))
                            {
                                <a href="@endpoint" target="_blank">@endpoint</a>
                            }
                            @* If we're expecting more, say Starting..., unless the app isn't running anymore *@
                            if (context.State != FinishedState
                            && (context.ExpectedEndpointsCount is null || context.ExpectedEndpointsCount > context.Endpoints.Count))
                            {
                                <span>Starting...</span>
                            }
                        }
                    </FluentStack>
                </TemplateColumn>
                <TemplateColumn Title="Environment" Sortable="false" Class="data-grid-cell">
                    <FluentButton Appearance="Appearance.Lightweight"
                                    Disabled="@(!context.Environment.Any())"
                                    Title="@(context.Environment.Any() ? "View" : "No Environment Variables")"
                                    OnClick="async() => await ShowEnvironmentVariables(context)">View</FluentButton>
                </TemplateColumn>
                <TemplateColumn Title="Logs" Class="data-grid-cell">
                    <FluentAnchor Appearance="Appearance.Lightweight" Href="@($"/ExecutableLogs/{context.Name}")">View</FluentAnchor>
                </TemplateColumn>
            </ChildContent>
            <EmptyContent>
                <FluentIcon Icon="Icons.Regular.Size24.AppGeneric" />&nbsp;No running executables found
            </EmptyContent>
        </FluentDataGrid>
    </div>
</div>

@code {
    protected override ValueTask<List<ExecutableViewModel>> GetResources(IDashboardViewModelService dashboardViewModelService)
        => dashboardViewModelService.GetExecutablesAsync();

    protected override IAsyncEnumerable<ResourceChanged<ExecutableViewModel>> WatchResources(
        IDashboardViewModelService dashboardViewModelService,
        IEnumerable<NamespacedName> initialList,
        CancellationToken cancellationToken)
        => dashboardViewModelService.WatchExecutablesAsync(initialList, cancellationToken);

    protected override bool Filter(ExecutableViewModel resource)
        => resource.Name.Contains(filter, StringComparison.CurrentCultureIgnoreCase)
        || resource.ExecutablePath?.Contains(filter, StringComparison.CurrentCultureIgnoreCase) == true
        || resource.WorkingDirectory?.Contains(filter, StringComparison.CurrentCultureIgnoreCase) == true
        || resource.Arguments?.Any(e => e.Contains(filter, StringComparison.CurrentCultureIgnoreCase)) == true;

    private GridSort<ExecutableViewModel> executablePathSort = GridSort<ExecutableViewModel>.ByAscending(e => e.ExecutablePath);

    private GridSort<ExecutableViewModel> workingDirectorySort = GridSort<ExecutableViewModel>.ByAscending(e => e.WorkingDirectory);
}
