@page "/Executables"
@using Aspire.Dashboard.Model;
@using Aspire.Dashboard.Services;
@implements IDisposable
@inherits ResourcesListBase<ExecutableViewModel>

<PageTitle>@DashboardViewModelService.ApplicationName Executables</PageTitle>

<h1>Executables</h1>

<div>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentToolbar Orientation="Orientation.Horizontal">
            <FluentSearch Placeholder="Filter..."
                          Immediate="true"
                          @bind-Value="filter"
                          @oninput="HandleFilter"
                          AfterBindValue="HandleClear"
                          slot="end" />
        </FluentToolbar>
        <div class="datagrid-overflow-area" tabindex="-1">
            <FluentDataGrid Items="@FilteredResources" ResizableColumns="true" GridTemplateColumns="2fr 1fr 2fr 4fr 4fr 4fr 1fr">
                <ChildContent>
                    <TemplateColumn Title="Name" Sortable="true" SortBy="@nameSort">
                        <FluentHighlighter HighlightedText="@filter" Text="@context.Name" />
                    </TemplateColumn>
                    <PropertyColumn Property="@(e => e.State)" Sortable="true" />
                    <PropertyColumn Property="@(c => c.CreationTimeStamp)" Title="Start Time" Sortable="true" />
                    <TemplateColumn Title="Path" Sortable="true" SortBy="@executablePathSort">
                        <div class="col-long-content" title="@context.ExecutablePath">
                            <FluentHighlighter HighlightedText="@filter" Text="@context.ExecutablePath" />
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Working Directory" Sortable="true" SortBy="@workingDirectorySort">
                        <div class="col-long-content" title="@context.WorkingDirectory">
                            <FluentHighlighter HighlightedText="@filter" Text="@context.WorkingDirectory" />
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Arguments">
                        <div class="col-long-content" title="@(context.Arguments != null ? string.Join(" ", context.Arguments) : string.Empty)">
                            <FluentHighlighter HighlightedText="@filter" Text="@(context.Arguments != null ? string.Join(" ", context.Arguments) : string.Empty)" />
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Environment" Sortable="false">
                        <FluentButton Appearance="Appearance.Lightweight"
                                      Disabled="@(!context.Environment.Any())"
                                      Title="@(context.Environment.Any() ? "View" : "No Environment Variables")"
                                      OnClick="async() => await ShowEnvironmentVariables(context)">View</FluentButton>
                    </TemplateColumn>
                    <TemplateColumn Title="Logs">
                        <FluentAnchor Appearance="Appearance.Lightweight" Href="@($"/ExecutableLogs/{context.Name}")">View</FluentAnchor>
                    </TemplateColumn>
                </ChildContent>
                <EmptyContent>
                    <FluentIcon Icon="Icons.Regular.Size24.AppGeneric" />&nbsp;No running executables found
                </EmptyContent>
            </FluentDataGrid>
        </div>
    </FluentStack>
</div>

@code {
    protected override Task<List<ExecutableViewModel>> GetResources(IDashboardViewModelService dashboardViewModelService)
        => dashboardViewModelService.GetExecutablesAsync();

    protected override IAsyncEnumerable<ResourceChanged<ExecutableViewModel>> WatchResources(
        IDashboardViewModelService dashboardViewModelService,
        IEnumerable<NamespacedName> initialList,
        CancellationToken cancellationToken)
        => dashboardViewModelService.WatchExecutablesAsync(initialList, cancellationToken);

    protected override bool Filter(ExecutableViewModel resource)
        => resource.Name.Contains(filter, StringComparison.CurrentCultureIgnoreCase)
        || resource.ExecutablePath?.Contains(filter, StringComparison.CurrentCultureIgnoreCase) == true
        || resource.WorkingDirectory?.Contains(filter, StringComparison.CurrentCultureIgnoreCase) == true
        || resource.Arguments?.Any(e => e.Contains(filter, StringComparison.CurrentCultureIgnoreCase)) == true;

    private GridSort<ExecutableViewModel> executablePathSort = GridSort<ExecutableViewModel>.ByAscending(e => e.ExecutablePath);

    private GridSort<ExecutableViewModel> workingDirectorySort = GridSort<ExecutableViewModel>.ByAscending(e => e.WorkingDirectory);
}
