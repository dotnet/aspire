@page "/SemanticLogs/{applicationInstanceId?}"
@using Aspire.Dashboard.Components.Dialogs
@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Otlp.Storage
@using Microsoft.Fast.Components.FluentUI
@using System.Web
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IDisposable

<h1>Semantic Logs</h1>
<div>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentToolbar Orientation="Orientation.Horizontal">
            <FluentSelect TOption="ApplicationViewModel"
                          Items="@_applications"
                          OptionValue="@(c => c.Id)"
                          OptionText="@(c => c.Name)"
                          @bind-SelectedOption="_selectedApplication"
                          @bind-SelectedOption:after="HandleSelectedApplicationChangedAsync" />
            <FluentLabel slot="end">Filters: </FluentLabel>
            @if (_logFilters.Count == 0)
            {
                <span slot="end">No Filters</span>
            }
            else
            {
                foreach (var filter in _logFilters)
                {
                    <FluentButton slot="end" Appearance="Appearance.Outline" OnClick="() => OpenFilterAsync(filter)">@filter.FilterText</FluentButton>
                }
            }
            <FluentButton slot="end" Appearance="Appearance.Stealth" aria-label="Add Filter" OnClick="() => OpenFilterAsync(null)"><FluentIcon Value="@(new Icons.Regular.Size16.Filter())" /></FluentButton>
        </FluentToolbar>
        <div class="datagrid-overflow-area continuous-scroll-overflow" tabindex="-1">
            <FluentDataGrid Class="SemanticLogsDataGrid" Virtualize="true" GenerateHeader="GenerateHeaderOption.Sticky" ItemSize="48" ResizableColumns="true" ItemsProvider="@GetData" TGridItem="OtlpLogEntry" GridTemplateColumns="1fr 1fr 1fr 5fr 0.8fr 0.8fr">
                <ChildContent>
                    <TemplateColumn Title="Service">
                        <span style="padding-left:5px; border-left-width: 5px; border-left-style: solid; border-left-color: @(ColorGenerator.Instance.GetColorHexByKey(context.Application.ApplicationName));">
                            @context.Application.ApplicationName
                        </span>
                    </TemplateColumn>
                    <PropertyColumn Title="Severity" Property="@(context => context.Severity)" />
                    <PropertyColumn Title="Timestamp" Property="@(context => OtlpHelpers.FormatTimeStamp(context.TimeStamp))" />
                    <PropertyColumn Title="Message" Tooltip=true Property="@(context => context.Message)" />
                    <TemplateColumn Title="Trace">
                        @if (!string.IsNullOrEmpty(context.TraceId))
                        {
                            <FluentAnchor Appearance="Appearance.Hypertext" Href="@($"/Traces/Trace/{HttpUtility.UrlEncode(context.TraceId)}")">
                                @OtlpHelpers.ToShortenedId(context.TraceId)
                            </FluentAnchor>
                        }
                    </TemplateColumn>
                    <TemplateColumn>
                        <FluentButton Appearance="Appearance.Lightweight" OnClick="() => OnShowProperties(context)">View</FluentButton>
                    </TemplateColumn>
                </ChildContent>
                <EmptyContent>
                    <FluentIcon Icon="Icons.Regular.Size24.SlideTextSparkle" />&nbsp;No semantic logs found
                </EmptyContent>
            </FluentDataGrid>
        </div>
        <TotalItemsFooter @ref="totalItemsFooter" />
    </FluentStack>
</div>

@code {
    private static readonly ApplicationViewModel AllApplication = new ApplicationViewModel { Id = null, Name = "(All)" };

    private readonly List<LogFilter> _logFilters = new();
    private TotalItemsFooter totalItemsFooter = default!;
    private List<ApplicationViewModel>? _applications;
    private ApplicationViewModel _selectedApplication = AllApplication;
    private Subscription? _applicationsSubscription;
    private Subscription? _logsSubscription;
    private int _totalItemCount;
    private bool _applicationChanged;

    [Parameter]
    public string? ApplicationInstanceId { get; set; }

    [Inject]
    public required TelemetryRepository TelemetryRepository { get; set; }

    [Inject]
    public required IDialogService DialogService { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? TraceId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? SpanId { get; set; }

    private ValueTask<GridItemsProviderResult<OtlpLogEntry>> GetData(GridItemsProviderRequest<OtlpLogEntry> request)
    {
        var logs = TelemetryRepository.GetLogs(new GetLogsContext
            {
                ApplicationServiceId = _selectedApplication.Id,
                StartIndex = request.StartIndex,
                Count = request.Count,
                Filters = _logFilters
            });

        // Updating the total item count as a field doesn't work because it isn't updated with the grid.
        // The workaround is to put the count inside a control and explicitly update and refresh the control.
        totalItemsFooter.SetTotalItemCount(logs.TotalItemCount);

        return ValueTask.FromResult(new GridItemsProviderResult<OtlpLogEntry>
            {
                Items = logs.Items,
                TotalItemCount = _totalItemCount = logs.TotalItemCount
            });
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(TraceId))
        {
            _logFilters.Add(new LogFilter { Field = "TraceId", Condition = FilterCondition.Equals, Value = TraceId });
        }
        if (!string.IsNullOrEmpty(SpanId))
        {
            _logFilters.Add(new LogFilter { Field = "SpanId", Condition = FilterCondition.Equals, Value = SpanId });
        }

        await UpdateApplicationsAsync();
        _applicationsSubscription = TelemetryRepository.OnNewApplications(() => InvokeAsync(async () =>
        {
            await UpdateApplicationsAsync();
            StateHasChanged();
        }));
    }

    private Task UpdateApplicationsAsync()
    {
        _applications = TelemetryRepository.GetApplications().Select(a => new ApplicationViewModel { Id = a.InstanceId, Name = a.ApplicationName }).ToList();
        _applications.Insert(0, AllApplication);
        _selectedApplication = _applications.SingleOrDefault(e => e.Id == ApplicationInstanceId) ?? AllApplication;
        UpdateSubscription();

        return Task.CompletedTask;
    }

    private Task HandleSelectedApplicationChangedAsync()
    {
        NavigationManager.NavigateTo($"/SemanticLogs/{_selectedApplication.Id}");
        _applicationChanged = true;
        UpdateSubscription();

        return Task.CompletedTask;
    }

    private void UpdateSubscription()
    {
        // Subscribe to updates.
        if (_logsSubscription is null || _logsSubscription.ApplicationId != _selectedApplication.Id)
        {
            _logsSubscription?.Dispose();
            _logsSubscription = TelemetryRepository.OnNewLogs(_selectedApplication.Id, () => InvokeAsync(StateHasChanged));
        }
    }

    private async Task OnShowProperties(OtlpLogEntry entry)
    {
        var entryProperties = entry.AllProperties()
            .Select(kvp => new LogEntryPropertyViewModel { Name = kvp.Key, Value = kvp.Value })
            .ToList();

        var parameters = new DialogParameters
            {
                Title = "Log Entry Details",
                Width = "auto",
                Height = "auto",
                TrapFocus = true,
                Modal = true,
                PrimaryAction = "Close",
                PrimaryActionEnabled = true,
                SecondaryAction = null,
            };
        await DialogService.ShowDialogAsync<LogDetailsDialog>(entryProperties, parameters);
    }

    private async Task OpenFilterAsync(LogFilter? entry)
    {
        var logPropertyKeys = TelemetryRepository.GetLogPropertyKeys(_selectedApplication.Id);

        var title = entry is not null ? "Edit Filter" : "Add Filter";
        var parameters = new DialogParameters
            {
                OnDialogResult = DialogService.CreateDialogCallback(this, HandleFilterDialog),
                Title = title,
                Alignment = HorizontalAlignment.Right,
                PrimaryAction = null,
                SecondaryAction = null,
            };
        var data = new FilterDialogViewModel
            {
                Filter = entry,
                LogPropertyKeys = logPropertyKeys
            };
        await DialogService.ShowPanelAsync<FilterDialog>(data, parameters);
    }

    private Task HandleFilterDialog(DialogResult result)
    {
        if (result.Data is FilterDialogResult filterResult && filterResult.Filter is LogFilter filter)
        {
            if (filterResult.Delete)
            {
                _logFilters.Remove(filter);
            }
            else if (filterResult.Add)
            {
                _logFilters.Add(filter);
            }
        }

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_applicationChanged)
        {
            await JS.InvokeVoidAsync("resetContinuousScrollPosition");
            _applicationChanged = false;
        }
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeContinuousScroll");
        }
    }

    public void Dispose()
    {
        _applicationsSubscription?.Dispose();
        _logsSubscription?.Dispose();
    }
}
