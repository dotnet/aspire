@using Aspire.Dashboard.Model
@implements IDialogContentComponent<EnvironmentVariablesDialogViewModel>

<div>
    <FluentDialogBody>
        <FluentStack Orientation="Orientation.Vertical">
            <FluentToolbar Orientation="Orientation.Horizontal">
                @if (Content?.ShowSpecOnlyToggle == true)
                {
                    <FluentButton Appearance="Appearance.Lightweight"
                                    IconEnd="@(_showAll ? _showSpecOnlyIcon : _showAllIcon)"
                                    Title="@(_showAll ? "Show Spec Only" : "Show All")"
                                    aria-label="@(_showAll ? "Show Spec Only" : "Show All")"
                                    OnClick="() => _showAll = !_showAll"
                                    slot="end" />
                }
                <FluentButton Appearance="Appearance.Lightweight"
                                IconEnd="@(_defaultMasked ? _unmaskIcon : _maskIcon)"
                                Title="@(_defaultMasked ? "Show Values" : "Hide Values")"
                                aria-label="@(_defaultMasked ? "Show Values" : "Hide Values")"
                                OnClick="ToggleMaskState"
                                slot="end" />
                <FluentSearch Placeholder="Filter..."
                                Immediate="true"
                                Autofocus="true"
                                @bind-Value="_filter"
                                @oninput="HandleFilter"
                                @bind-Value:after="HandleClear"
                                slot="end" />
            </FluentToolbar>
            <div class="dialog-grid-container">
                <PropertyGrid TItem="EnvironmentVariableViewModel"
                              Items="@FilteredItems"
                              NameColumnValue="(vm) => vm.Name"
                              ValueColumnValue="(vm) => vm.Value"
                              NameSort="_nameSort"
                              ValueSort="_valueSort"
                              EnableValueMasking="true"
                              GetIsItemMasked="(vm) => vm.IsValueMasked"
                              SetIsItemMasked="(vm, newValue) => vm.IsValueMasked = newValue"
                              IsMaskedChanged="@CheckAllMaskStates"
                              HighlightText="@_filter" />
            </div>
        </FluentStack>
    </FluentDialogBody>
</div>
