@using Aspire.Dashboard.Extensions
@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.GenAI
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Utils

@inject IStringLocalizer<Dialogs> Loc
@inject IStringLocalizer<ControlsStrings> ControlsStringsLoc
@implements IDialogContentComponent<GenAIVisualizerDialogViewModel>

<FluentDialogHeader ShowDismiss="true">
    <div class="dialog-title-grid">
        <FluentIcon Value="@(new Icons.Regular.Size24.BrainCircuit())" Style="grid-area: dialog-icon; align-self: center;" />
        <FluentLabel Typo="Typography.PaneHeader" Class="col-long-content" Style="grid-area: dialog-title;">
            @Content.Title
        </FluentLabel>

        <div Style="grid-area: dialog-format;">
            Test
        </div>
    </div>
</FluentDialogHeader>

<FluentDialogBody>
    <div class="genai-visualizer-container">
        <FluentSplitter BarHandle="true"
                        Style="height:100%"
                        Panel1Size="3fr"
                        Panel2Size="7fr"
                        BarSize="10">
            <Panel1>
                <div class="span-events-sidebar">
                    <TreeGenAISelector @ref="_treeGenAISelector"
                                       PageViewModel="@Content"
                                       HandleSelectedTreeItemChangedAsync="@HandleSelectedTreeItemChangedAsync" />
                </div>
            </Panel1>
            <Panel2>
                <div class="span-events-container">
                    @if (Content.SelectedMessage is { } selectedEvent)
                    {
                        <div class="event-header">
                            <GenAIEventTitle Event="@selectedEvent" ResourceName="@selectedEvent.ResourceName" />
                        </div>
                        <FluentTabs ActiveTabId="@($"tab-event-{Content.EventActiveView}")" OnTabChange="@OnEventTabChange" Size="null">
                            <FluentTab LabelClass="tab-label"
                                       Id="@($"tab-event-{EventViewKind.Preview}")"
                                       Label="Preview">
                                <div class="tab-container">
                                    @foreach (var messagePart in selectedEvent.MessageParts)
                                    {
                                        if (messagePart.TextVisualizerViewModel.FormatKind is DashboardUIHelpers.PlaintextFormat)
                                        {
                                            @messagePart.TextVisualizerViewModel.FormattedText
                                        }
                                        else if (messagePart.TextVisualizerViewModel.FormatKind is DashboardUIHelpers.MarkdownFormat)
                                        {
                                            @InteractionMarkdownHelper.ToMarkupString(messagePart.TextVisualizerViewModel.FormattedText)
                                        }
                                        else
                                        {
                                            <TextVisualizer ViewModel="@messagePart.TextVisualizerViewModel" HideLineNumbers="true" />
                                        }
                                    }
                                </div>
                            </FluentTab>
                            <FluentTab LabelClass="tab-label"
                                       Id="@($"tab-event-{EventViewKind.Raw}")"
                                       Label="Raw">
                                <div class="tab-container">
                                    @foreach (var messagePart in selectedEvent.MessageParts)
                                    {
                                        <TextVisualizer ViewModel="@messagePart.TextVisualizerViewModel" DisplayUnformatted="true" />
                                    }
                                </div>
                            </FluentTab>
                        </FluentTabs>
                    }
                    else
                    {
                        <div class="event-header">
                            <span class="llm-badge">LLM</span>
                            <div class="event-header-title">
                                <span>@Content.Span.Name</span>
                                <span class="event-header-date">@FormatHelpers.FormatTimeWithOptionalDate(TimeProvider, Content.Span.StartTime, MillisecondsDisplay.Truncated)</span>
                            </div>
                            <div class="event-header-details">
                                <span>Duration <strong>@DurationFormatter.FormatDuration(Content.Span.Duration)</strong></span>
                                <span>Tokens <strong title="@($"Input tokens: {Content.InputTokens} Output tokens: {Content.OutputTokens}")">@(Content.InputTokens + Content.OutputTokens)</strong></span>
                            </div>
                        </div>
                        <FluentTabs ActiveTabId="@($"tab-overview-{Content.OverviewActiveView}")" OnTabChange="@OnOverviewTabChange" Size="null">
                            <FluentTab LabelClass="tab-label"
                                       Id="@($"tab-overview-{OverviewViewKind.InputOutput}")"
                                       Label="Input & output">
                                <div class="tab-container">
                                    @RenderEventSection("Input", Content.Messages.Where(e => e.Type != GenAIEventType.Choice).ToList())
                                    @RenderEventSection("Output", Content.Messages.Where(e => e.Type == GenAIEventType.Choice).ToList())
                                </div>
                            </FluentTab>
                            <FluentTab LabelClass="tab-label"
                                       Id="@($"tab-overview-{OverviewViewKind.Details}")"
                                       Label="Details">
                                <div class="tab-container">
                                    <SpanDetails ViewModel="@Content.SpanDetailsViewModel" CloseCallback="@(() => { })" HideToolbar="true" />
                                </div>
                            </FluentTab>
                        </FluentTabs>
                    }
                </div>
            </Panel2>
        </FluentSplitter>
    </div>
</FluentDialogBody>

<FluentDialogFooter Visible="false" />

@{
    RenderFragment RenderEventSection(string title, List<GenAIMessageViewModel> events)
    {
        return@<div>
            <div class="section-title">@title</div>
            @foreach (var spanEvent in events)
            {
                <div class="event-container">
                    <div class="event-title">@GetEventTitle(spanEvent)</div>
                    @foreach (var messagePart in spanEvent.MessageParts)
                    {
                        <TextVisualizer ViewModel="@messagePart.TextVisualizerViewModel" HideLineNumbers="true" />
                    }
                    @*
                    @if (spanEvent.Body is SystemOrUserEvent systemOrUserEvent)
                    {
                        <div>@systemOrUserEvent.Content</div>
                    }
                    else if (spanEvent.Body is AssistantEvent assistantEvent)
                    {
                        @RenderAssistantEvent(assistantEvent)
                    }
                    else if (spanEvent.Body is ToolEvent toolEvent)
                    {
                        <div>@toolEvent.Content?.ToJsonString()</div>
                    }
                    else if (spanEvent.Body is ChoiceEvent choiceEvent)
                    {
                        if (choiceEvent.Message != null)
                        {
                            @RenderAssistantEvent(choiceEvent.Message)
                        }
                    }
                    *@
                </div>
            }
        </div>;
    }

    @*
    RenderFragment RenderAssistantEvent(AssistantEvent assistantEvent)
    {
        if (assistantEvent.Content != null)
        {
            return @<div>@assistantEvent.Content</div>;
        }
        else if (assistantEvent.ToolCalls is { Length: > 0 } toolCalls)
        {
            return @<div>
                @foreach (var toolCall in toolCalls)
                {
                    if (toolCall.Function is { } function)
                    {
                        <div>@(function.Name)(@function.Arguments?.ToJsonString())</div>
                    }
                }
            </div>;
        }

        return@<div></div>;
    }
    *@
}
