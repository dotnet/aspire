@using Aspire.Dashboard.Extensions
@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.GenAI
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Utils
@using System.Globalization

@inject IStringLocalizer<Dialogs> Loc
@inject IStringLocalizer<ControlsStrings> ControlsStringsLoc
@implements IDialogContentComponent<GenAIVisualizerDialogViewModel>

<FluentDialogHeader ShowDismiss="true">
    <div class="dialog-title-grid">
        <FluentIcon Value="@(new Icons.Regular.Size24.BrainCircuit())" Style="grid-area: dialog-icon; align-self: center;" />
        <FluentLabel Typo="Typography.PaneHeader" Class="col-long-content" Style="grid-area: dialog-title;">
            @Content.Title
        </FluentLabel>

        @if (_contextSpans.Count > 1)
        {
            <div Style="grid-area: dialog-format;">
                <FluentButton IconStart="new Icons.Regular.Size16.ArrowUp()"
                              Appearance="Appearance.Stealth"
                              Disabled="@(_currentSpanContextIndex == 0)"
                              OnClick="OnPreviousGenAISpan">Previous</FluentButton>
                <FluentButton IconStart="new Icons.Regular.Size16.ArrowDown()"
                              Appearance="Appearance.Stealth"
                              Disabled="@(_currentSpanContextIndex >= _contextSpans.Count - 1)"
                              OnClick="OnNextGenAISpan">Next</FluentButton>
            </div>
        }
    </div>
</FluentDialogHeader>

<FluentDialogBody>
    <div class="genai-visualizer-container">
        <FluentSplitter BarHandle="true"
                        Style="height:100%"
                        Panel1Size="3fr"
                        Panel2Size="7fr"
                        BarSize="10">
            <Panel1>
                <div class="span-messages-sidebar">
                    <TreeGenAISelector PageViewModel="@Content"
                                       HandleSelectedTreeItemChangedAsync="@HandleSelectedTreeItemChangedAsync" />
                </div>
            </Panel1>
            <Panel2>
                <div class="span-messages-container">
                    @if (Content.SelectedMessage is { } selectedMessage)
                    {
                        <div>
                            <div class="message-header">
                                <GenAIMessageTitle Message="@selectedMessage" ResourceName="@selectedMessage.ResourceName" />
                            </div>
                            @*
                                Tab content isn't nested inside FluentTab elements. The tab control is just used to display the tabs.
                                Content is located in manually created divs so they can be placed in their own CSS grid row.
                            *@
                            <FluentTabs ActiveTabId="@($"tab-message-{Content.MessageActiveView}")" OnTabChange="@OnMessageTabChange" Size="null">
                                <FluentTab LabelClass="tab-label"
                                           Id="@($"tab-message-{MessageViewKind.Preview}")"
                                           Label="Preview">
                                </FluentTab>
                                <FluentTab LabelClass="tab-label"
                                           Id="@($"tab-message-{MessageViewKind.Raw}")"
                                           Label="Raw">
                                </FluentTab>
                            </FluentTabs>
                        </div>
                        @if (Content.MessageActiveView == MessageViewKind.Preview)
                        {
                            <div class="tab-container">
                                @foreach (var messagePart in selectedMessage.MessageParts)
                                {
                                    if (messagePart.TextVisualizerViewModel.FormatKind is DashboardUIHelpers.PlaintextFormat)
                                    {
                                        @messagePart.TextVisualizerViewModel.FormattedText
                                    }
                                    else if (messagePart.TextVisualizerViewModel.FormatKind is DashboardUIHelpers.MarkdownFormat)
                                    {
                                        @InteractionMarkdownHelper.ToMarkupString(messagePart.TextVisualizerViewModel.FormattedText)
                                    }
                                    else
                                    {
                                        <TextVisualizer ViewModel="@messagePart.TextVisualizerViewModel" HideLineNumbers="true" />
                                    }
                                }
                            </div>
                        }
                        @if (Content.MessageActiveView == MessageViewKind.Raw)
                        {
                            <div class="tab-container">
                                @foreach (var messagePart in selectedMessage.MessageParts)
                                {
                                    <TextVisualizer ViewModel="@messagePart.TextVisualizerViewModel" DisplayUnformatted="true" />
                                }
                            </div>
                        }
                        <FluentButton Id="@_copyButtonId"
                                      Class="message-copy-button"
                                      Appearance="Appearance.Stealth"
                                      AdditionalAttributes="@FluentUIExtensions.GetClipboardCopyAdditionalAttributes(string.Join(Environment.NewLine + Environment.NewLine, selectedMessage.MessageParts.Select(p => p.TextVisualizerViewModel.FormattedText)), ControlsStringsLoc[nameof(ControlsStrings.GridValueCopyToClipboard)], ControlsStringsLoc[nameof(ControlsStrings.GridValueCopied)])">
                            <span slot="start">
                                <FluentIcon Class="copy-icon" Style="display:inline; vertical-align: text-bottom" Icon="Icons.Regular.Size16.Copy" Slot="start" />
                                <FluentIcon Class="checkmark-icon" Style="display:none; vertical-align: text-bottom" Icon="Icons.Regular.Size16.Checkmark" Slot="start" />
                            </span>
                            @ControlsStringsLoc[nameof(ControlsStrings.GridValueCopyToClipboard)]
                        </FluentButton>
                    }
                    else
                    {
                        <div>
                            <div class="message-header">
                                <span class="llm-badge">LLM</span>
                                <div class="message-header-title">
                                    <span>@Content.Span.Name</span>
                                    <span class="message-header-date">@FormatHelpers.FormatTimeWithOptionalDate(TimeProvider, Content.Span.StartTime, MillisecondsDisplay.Truncated)</span>
                                </div>
                                @{
                                    var tokenTotal = Content.InputTokens + Content.OutputTokens;
                                    var tokenText = tokenTotal == null ? "N/A" : tokenTotal.Value.ToString(CultureInfo.CurrentCulture);
                                    var tokenTooltip = tokenTotal == null ? "N/A" : $"Input tokens: {Content.InputTokens ?? 0}{Environment.NewLine}Output tokens: {Content.OutputTokens ?? 0}";
                                }
                                <div class="message-header-details">
                                    <span>Duration <strong>@DurationFormatter.FormatDuration(Content.Span.Duration)</strong></span>
                                    <span title="@tokenTooltip">Tokens <strong>@tokenText</strong></span>
                                </div>
                            </div>
                            @*
                                Tab content isn't nested inside FluentTab elements. The tab control is just used to display the tabs.
                                Content is located in manually created divs so they can be placed in their own CSS grid row.
                            *@
                            <FluentTabs ActiveTabId="@($"tab-overview-{Content.OverviewActiveView}")" OnTabChange="@OnOverviewTabChange" Size="null">
                                <FluentTab LabelClass="tab-label"
                                           Id="@($"tab-overview-{OverviewViewKind.InputOutput}")"
                                           Label="Input & output">
                                </FluentTab>
                                <FluentTab LabelClass="tab-label"
                                           Id="@($"tab-overview-{OverviewViewKind.Details}")"
                                           Label="Details">
                                </FluentTab>
                            </FluentTabs>
                        </div>
                        @if (Content.OverviewActiveView == OverviewViewKind.InputOutput)
                        {
                            <div class="tab-container">
                                @RenderMessageSection("Input", Content.Messages.Where(e => e.Type != GenAIMessageType.OutputMessage).ToList())
                                @RenderMessageSection("Output", Content.Messages.Where(e => e.Type == GenAIMessageType.OutputMessage).ToList())
                            </div>
                        }
                        @if (Content.OverviewActiveView == OverviewViewKind.Details)
                        {
                            <div class="tab-container">
                                <SpanDetails ViewModel="@Content.SpanDetailsViewModel" CloseCallback="@(() => { })" HideToolbar="true" />
                            </div>
                        }
                    }
                </div>
            </Panel2>
        </FluentSplitter>
    </div>
</FluentDialogBody>

<FluentDialogFooter Visible="false" />

@{
    RenderFragment RenderMessageSection(string title, List<GenAIMessageViewModel> messages)
    {
        return@<div>
            <div class="section-title">@title</div>
            @foreach (var message in messages)
            {
                <div class="message-container">
                    <div class="message-title">
                        @GetMessageTitle(message)
                        <span class="defaultHidden">
                            <FluentButton Appearance="Appearance.Lightweight" OnClick="@(() => OnViewMessage(message))">
                                <FluentIcon Icon="Icons.Regular.Size16.SlideSearch" />
                            </FluentButton>
                        </span>
                    </div>
                    @foreach (var messagePart in message.MessageParts)
                    {
                        <TextVisualizer ViewModel="@messagePart.TextVisualizerViewModel" HideLineNumbers="true" />
                    }
                </div>
            }
        </div>;
    }
}
