@using Aspire.Dashboard.Components.Controls.Chart
@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Interaction
@using Aspire.Dashboard.Model.Otlp
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Utils
@using Aspire.Dashboard.Extensions
@using System.Globalization
@using Aspire.Dashboard.Components.Controls.Grid
@using Aspire.DashboardService.Proto.V1
@using Dialogs = Aspire.Dashboard.Resources.Dialogs
@implements IDialogContentComponent<InteractionsInputsDialogViewModel>

<FluentDialogHeader ShowDismiss="@Dialog.Instance.Parameters.ShowDismiss">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody Class="interaction-input-dialog">
    @if (!string.IsNullOrEmpty(Content.Message))
    {
        <div class="interaction-message">
            @((MarkupString)Content.Message)
        </div>
    }

    <EditForm EditContext="@_editContext" OnValidSubmit="@SubmitAsync">
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
            @foreach (var vm in _inputDialogInputViewModels)
            {
                var localItem = vm;
                <div class="interaction-input">
                    @switch (vm.Input.InputType)
                    {
                        case InputType.Text:
                            <InteractionInputField ForId="@_elementRefs[localItem]?.Id"
                                                   InputViewModel="@localItem"
                                                   MarkdownProcessor="@_markdownProcessor"
                                                   Context="input">
                                @*
                                * Immediate value of true on text input ensures the value is set to the server token with every key press in textbox.
                                *@
                                <FluentTextField @ref="@_elementRefs[input.ViewModel]"
                                                 @bind-Value="input.ViewModel.Value"
                                                 Placeholder="@input.ViewModel.Input.Placeholder"
                                                 Required="input.ViewModel.Input.Required"
                                                 Immediate="true"
                                                 Disabled="input.ViewModel.InputDisabled"
                                                 aria-describedby="@input.DescriptionId"
                                                 Maxlength="@InteractionHelpers.GetMaxLength(input.ViewModel.Input.MaxLength)" />
                            </InteractionInputField>
                            break;
                        case InputType.SecretText:
                            <InteractionInputField ForId="@_elementRefs[localItem]?.Id"
                                                   InputViewModel="@localItem"
                                                   MarkdownProcessor="@_markdownProcessor"
                                                   Context="input">
                                @*
                                * AutoComplete value of one-time-code on password input prevents the browser asking to save the value.
                                * Immediate value of true on text input ensures the value is set to the server token with every key press in textbox.
                                *@
                                <FluentTextField @ref="@_elementRefs[input.ViewModel]"
                                                 @bind-Value="input.ViewModel.Value"
                                                 Placeholder="@input.ViewModel.Input.Placeholder"
                                                 Required="input.ViewModel.Input.Required"
                                                 TextFieldType="TextFieldType.Password"
                                                 AutoComplete="one-time-code"
                                                 Immediate="true"
                                                 Disabled="input.ViewModel.InputDisabled"
                                                 aria-describedby="@input.DescriptionId"
                                                 Maxlength="@InteractionHelpers.GetMaxLength(input.ViewModel.Input.MaxLength)" />
                            </InteractionInputField>
                            break;
                        case InputType.Choice:
                            <InteractionInputField ForId="@_elementRefs[localItem]?.Id"
                                                   InputViewModel="@localItem"
                                                   MarkdownProcessor="@_markdownProcessor"
                                                   Context="input">
                                @*
                                * Need to wrap the select in a div to display a progress bar next to it.
                                * Because of this we have to use a separate label control rather than have the select be responsible for displaying it.
                                *@
                                @if (!localItem.Input.AllowCustomChoice)
                                {
                                    <FluentSelect TOption="SelectViewModel<string>"
                                                  @ref="@_elementRefs[input.ViewModel]"
                                                  @bind-Value="input.ViewModel.Value"
                                                  Placeholder="@input.ViewModel.Input.Placeholder"
                                                  Required="input.ViewModel.Input.Required"
                                                  Items="input.ViewModel.SelectOptions"
                                                  OptionValue="@(vm => vm.Id)"
                                                  OptionText="@(vm => vm.Name)"
                                                  Height="250px"
                                                  Position="SelectPosition.Below"
                                                  Disabled="input.ViewModel.InputDisabled"
                                                  aria-describedby="@input.DescriptionId">
                                        <OptionTemplate Context="optionContext">
                                            @* Allows long values to be viewed in option popup by adding a tooltip to options. *@
                                            @* Better improvements could come from new FluentUI features. See https://github.com/microsoft/fluentui-blazor/issues/4136 *@
                                            <span title="@(optionContext.Name?.Length > 30 ? optionContext.Name : null)">
                                                @optionContext.Name
                                            </span>
                                        </OptionTemplate>
                                    </FluentSelect>
                                }
                                else
                                {
                                    <FluentCombobox TOption="SelectViewModel<string>"
                                                    @ref="@_elementRefs[input.ViewModel]"
                                                    @bind-Value="input.ViewModel.Value"
                                                    Placeholder="@input.ViewModel.Input.Placeholder"
                                                    Required="input.ViewModel.Input.Required"
                                                    Items="input.ViewModel.SelectOptions"
                                                    OptionValue="@(vm => vm.Id)"
                                                    OptionText="@(vm => vm.Name)"
                                                    Height="250px"
                                                    Position="SelectPosition.Below"
                                                    Disabled="input.ViewModel.InputDisabled"
                                                    aria-describedby="@input.DescriptionId">
                                        <OptionTemplate Context="optionContext">
                                            @* Allows long values to be viewed in option popup by adding a tooltip to options. *@
                                            @* Better improvements could come from new FluentUI features. See https://github.com/microsoft/fluentui-blazor/issues/4136 *@
                                            <span title="@(optionContext.Name?.Length > 30 ? optionContext.Name : null)">
                                                @optionContext.Name
                                            </span>
                                        </OptionTemplate>
                                    </FluentCombobox>
                                }
                            </InteractionInputField>
                            break;
                        case InputType.Boolean:
                            <InteractionInputField ForId="@_elementRefs[localItem]?.Id"
                                                   InputViewModel="@localItem"
                                                   MarkdownProcessor="@_markdownProcessor"
                                                   Context="input">
                                <FluentCheckbox @ref="@_elementRefs[input.ViewModel]"
                                                @bind-Value="input.ViewModel.IsChecked"
                                                Label="@input.ViewModel.Input.Label"
                                                Placeholder="@input.ViewModel.Input.Placeholder"
                                                AriaLabel="@input.ViewModel.Input.Description"
                                                Disabled="input.ViewModel.InputDisabled"
                                                aria-describedby="@input.DescriptionId" />
                            </InteractionInputField>
                            break;
                        case InputType.Number:
                            <InteractionInputField ForId="@_elementRefs[localItem]?.Id"
                                                   InputViewModel="@localItem"
                                                   MarkdownProcessor="@_markdownProcessor"
                                                   Context="input">
                                <FluentNumberField TValue="int?"
                                                   @ref="@_elementRefs[input.ViewModel]"
                                                   @bind-Value="input.ViewModel.NumberValue"
                                                   Placeholder="@input.ViewModel.Input.Placeholder"
                                                   AriaLabel="@input.ViewModel.Input.Description"
                                                   Required="input.ViewModel.Input.Required"
                                                   Immediate="true"
                                                   Disabled="input.ViewModel.InputDisabled"
                                                   aria-describedby="@input.DescriptionId" />
                            </InteractionInputField>
                            break;
                        default:
                            @* Ignore unexpected InputTypes *@
                            break;
                    }
                </div>
            }
        </FluentStack>

        @* Hidden submit is so the form is submitted when the user presses enter. *@
        <button type="submit" style="display:none"></button>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SubmitAsync">
        @Dialog.Instance.Parameters.PrimaryAction
    </FluentButton>
    @if (!string.IsNullOrEmpty(Dialog.Instance.Parameters.SecondaryAction))
    {
        <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">
            @Dialog.Instance.Parameters.SecondaryAction
        </FluentButton>
    }
</FluentDialogFooter>

@code {
    private RenderFragment? GetDescriptionContent(InteractionInput vm, string? id)
    {
        @if (!string.IsNullOrEmpty(vm.Description))
        {
            return
            @<div class="input-description" id="@id">
            @if (vm.EnableDescriptionMarkdown)
            {
                    <MarkdownRenderer MarkdownProcessor="@_markdownProcessor" Markdown="@vm.Description" SuppressParagraphOnNewLines="true" />
            }
            else
            {
                    <span>@vm.Description</span>
            }
            </div>;
        }
        return null;
    }
}
