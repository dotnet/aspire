@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Extensions
@using Aspire.Dashboard.Resources
@inject IStringLocalizer<Columns> Loc

@if (Resource is ProjectViewModel projectViewModel)
{
    // NOTE projects are also executables, so we have to check for projects first
    <GridValue Value="@Path.GetFileName(projectViewModel.ProjectPath)"
               ValueToCopy="@projectViewModel.ProjectPath"
               EnableHighlighting="true"
               HighlightText="@FilterText"
               PreCopyToolTip="@Loc[nameof(Columns.SourceColumnSourceCopyFullPathToClipboard)]"
               ToolTip="@projectViewModel.ProjectPath" />
}
else if (Resource is ExecutableViewModel executableViewModel)
{
    var arguments = string.Join(" ", executableViewModel.Arguments ?? []);
    var fullCommandLine = $"{executableViewModel.ExecutablePath} {arguments}";

    <GridValue Value="@Path.GetFileName(executableViewModel.ExecutablePath)"
               ValueToCopy="@fullCommandLine"
               EnableHighlighting="true"
               HighlightText="@FilterText"
               PreCopyToolTip="@Loc[nameof(Columns.SourceColumnSourceCopyFullPathToClipboard)]"
               ToolTip="@executableViewModel.ExecutablePath">
        <ContentAfterValue>
            <span class="subtext">@arguments</span>
        </ContentAfterValue>
    </GridValue>

    <div class="ellipsis-overflow" title="@executableViewModel.WorkingDirectory" aria-label="@executableViewModel.WorkingDirectory">@string.Format(Loc[nameof(Columns.SourceColumnDisplayWorkingDirectory)], executableViewModel.WorkingDirectory?.TrimMiddle(35))</div>
}
else if (Resource is ContainerViewModel containerViewModel)
{
    var ports = string.Join("; ", containerViewModel.Ports);
    <GridValue Value="@containerViewModel.Image"
               EnableHighlighting="true"
               HighlightText="@FilterText"
               PreCopyToolTip="@Loc[nameof(Columns.SourceColumnSourceCopyContainerToClipboard)]"
               ToolTip="@containerViewModel.Image">
        <ContentAfterValue>
           @if (containerViewModel.Ports.Length > 0)
           {
               var title = string.Format(
                   Loc[containerViewModel.Ports.Length == 1
                       ? nameof(Columns.SourceColumnDisplayPort)
                       : nameof(Columns.SourceColumnDisplayPorts)],
                   ports);
                   <span class="subtext" aria-label="@title">@title</span>
           }
        </ContentAfterValue>
   </GridValue>
    <FluentStack Orientation="Orientation.Horizontal">
        @if (containerViewModel.Command is not null)
        {
            <div class="ellipsis-overflow" title="@Loc[nameof(Columns.SourceColumnDisplayContainerCommandTitle)]">@Loc[nameof(Columns.SourceColumnDisplayContainerCommand), containerViewModel.Command]</div>
        }
        @if (containerViewModel.Args is not null)
        {
            var args = string.Join(" ", containerViewModel.Args);
            <div class="ellipsis-overflow" title="@Loc[nameof(Columns.SourceColumnDisplayContainerArgsTitle)]">@args</div>
        }
    </FluentStack>
}

@code {
    [Parameter, EditorRequired]
    public required ResourceViewModel Resource { get; set; }

    [Parameter, EditorRequired]
    public required string FilterText { get; set; }
}
