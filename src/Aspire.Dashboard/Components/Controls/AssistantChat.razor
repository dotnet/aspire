@namespace Aspire.Dashboard.Components
@using Aspire.Dashboard.Components.CustomIcons
@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Model.Assistant
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Resources
@using Aspire.Dashboard.Utils
@using System.Globalization

@{
    _renderDisplayState = ChatViewModel.DisplayState;
}

@if (_renderDisplayState == AssistantChatDisplayState.Chat)
{
    var chatMessages = ChatViewModel.GetChatMessages();

    <div class="@Class" id="@AssistantChatViewModel.ChatAssistantContainerId">
        @if (chatMessages.VisibleChatMessages.Count == 0)
        {
            <div class="chat-splash">
                <ChatSplashCopilotLogo />
                <br />
                @foreach (var initialPrompt in chatMessages.InitialPrompts)
                {
                    <div>
                        <FluentButton Class="initial-prompt-button" OnClick="@(() => OnInitialPromptAsync(initialPrompt))">
                            <div>
                                <div class="initial-prompt-title">
                                    <FluentIcon Value="@initialPrompt.Icon"
                                                Color="Color.Accent"
                                                Class="initial-prompt-icon" />
                                    <span>@((MarkupString)ChatViewModel.MarkdownProcessor.ToHtml(initialPrompt.ButtonTitle, suppressSurroundingParagraph: true))</span>
                                </div>
                                <div class="initial-prompt-description">@((MarkupString)ChatViewModel.MarkdownProcessor.ToHtml(initialPrompt.ButtonDescription, suppressSurroundingParagraph: true))</div>
                            </div>
                        </FluentButton>

                    </div>
                }
                <p class="chat-disclaimer">@Loc[nameof(AIAssistant.ChatMistakesDisclaimerText)]</p>
                <p class="chat-disclaimer-subtext">@string.Format(Loc[nameof(AIAssistant.ChatIDEConnectionDisclaimerText)], ChatViewModel.GetLauncherDisplayName())</p>
            </div>
        }
        else
        {
            for (var i = 0; i < chatMessages.VisibleChatMessages.Count; i++)
            {
                var chatMessage = chatMessages.VisibleChatMessages[i];

                var classes = new List<string>();
                classes.Add(chatMessage.IsUserMessage ? "user-message" : "assistant-message");
                if (!chatMessage.IsUserMessage && i == chatMessages.VisibleChatMessages.Count - 1)
                {
                    classes.Add("last-message");
                }

                <div id="@chatMessage.ElementId" class="@(string.Join(" ", classes))">
                    <div>
                        @((MarkupString)chatMessage.Html)
                    </div>

                    @if (!string.IsNullOrEmpty(chatMessage.ErrorMessage))
                    {
                        <div class="error-message">
                            @chatMessage.ErrorMessage
                        </div>

                        @if (chatMessage.IsForbidden)
                        {
                            @WriteForbiddenError()
                        }
                        else if (chatMessage.LimitResetDate is { } limitResetDate)
                        {
                            <div>
                                @((MarkupString)Loc.GetString(nameof(AIAssistant.ChatRequestErrorReachedLimitCopilot), "https://aka.ms/dotnet/aspire/copilot-pro", limitResetDate.ToString("d", CultureInfo.CurrentCulture)).ToString())
                            </div>
                        }
                    }

                    @* Only display message buttons for the last response *@
                    @if (!chatMessage.IsUserMessage && chatMessage.IsComplete && chatMessages.VisibleChatMessages.Last() == chatMessage)
                    {
                        <div class="message-buttons">
                            <span>
                                @{
                                    var attributes = FluentUIExtensions.GetClipboardCopyAdditionalAttributes(chatMessage.PromptText, ControlsStringsLoc[nameof(ControlsStrings.GridValueCopyToClipboard)], ControlsStringsLoc[nameof(ControlsStrings.GridValueCopied)]);
                                    attributes["aria-label"] = Loc[nameof(AIAssistant.CopyMessageButtonText)];
                                }
                                <FluentButton Id="@($"{chatMessage.ElementId}-copy")"
                                              Appearance="Appearance.Stealth"
                                              Title="@Loc[nameof(AIAssistant.CopyMessageButtonText)]"
                                              AdditionalAttributes="attributes">
                                    <FluentIcon Class="copy-icon" Style="display:inline" Value="@(new Icons.Regular.Size16.Copy())" Color="Color.Neutral" />
                                    <FluentIcon Class="checkmark-icon" Style="display:none" Value="@(new Icons.Regular.Size16.Checkmark())" Color="Color.Neutral" />
                                </FluentButton>
                            </span>
                            <span>
                                <FluentButton Appearance="Appearance.Stealth"
                                              OnClick="@(() => LikeChatMessage(chatMessage))"
                                              Title="@Loc[nameof(AIAssistant.LikeMessageButtonText)]"
                                              aria-label="@Loc[nameof(AIAssistant.LikeMessageButtonText)]">
                                    <FluentIcon Value="@(!chatMessage.IsLiked ? (Icon)new Icons.Regular.Size16.ThumbLike() : new Icons.Filled.Size16.ThumbLike())" Color="Color.Neutral" />
                                </FluentButton>
                            </span>
                            <span>
                                <FluentButton Appearance="Appearance.Stealth"
                                              OnClick="@(() => DislikeChatMessage(chatMessage))"
                                              Title="@Loc[nameof(AIAssistant.DislikeMessageButtonText)]"
                                              aria-label="@Loc[nameof(AIAssistant.DislikeMessageButtonText)]">
                                    <FluentIcon Value="@(!chatMessage.IsDisliked ? (Icon)new Icons.Regular.Size16.ThumbDislike() : new Icons.Filled.Size16.ThumbDislike())" Color="Color.Neutral" />
                                </FluentButton>
                            </span>
                            <span>
                                <FluentButton Appearance="Appearance.Stealth"
                                              OnClick="@(() => RetryChatMessageAsync(chatMessage))"
                                              Title="@Loc[nameof(AIAssistant.RetryMessageButtonText)]"
                                              aria-label="@Loc[nameof(AIAssistant.RetryMessageButtonText)]">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.ArrowSync())" Color="Color.Neutral" Style="transform: rotate(90deg);" />
                                </FluentButton>
                            </span>
                        </div>
                    }
                </div>
            }
        }

    </div>
    @if (chatMessages.FollowUpPrompts.Count > 0)
    {
        <div class="chat-assistant-next-steps">
            @foreach (var followUpPrompt in chatMessages.FollowUpPrompts)
            {
                <div class="chat-assistant-next-step">
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Sparkle())" OnClick="@(() => OnNextStepItemAsync(followUpPrompt))">
                        @((MarkupString)followUpPrompt.Html)
                    </FluentButton>
                </div>
            }
            @if (ChatViewModel.FollowUpPromptsHasPages)
            {
                <div class="chat-assistant-next-step-refresh">
                    <FluentButton OnClick="@RefreshFollowUpPrompts" aria-label="@Loc[nameof(AIAssistant.ChatRefreshFollowUpPrompts)]" Title="@Loc[nameof(AIAssistant.ChatRefreshFollowUpPrompts)]">
                        <FluentIcon Value="@(new Icons.Regular.Size16.ArrowClockwise())" Style="vertical-align: text-top;" Width="16px" />
                    </FluentButton>
                </div>
            }
        </div>
    }
    <div class="@Class" id="chat-form-container">
        <EditForm id="chat-form" Model="@this" OnValidSubmit="@HandleSubmit">
            <div class="input-box page-width">
                <label>
                    <textarea id="chat-message" @ref="@_chatMessageTextBox" @bind="@ChatViewModel.UserMessage" data-response-in-progress="@ChatViewModel.ResponseInProgress.ToString().ToLowerInvariant()" placeholder="@Loc[nameof(AIAssistant.ChatTextAreaPlaceHolder)]" rows="1"></textarea>
                </label>
                <div class="tools">
                    @* Don't display model selector until model is loaded from storage *@
                    @if (_selectedModelItem != null)
                    {
                        <AspireMenuButton Text="@_selectedModelItem.Text"
                                          Title="@string.Format(Loc[nameof(AIAssistant.ChatModelSelectButtonTitle)], _selectedModelItem.Text)"
                                          Icon="@(new Icons.Regular.Size12.ChevronDown())"
                                          IconColor="Color.Custom"
                                          IconCustomColor="var(--foreground-settings-text)"
                                          Items="@_modelMenuItems"
                                          ButtonAppearance="Appearance.Neutral"
                                          ButtonClass="model-button" />
                    }
                    <FluentButton Appearance="Appearance.Stealth" Type="ButtonType.Submit" id="chat-form-submit" class="send-button" Disabled="@(!IsSubmitEnabled())" aria-label="@Loc[nameof(AIAssistant.SidebarSendMessage)]" Title="@Loc[nameof(AIAssistant.SidebarSendMessage)]">
                        <FluentIcon Value="@GetSubmitIcon()" />
                    </FluentButton>
                </div>
            </div>
        </EditForm>
    </div>
    <div class="@Class" id="chat-scroll-bottom-container">
        <FluentButton Id="chat-scroll-bottom-button" Style="display: none;">
            <FluentIcon Value="new Icons.Regular.Size16.ArrowDown()" Color="Color.Neutral" />
        </FluentButton>
    </div>
}
else if (_renderDisplayState is AssistantChatDisplayState.GhcpDisabled or AssistantChatDisplayState.GhcpError)
{
    <div class="@Class" id="@AssistantChatViewModel.ChatAssistantContainerId">
        <div class="chat-splash">
            <ChatSplashCopilotLogo />
            <br />
            <h3>@Loc[nameof(AIAssistant.ChatUnavailableText)]</h3>
        </div>
        <div class="unavailable-content">
            @WriteForbiddenError()
        </div>
    </div>
}
else
{
    @* Loading state while getting data from VS and browser storage *@
    <div class="@Class" id="@AssistantChatViewModel.ChatAssistantContainerId">
        <div class="chat-splash">
            <ChatSplashCopilotLogo />
            <br />
            <p>@Loc[nameof(AIAssistant.ChatLoadingText)]</p>
        </div>
    </div>
}

@code {
    RenderFragment WriteForbiddenError()
    {
        return @<div>
            <p>
                @((MarkupString)Loc[nameof(AIAssistant.ChatRequestErrorForbiddenDescription)].ToString())
            </p>
            <p>
                @{
                    var helpText = (ChatViewModel.Launcher == KnownLaunchers.VisualStudio)
                    ? Loc.GetString(nameof(AIAssistant.ChatRequestErrorForbiddenVisualStudio), "https://aka.ms/dotnet/aspire/copilot-vs-login")
                    : Loc.GetString(nameof(AIAssistant.ChatRequestErrorForbiddenVSCode), "https://aka.ms/dotnet/aspire/copilot-vscode-login");
                }

                @((MarkupString)helpText.ToString())
            </p>
            <p>
                @((MarkupString)Loc.GetString(nameof(AIAssistant.ChatRequestErrorForbiddenCopilotSubscription), "https://aka.ms/dotnet/aspire/copilot-free-signup").ToString())
            </p>
        </div>;
    }
}
