@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Resources
@inject IStringLocalizer<ControlsStrings> Loc

<div class="environment-variables-layout">

    <FluentToolbar Orientation="Orientation.Horizontal">
        <FluentAnchor Appearance="Appearance.Lightweight" Href="@($"/ConsoleLogs/{Resource?.Name}")" slot="end">View logs</FluentAnchor>

        @if (ShowSpecOnlyToggle)
        {
            <FluentButton Appearance="Appearance.Lightweight"
                          Disabled="IsSpecOnlyToggleDisabled"
                          IconEnd="@(_showAll ? _showSpecOnlyIcon : _showAllIcon)"
                          Title="@(_showAll ? Loc[nameof(ControlsStrings.EnvironmentVariablesFilterToggleShowSpecOnly)] : ControlsStrings.EnvironmentVariablesFilterToggleShowAll)"
                          aria-label="@(_showAll ? Loc[nameof(ControlsStrings.EnvironmentVariablesFilterToggleShowSpecOnly)] : ControlsStrings.EnvironmentVariablesFilterToggleShowAll)"
                          OnClick="() => _showAll = !_showAll"
                          slot="end" />
        }
        <FluentButton Appearance="Appearance.Lightweight"
                      IconEnd="@(_defaultMasked ? _unmaskIcon : _maskIcon)"
                      Title="@(_defaultMasked ? Loc[nameof(ControlsStrings.EnvironmentVariablesShowVariableValues)] : Loc[nameof(ControlsStrings.EnvironmentVariablesHideVariableValues)])"
                      aria-label="@(_defaultMasked ? Loc[nameof(ControlsStrings.EnvironmentVariablesShowVariableValues)] : Loc[nameof(ControlsStrings.EnvironmentVariablesHideVariableValues)])"
                      OnClick="ToggleMaskState"
                      slot="end" />
        <FluentSearch Placeholder="@Loc[nameof(ControlsStrings.FilterPlaceholder)]"
                      Immediate="true"
                      Autofocus="true"
                      @bind-Value="_filter"
                      slot="end" />
    </FluentToolbar>
    <div class="property-grid-container">
        <FluentAccordion>
            <FluentAccordionItem Heading="Resource" Expanded="true">
                <FluentDataGrid Items="@FilteredSummaryValues"
                                ResizableColumns="true"
                                Style="width:100%"
                                GenerateHeader="GenerateHeaderOption.Sticky"
                                GridTemplateColumns="1fr 1.5fr">
                    <TemplateColumn Title="@Loc[nameof(ControlsStrings.NameColumnHeader)]" Class="nameColumn">
                        <GridValue Value="@context.Name" />
                    </TemplateColumn>
                    <TemplateColumn Title="@Loc[nameof(ControlsStrings.PropertyGridValueColumnHeader)]" Class="valueColumn">
                        <GridValue Value="@context.Value">
                            <ContentAfterValue>
                                @if (context.Type == SummaryValueType.State)
                                {
                                    <UnreadLogErrorsBadge UnviewedErrorCounts="UnviewedErrorCounts" Resource="@Resource" />
                                }
                            </ContentAfterValue>
                        </GridValue>
                    </TemplateColumn>
                </FluentDataGrid>
            </FluentAccordionItem>
            <FluentAccordionItem Heading="Endpoints" Expanded="true">
                <FluentDataGrid Items="@FilteredEndpoints"
                                ResizableColumns="true"
                                Style="width:100%"
                                GenerateHeader="GenerateHeaderOption.Sticky"
                                GridTemplateColumns="1fr 1.5fr">
                    <TemplateColumn Title="@Loc[nameof(ControlsStrings.NameColumnHeader)]" Class="nameColumn">
                        <GridValue Value="@context.Name" />
                    </TemplateColumn>
                    <TemplateColumn Title="@Loc[nameof(ControlsStrings.PropertyGridValueColumnHeader)]" Class="valueColumn">
                        <GridValue Value="@context.Address" MaxDisplayLength="0">
                            <ContentAfterValue>
                                @if (context.IsHttp)
                                {
                                    <a href="@context.Address" target="_blank">@context.Address</a>
                                }
                                else
                                {
                                    @context.Address
                                }
                            </ContentAfterValue>
                        </GridValue>
                    </TemplateColumn>
                </FluentDataGrid>
            </FluentAccordionItem>
            <FluentAccordionItem Heading="Environment variables">
                @if (FilteredItems.Count() > 0)
                {
                    <div slot="end">
                        <FluentBadge Appearance="Appearance.Accent"
                                     Circular="true">
                            @FilteredItems.Count()
                        </FluentBadge>
                    </div>
                }
                <PropertyGrid TItem="EnvironmentVariableViewModel"
                              Items="@FilteredItems"
                              NameColumnValue="(vm) => vm.Name"
                              ValueColumnValue="(vm) => vm.Value"
                              NameSort="_nameSort"
                              ValueSort="_valueSort"
                              EnableValueMasking="true"
                              GetIsItemMasked="(vm) => vm.IsValueMasked"
                              SetIsItemMasked="(vm, newValue) => vm.IsValueMasked = newValue"
                              IsMaskedChanged="@CheckAllMaskStates"
                              HighlightText="@_filter"
                              GridTemplateColumns="1fr 1.5fr" />
            </FluentAccordionItem>
        </FluentAccordion>
    </div>
</div>
