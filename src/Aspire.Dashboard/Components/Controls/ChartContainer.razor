@namespace Aspire.Dashboard.Components

@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Otlp.Model.MetricValues
@using Aspire.Dashboard.Resources
@inject IStringLocalizer<ControlsStrings> Loc

@if (_instrument is null)
{
    <div>@Loc[nameof(ControlsStrings.ChartContainerUnableToDisplay)]</div>
}
else
{
    <div class="metrics-chart">
        <div class="metrics-chart-header">
            <h3>@_instrument.Name</h3>
            <p>@_instrument.Description</p>
        </div>
        <div class="metrics-chart-container">
            <PlotlyChart InstrumentViewModel="_instrumentViewModel" Duration="Duration" />
            <div class="metrics-filters-container">
                @if (_viewModel.DimensionFilters.Count > 0)
                {
                    <div class="metrics-filters-section">
                        <h5>@Loc[nameof(ControlsStrings.ChartContainerFiltersHeader)]</h5>
                        <FluentDataGrid Items="@Queryable.AsQueryable(_viewModel.DimensionFilters)" GridTemplateColumns="200px 1fr auto" GenerateHeader="GenerateHeaderOption.None">
                            <ChildContent>
                                <PropertyColumn Tooltip="true" TooltipText="@(c => c.Name)" Property="@(c => c.Name)" />
                                <TemplateColumn Tooltip="true" TooltipText="@(c => c.SelectedValues.Count == 0 ? "(None)" : string.Join(", ", c.SelectedValues.Select(v => v.Name)))">
                                    <FluentOverflow Class="dimension-overflow">
                                        <ChildContent>
                                            @if (context.SelectedValues.Count == 0)
                                            {
                                                <FluentBadge>(None)</FluentBadge>
                                            }
                                            else
                                            {
                                                foreach (var item in context.SelectedValues.OrderBy(g => g.Name))
                                                {
                                                    <FluentOverflowItem @key=item>
                                                        <FluentBadge>@item.Name</FluentBadge>
                                                    </FluentOverflowItem>
                                                }
                                            }
                                        </ChildContent>
                                        <MoreButtonTemplate Context="another_name">
                                            <FluentBadge>
                                                @($"+{another_name.ItemsOverflow.Count()}")
                                            </FluentBadge>
                                        </MoreButtonTemplate>
                                    </FluentOverflow>
                                </TemplateColumn>
                                <TemplateColumn>
                                    <FluentButton id="@($"typeFilterButton-{context.SanitizedHtmlId}")"
                                                  IconEnd="@(new Icons.Regular.Size20.Filter())"
                                                  Appearance="@(context.AreAllValuesSelected is true ? Appearance.Stealth : Appearance.Accent)"
                                                  @onclick="() => context.PopupVisible = !context.PopupVisible"
                                                  aria-label="@(context.AreAllValuesSelected is true ? Loc[nameof(ControlsStrings.ChartContainerAllTags)] : Loc[nameof(ControlsStrings.ChartContainerFilteredTags)])" />
                                    <FluentPopover AnchorId="@($"typeFilterButton-{context.SanitizedHtmlId}")" @bind-Open="context.PopupVisible" VerticalThreshold="200">
                                        <Header>@context.Name</Header>
                                        <Body>
                                            <FluentStack Orientation="Orientation.Vertical" Class="dimension-popup">
                                                <FluentCheckbox Label="All"
                                                                ThreeState="true"
                                                                ShowIndeterminate="false"
                                                                ThreeStateOrderUncheckToIntermediate="true"
                                                                @bind-CheckState="context.AreAllValuesSelected" />
                                                @foreach (var tag in context.Values)
                                                {
                                                    var isChecked = context.SelectedValues.Contains(tag);
                                                    <FluentCheckbox Label="@tag.Name"
                                                                    title="@tag.Name"
                                                                    @key=tag
                                                                    @bind-Value:get="isChecked"
                                                                    @bind-Value:set="c => context.OnTagSelectionChanged(tag, c)" />
                                                }
                                            </FluentStack>
                                        </Body>
                                    </FluentPopover>
                                </TemplateColumn>
                            </ChildContent>
                        </FluentDataGrid>
                    </div>
                }
                @if (_instrument.Type == OtlpInstrumentType.Histogram)
                {
                    <div class="metrics-filters-section">
                        <h5>@Loc[nameof(ControlsStrings.ChartContainerOptionsHeader)]</h5>
                        <div>
                            <FluentSwitch Label="@Loc[nameof(ControlsStrings.ChartContainerShowCountLabel)]" @bind-Value="_showCount" @bind-Value:after="ShowCountChanged" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
