@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Resources
@inject IStringLocalizer<ControlsStrings> Loc

<div class="environment-variables-layout">

    <FluentToolbar Orientation="Orientation.Horizontal">
        @if (ShowSpecOnlyToggle)
        {
            <FluentButton Appearance="Appearance.Lightweight"
                          IconEnd="@(_showAll ? _showSpecOnlyIcon : _showAllIcon)"
                          Title="@(_showAll ? Loc[ControlsStrings.EnvironmentVariablesFilterToggleShowSpecOnly] : ControlsStrings.EnvironmentVariablesFilterToggleShowAll)"
                          aria-label="@(_showAll ? Loc[ControlsStrings.EnvironmentVariablesFilterToggleShowSpecOnly] : ControlsStrings.EnvironmentVariablesFilterToggleShowAll)"
                          OnClick="() => _showAll = !_showAll"
                          slot="end" />
        }
        <FluentButton Appearance="Appearance.Lightweight"
                      IconEnd="@(_defaultMasked ? _unmaskIcon : _maskIcon)"
                      Title="@(_defaultMasked ? Loc[ControlsStrings.EnvironmentVariablesShowVariableValues] : Loc[ControlsStrings.EnvironmentVariablesHideVariableValues])"
                      aria-label="@(_defaultMasked ? Loc[ControlsStrings.EnvironmentVariablesShowVariableValues] : Loc[ControlsStrings.EnvironmentVariablesHideVariableValues])"
                      OnClick="ToggleMaskState"
                      slot="end" />
        <FluentSearch Placeholder="@Loc[ControlsStrings.FilterPlaceholder]"
                      Immediate="true"
                      Autofocus="true"
                      @bind-Value="_filter"
                      @oninput="HandleFilter"
                      @bind-Value:after="HandleClear"
                      slot="end" />
    </FluentToolbar>
    <div class="property-grid-container">
        <PropertyGrid TItem="EnvironmentVariableViewModel"
                      Items="@FilteredItems"
                      NameColumnValue="(vm) => vm.Name"
                      ValueColumnValue="(vm) => vm.Value"
                      NameSort="_nameSort"
                      ValueSort="_valueSort"
                      EnableValueMasking="true"
                      GetIsItemMasked="(vm) => vm.IsValueMasked"
                      SetIsItemMasked="(vm, newValue) => vm.IsValueMasked = newValue"
                      IsMaskedChanged="@CheckAllMaskStates"
                      HighlightText="@_filter" />
    </div>
</div>
