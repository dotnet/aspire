@using Aspire.Dashboard.Model
@using Aspire.Dashboard.Otlp.Model
@using Aspire.Dashboard.Resources
@inject IStringLocalizer<ControlsStrings> Loc

<div class="span-details-layout">
    <FluentToolbar Orientation="Orientation.Horizontal">
        <div>
            @((MarkupString)string.Format(ControlsStrings.SpanDetailsService, ViewModel.Span.Source.ApplicationName))
        </div>
        <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
        <div>
            @((MarkupString)string.Format(ControlsStrings.SpanDetailsDuration, DurationFormatter.FormatDuration(ViewModel.Span.Duration)))
        </div>
        <FluentDivider Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
        <div>
            @((MarkupString)string.Format(ControlsStrings.SpanDetailsStartTime, DurationFormatter.FormatDuration(ViewModel.Span.StartTime - ViewModel.Span.Trace.FirstSpan.StartTime)))
        </div>
        <FluentAnchor slot="end" Appearance="Appearance.Lightweight" Href="@($"/structuredlogs?spanId={ViewModel.Span.SpanId}")">@Loc[nameof(ControlsStrings.ViewLogsLink)]</FluentAnchor>
        <FluentDivider slot="end" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
        <FluentSearch Placeholder="@Loc[nameof(ControlsStrings.FilterPlaceholder)]"
                      Immediate="true"
                      Autofocus="true"
                      @bind-Value="_filter"
                      slot="end" />
    </FluentToolbar>
    <div class="property-grid-container">
        <FluentAccordion>
            <FluentAccordionItem Heading="Span" Expanded="true">
                <div slot="end">
                    <FluentBadge Appearance="Appearance.Neutral"
                                 Circular="true">
                        @FilteredItems.Count()
                    </FluentBadge>
                </div>
                <PropertyGrid TItem="SpanPropertyViewModel"
                              Items="@FilteredItems"
                              GridTemplateColumns="1fr 2fr"
                              NameColumnValue="(vm) => vm.Name"
                              ValueColumnValue="(vm) => vm.Value"
                              NameSort="_nameSort"
                              ValueSort="_valueSort"
                              HighlightText="@_filter" />
            </FluentAccordionItem>
            <FluentAccordionItem Heading="Application" Expanded="true">
                <div slot="end">
                    <FluentBadge Appearance="Appearance.Neutral"
                                 Circular="true">
                        @FilteredApplicationItems.Count()
                    </FluentBadge>
                </div>
                <PropertyGrid TItem="SpanPropertyViewModel"
                              Items="@FilteredApplicationItems"
                              GridTemplateColumns="1fr 2fr"
                              NameColumnValue="(vm) => vm.Name"
                              ValueColumnValue="(vm) => vm.Value"
                              NameSort="_nameSort"
                              ValueSort="_valueSort"
                              HighlightText="@_filter" />
            </FluentAccordionItem>
            <FluentAccordionItem Heading="Events" Expanded="true">
                <div slot="end">
                    <FluentBadge Appearance="Appearance.Neutral"
                                 Circular="true">
                        @FilteredSpanEvents.Count()
                    </FluentBadge>
                </div>
                <PropertyGrid TItem="OtlpSpanEvent"
                              Items="@FilteredSpanEvents"
                              GridTemplateColumns="1fr 2fr"
                              NameColumnValue="(vm) => DurationFormatter.FormatDuration(vm.TimeOffset(ViewModel.Span))"
                              NameColumnTitle="@(Loc[nameof(ControlsStrings.TimeOffsetColumnHeader)])"
                              ValueColumnValue="(vm) => vm.Name"
                              ValueColumnTitle="@(Loc[nameof(ControlsStrings.EventColumnHeader)])"
                              IsNameSortable="false"
                              IsValueSortable="false"
                              HighlightText="@_filter">
                    <ExtraValueContent>
                        @if (context.Attributes.Length > 0)
                        {
                            <div class="event-attributes-header">Attributes</div>
                            <PropertyGrid TItem="SpanPropertyViewModel"
                                Items="@Queryable.AsQueryable(context.Attributes.Select(a => new SpanPropertyViewModel() { Name = a.Key, Value = a.Value }))"
                                GridTemplateColumns="1fr 2fr"
                                NameColumnValue="(vm) => vm.Name"
                                ValueColumnValue="(vm) => vm.Value"
                                IsNameSortable="false"
                                IsValueSortable="false" />
                        }
                    </ExtraValueContent>
                </PropertyGrid>
            </FluentAccordionItem>
        </FluentAccordion>
    </div>
</div>
