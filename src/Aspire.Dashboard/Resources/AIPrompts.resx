<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PromptAnalyzeLogEntry" xml:space="preserve">
    <value>Analyze log entry `log_id: {0}`</value>
    <comment>{0} is a log id. Don't translate log_id</comment>
  </data>
  <data name="PromptAnalyzeResource" xml:space="preserve">
    <value>Analyze resource `{0}`</value>
    <comment>{0} is a resource name</comment>
  </data>
  <data name="PromptAnalyzeResourcePerformance" xml:space="preserve">
    <value>Analyze performance for `{0}`</value>
    <comment>{0} is a resource name</comment>
  </data>
  <data name="PromptAnalyzeResources" xml:space="preserve">
    <value>Explain the current state of my app's resources</value>
  </data>
  <data name="PromptAnalyzeStructuredLogs" xml:space="preserve">
    <value>Get structured logs for all resources</value>
  </data>
  <data name="PromptConsoleLogs" xml:space="preserve">
    <value>Get console logs for all resources</value>
  </data>
  <data name="PromptErrorsStructuredLogs" xml:space="preserve">
    <value>Analyze structured log errors</value>
  </data>
  <data name="PromptResourceConsoleLogs" xml:space="preserve">
    <value>Get console logs for `{0}`</value>
    <comment>{0} is a resource name</comment>
  </data>
  <data name="PromptResourceStructuredLogs" xml:space="preserve">
    <value>Get structured logs for `{0}`</value>
    <comment>{0} is a resource name</comment>
  </data>
  <data name="PromptResourceTracesAndStructuredLogs" xml:space="preserve">
    <value>Get traces and structured logs for `{0}`</value>
    <comment>{0} is a resource name</comment>
  </data>
  <data name="PromptUnhealthyResources" xml:space="preserve">
    <value>Check that all resources are in a healthy state</value>
  </data>
  <data name="TitleExplainErrors" xml:space="preserve">
    <value>Explain errors</value>
  </data>
  <data name="TitleInvestigate" xml:space="preserve">
    <value>Investigate</value>
  </data>
  <data name="TitleInvestigateUnhealthyResources" xml:space="preserve">
    <value>Investigate unhealthy resources</value>
  </data>
  <data name="TitlePerformance" xml:space="preserve">
    <value>Performance</value>
  </data>
  <data name="TitleRecentActivity" xml:space="preserve">
    <value>Recent activity</value>
  </data>
  <data name="TitleRecentConsoleLogs" xml:space="preserve">
    <value>Recent console logs</value>
  </data>
  <data name="TitleSummarizeResources" xml:space="preserve">
    <value>Summarize resources</value>
  </data>
  <data name="PromptTracesAndStructuredLogs" xml:space="preserve">
    <value>Get traces and structured logs</value>
  </data>
  <data name="PromptTraces" xml:space="preserve">
    <value>Get distributed traces for all resources</value>
  </data>
  <data name="PromptErrorTraces" xml:space="preserve">
    <value>Analyze distributed trace errors</value>
  </data>
  <data name="PromptResourceTraces" xml:space="preserve">
    <value>Get distributed traces for `{0}`</value>
    <comment>{0} is a resource name</comment>
  </data>
  <data name="PromptAnalyzeTrace" xml:space="preserve">
    <value>Analyze distributed trace `trace_id: {0}`</value>
    <comment>{0} is a trace id. Don't translate trace_id</comment>
  </data>
  <data name="PromptAnalyzeSpan" xml:space="preserve">
    <value>Analyze span `{0}`</value>
    <comment>{0} is a span id</comment>
  </data>
  <data name="PromptHelpResources" xml:space="preserve">
    <value>Describe using resources</value>
  </data>
  <data name="TitleHelp" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="PromptHelpStructuredLogs" xml:space="preserve">
    <value>Describe using structured logs</value>
  </data>
  <data name="PromptHelpTraces" xml:space="preserve">
    <value>Describe using distributed traces</value>
  </data>
  <data name="PromptAnalyzePerformance" xml:space="preserve">
    <value>Analyze performance</value>
  </data>
  <data name="PromptHelpConsoleLogs" xml:space="preserve">
    <value>Describe using console logs</value>
  </data>
</root>