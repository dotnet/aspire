//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class DockerComposePublisherExtensions
    {
        public static IDistributedApplicationBuilder AddDockerComposePublisher(this IDistributedApplicationBuilder builder, System.Action<Docker.DockerComposePublisherOptions>? configureOptions = null) { throw null; }

        public static IDistributedApplicationBuilder AddDockerComposePublisher(this IDistributedApplicationBuilder builder, string name, System.Action<Docker.DockerComposePublisherOptions>? configureOptions = null) { throw null; }
    }
}

namespace Aspire.Hosting.Docker
{
    public sealed partial class DockerComposePublisherOptions : Publishing.PublishingOptions
    {
        public string? DefaultContainerRegistry { get { throw null; } set { } }

        public string? ExistingNetworkName { get { throw null; } set { } }
    }
}

namespace Aspire.Hosting.Docker.Resources
{
    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class ComposeFile
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "configs", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, ComposeNodes.Config> Configs { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "extensions", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, object> Extensions { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "name")]
        public string? Name { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "networks", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, ComposeNodes.Network> Networks { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "secrets", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, ComposeNodes.Secret> Secrets { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "services", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, ComposeNodes.Service> Services { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "version")]
        public string? Version { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "volumes", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, ServiceNodes.Volume> Volumes { get { throw null; } set { } }

        public ComposeFile AddNetwork(ComposeNodes.Network network) { throw null; }

        public ComposeFile AddService(ComposeNodes.Service service) { throw null; }

        public ComposeFile AddVolume(ServiceNodes.Volume volume) { throw null; }

        public string ToYaml(string lineEndings = "\n") { throw null; }
    }
}

namespace Aspire.Hosting.Docker.Resources.ComposeNodes
{
    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Config
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "external")]
        public bool? External { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "file")]
        public string? File { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "labels", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Labels { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "name")]
        public string? Name { get { throw null; } set { } }
    }

    public abstract partial class NamedComposeMember
    {
        [YamlDotNet.Serialization.YamlIgnore]
        public required string Name { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Network : NamedComposeMember
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "attachable")]
        public bool? Attachable { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "driver")]
        public string? Driver { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "driver_opts", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> DriverOpts { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "external")]
        public bool? External { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "ingress")]
        public bool? Ingress { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "internal")]
        public bool? Internal { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "ipam")]
        public ServiceNodes.Ipam? Ipam { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "labels", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Labels { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Secret
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "external")]
        public bool? External { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "file")]
        public string? File { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "labels", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Labels { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "name")]
        public string? Name { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Service : NamedComposeMember
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "build")]
        public ServiceNodes.Build? Build { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "cap_add", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> CapAdd { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "cap_drop", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> CapDrop { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "cgroup_parent")]
        public string? CgroupParent { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "command", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Command { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "configs", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<ServiceNodes.ConfigReference> Configs { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "container_name")]
        public string? ContainerName { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "depends_on", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, ServiceDependency> DependsOn { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "deploy")]
        public ServiceNodes.Swarm.Deploy? Deploy { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "devices", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Devices { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "dns", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Dns { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "dns_search", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> DnsSearch { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "domainname")]
        public string? DomainName { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "entrypoint", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Entrypoint { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "env_file", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> EnvFile { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "environment", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Environment { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "expose", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Expose { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "external_links", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> ExternalLinks { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "extra_hosts", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> ExtraHosts { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "group_add", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> GroupAdd { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "healthcheck")]
        public ServiceNodes.Healthcheck? Healthcheck { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "hostname")]
        public string? Hostname { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "image")]
        public string? Image { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "init")]
        public bool? Init { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "ipc")]
        public string? Ipc { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "isolation")]
        public string? Isolation { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "labels", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Labels { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "links", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Links { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "logging")]
        public ServiceNodes.Logging? Logging { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "mac_address")]
        public string? MacAddress { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "network_mode")]
        public string? NetworkMode { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "networks", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Networks { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "pid")]
        public string? Pid { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "ports", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Ports { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "profiles", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Profiles { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "read_only")]
        public bool? ReadOnly { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "restart")]
        public string? Restart { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "secrets", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<ServiceNodes.SecretReference> Secrets { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "security_opt", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> SecurityOpt { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "stdin_open")]
        public bool? StdinOpen { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "stop_grace_period")]
        public string? StopGracePeriod { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "stop_signal")]
        public string? StopSignal { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "sysctls", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Sysctls { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "tmpfs", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Tmpfs { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "tty")]
        public bool? Tty { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "ulimits", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, ServiceNodes.Ulimit> Ulimits { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "user")]
        public string? User { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "volumes", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<ServiceNodes.Volume> Volumes { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "working_dir")]
        public string? WorkingDir { get { throw null; } set { } }

        public Service AddEnvironmentalVariable(string key, string? value) { throw null; }

        public Service AddVolume(ServiceNodes.Volume volume) { throw null; }

        public Service AddVolumes(System.Collections.Generic.IEnumerable<ServiceNodes.Volume> volumes) { throw null; }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class ServiceDependency
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "condition")]
        public string? Condition { get { throw null; } set { } }
    }
}

namespace Aspire.Hosting.Docker.Resources.ServiceNodes
{
    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Build
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "args", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Args { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "cache_from", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> CacheFrom { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "context")]
        public string? Context { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "dockerfile")]
        public string? Dockerfile { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "labels", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Labels { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "target")]
        public string? Target { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class ConfigReference
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "gid")]
        public int? Gid { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "mode")]
        public int? Mode { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "source")]
        public string? Source { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "target")]
        public string? Target { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "uid")]
        public int? Uid { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Healthcheck
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "interval")]
        public required string Interval { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "retries")]
        public int? Retries { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "start_period")]
        public required string StartPeriod { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "test", ScalarStyle = YamlDotNet.Core.ScalarStyle.Folded, DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<string> Test { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "timeout")]
        public required string Timeout { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Ipam
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "config", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Config { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "driver")]
        public string? Driver { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "options", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Options { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Logging
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "driver")]
        public string? Driver { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "options", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Options { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class SecretReference
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "gid")]
        public int? Gid { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "mode")]
        public int? Mode { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "source")]
        public string? Source { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "target")]
        public string? Target { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "uid")]
        public int? Uid { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Ulimit
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "hard")]
        public int? Hard { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "soft")]
        public int? Soft { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Volume : ComposeNodes.NamedComposeMember
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "driver")]
        public string? Driver { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "driver_opts", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> DriverOpts { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "external")]
        public bool? External { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "labels", DefaultValuesHandling = YamlDotNet.Serialization.DefaultValuesHandling.OmitEmptyCollections)]
        public System.Collections.Generic.Dictionary<string, string> Labels { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "read_only")]
        public bool? ReadOnly { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "source")]
        public string? Source { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "target")]
        public string? Target { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "type")]
        public string? Type { get { throw null; } set { } }
    }
}

namespace Aspire.Hosting.Docker.Resources.ServiceNodes.Swarm
{
    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Deploy
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "labels")]
        public LabelSpecs? Labels { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "mode")]
        public string? Mode { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "placement")]
        public Placement? Placement { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "replicas")]
        public int? Replicas { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "resources")]
        public Resources? Resources { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "restart_policy")]
        public RestartPolicy? RestartPolicy { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "update_config")]
        public UpdateConfig? UpdateConfig { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class LabelSpecs
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "additional_labels")]
        public System.Collections.Generic.Dictionary<string, string> AdditionalLabels { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Placement
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "constraints")]
        public System.Collections.Generic.List<string>? Constraints { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "preferences")]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>>? Preferences { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class Resources
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "limits")]
        public ResourceSpec? Limits { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "reservations")]
        public ResourceSpec? Reservations { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class ResourceSpec
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "cpus")]
        public string? Cpus { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "memory")]
        public string? Memory { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class RestartPolicy
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "condition")]
        public string? Condition { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "delay")]
        public string? Delay { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "max_attempts")]
        public int? MaxAttempts { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "window")]
        public string? Window { get { throw null; } set { } }
    }

    [YamlDotNet.Serialization.YamlSerializable]
    public sealed partial class UpdateConfig
    {
        [YamlDotNet.Serialization.YamlMember(Alias = "delay")]
        public string? Delay { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "failure_action")]
        public bool? FailOnError { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "max_failure_ratio")]
        public string? MaxFailureRatio { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "monitor")]
        public string? Monitor { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "order")]
        public string? Order { get { throw null; } set { } }

        [YamlDotNet.Serialization.YamlMember(Alias = "parallelism")]
        public string? Parallelism { get { throw null; } set { } }
    }
}