//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class MongoDBBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBDatabaseResource> AddDatabase(this ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> builder, string name, string? databaseName = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> AddMongoDB(this IDistributedApplicationBuilder builder, string name, int? port = null, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? userName = null, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? password = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> AddMongoDB(this IDistributedApplicationBuilder builder, string name, int? port) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> WithDataBindMount(this ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> builder, string source, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> WithDataVolume(this ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> builder, string? name = null, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<MongoDB.MongoExpressContainerResource> WithHostPort(this ApplicationModel.IResourceBuilder<MongoDB.MongoExpressContainerResource> builder, int? port) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> WithInitBindMount(this ApplicationModel.IResourceBuilder<ApplicationModel.MongoDBServerResource> builder, string source, bool isReadOnly = true) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithMongoExpress<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.IResourceBuilder<MongoDB.MongoExpressContainerResource>>? configureContainer = null, string? containerName = null)
            where T : ApplicationModel.MongoDBServerResource { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class MongoDBDatabaseResource : Resource, IResourceWithParent<MongoDBServerResource>, IResourceWithParent, IResource, IResourceWithConnectionString, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public MongoDBDatabaseResource(string name, string databaseName, MongoDBServerResource parent) : base(default!) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public string DatabaseName { get { throw null; } }

        public MongoDBServerResource Parent { get { throw null; } }
    }

    public partial class MongoDBServerResource : ContainerResource, IResourceWithConnectionString, IResource, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public MongoDBServerResource(string name, ParameterResource? userNameParameter, ParameterResource? passwordParameter) : base(default!, default) { }

        public MongoDBServerResource(string name) : base(default!, default) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public System.Collections.Generic.IReadOnlyDictionary<string, string> Databases { get { throw null; } }

        public ParameterResource? PasswordParameter { get { throw null; } }

        public EndpointReference PrimaryEndpoint { get { throw null; } }

        public ParameterResource? UserNameParameter { get { throw null; } }
    }
}

namespace Aspire.Hosting.MongoDB
{
    public sealed partial class MongoExpressContainerResource : ApplicationModel.ContainerResource
    {
        public MongoExpressContainerResource(string name) : base(default!, default) { }
    }
}