//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class RedisBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> AddRedis(this IDistributedApplicationBuilder builder, string name, int? port = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> WithDataBindMount(this ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> builder, string source, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<Redis.RedisInsightResource> WithDataBindMount(this ApplicationModel.IResourceBuilder<Redis.RedisInsightResource> builder, string source) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> WithDataVolume(this ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> builder, string? name = null, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<Redis.RedisInsightResource> WithDataVolume(this ApplicationModel.IResourceBuilder<Redis.RedisInsightResource> builder, string? name = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<Redis.RedisCommanderResource> WithHostPort(this ApplicationModel.IResourceBuilder<Redis.RedisCommanderResource> builder, int? port) { throw null; }

        public static ApplicationModel.IResourceBuilder<Redis.RedisInsightResource> WithHostPort(this ApplicationModel.IResourceBuilder<Redis.RedisInsightResource> builder, int? port) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> WithPersistence(this ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> builder, System.TimeSpan? interval = null, long keysChangedThreshold = 1) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> WithRedisCommander(this ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> builder, System.Action<ApplicationModel.IResourceBuilder<Redis.RedisCommanderResource>>? configureContainer = null, string? containerName = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> WithRedisInsight(this ApplicationModel.IResourceBuilder<ApplicationModel.RedisResource> builder, System.Action<ApplicationModel.IResourceBuilder<Redis.RedisInsightResource>>? configureContainer = null, string? containerName = null) { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class RedisResource : ContainerResource, IResourceWithConnectionString, IResource, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public RedisResource(string name) : base(default!, default) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public EndpointReference PrimaryEndpoint { get { throw null; } }

        public System.Threading.Tasks.ValueTask<string?> GetConnectionStringAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }
}

namespace Aspire.Hosting.Redis
{
    public partial class RedisCommanderResource : ApplicationModel.ContainerResource
    {
        public RedisCommanderResource(string name) : base(default!, default) { }
    }

    public partial class RedisInsightResource : ApplicationModel.ContainerResource
    {
        public RedisInsightResource(string name) : base(default!, default) { }

        public ApplicationModel.EndpointReference PrimaryEndpoint { get { throw null; } }
    }
}