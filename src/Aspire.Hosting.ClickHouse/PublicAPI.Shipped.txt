#nullable enable
Aspire.Hosting.ApplicationModel.ClickHouseDatabaseResource
Aspire.Hosting.ApplicationModel.ClickHouseDatabaseResource.ConnectionStringExpression.get -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
Aspire.Hosting.ApplicationModel.ClickHouseDatabaseResource.DatabaseName.get -> string!
Aspire.Hosting.ApplicationModel.ClickHouseDatabaseResource.Parent.get -> Aspire.Hosting.ApplicationModel.ClickHouseServerResource!
Aspire.Hosting.ApplicationModel.ClickHouseDatabaseResource.ClickHouseDatabaseResource(string! name, string! databaseName, Aspire.Hosting.ApplicationModel.ClickHouseServerResource! clickHouseParentResource) -> void
Aspire.Hosting.ApplicationModel.ClickHouseServerResource
Aspire.Hosting.ApplicationModel.ClickHouseServerResource.ConnectionStringExpression.get -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
Aspire.Hosting.ApplicationModel.ClickHouseServerResource.Databases.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
Aspire.Hosting.ApplicationModel.ClickHouseServerResource.PasswordParameter.get -> Aspire.Hosting.ApplicationModel.ParameterResource!
Aspire.Hosting.ApplicationModel.ClickHouseServerResource.ClickHouseServerResource(string! name, Aspire.Hosting.ApplicationModel.ParameterResource? userName, Aspire.Hosting.ApplicationModel.ParameterResource! password) -> void
Aspire.Hosting.ApplicationModel.ClickHouseServerResource.PrimaryEndpoint.get -> Aspire.Hosting.ApplicationModel.EndpointReference!
Aspire.Hosting.ApplicationModel.ClickHouseServerResource.UserNameParameter.get -> Aspire.Hosting.ApplicationModel.ParameterResource?
Aspire.Hosting.ClickHouseBuilderExtensions
static Aspire.Hosting.ClickHouseBuilderExtensions.AddDatabase(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseServerResource!>! builder, string! name, string? databaseName = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseDatabaseResource!>!
static Aspire.Hosting.ClickHouseBuilderExtensions.AddClickHouse(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>? userName = null, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>? password = null, int? port = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseServerResource!>!
static Aspire.Hosting.ClickHouseBuilderExtensions.WithDataBindMount(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseServerResource!>! builder, string! source, bool isReadOnly = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseServerResource!>!
static Aspire.Hosting.ClickHouseBuilderExtensions.WithDataVolume(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseServerResource!>! builder, string? name = null, bool isReadOnly = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseServerResource!>!
static Aspire.Hosting.ClickHouseBuilderExtensions.WithInitBindMount(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseServerResource!>! builder, string! source, bool isReadOnly = true) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ClickHouseServerResource!>!
