//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class PostgresBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.PostgresDatabaseResource> AddDatabase(this ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> builder, string name, string? databaseName = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> AddPostgres(this IDistributedApplicationBuilder builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? userName = null, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? password = null, int? port = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.PostgresDatabaseResource> WithCreationScript(this ApplicationModel.IResourceBuilder<ApplicationModel.PostgresDatabaseResource> builder, string script) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> WithDataBindMount(this ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> builder, string source, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> WithDataVolume(this ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> builder, string? name = null, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<Postgres.PgAdminContainerResource> WithHostPort(this ApplicationModel.IResourceBuilder<Postgres.PgAdminContainerResource> builder, int? port) { throw null; }

        public static ApplicationModel.IResourceBuilder<Postgres.PgWebContainerResource> WithHostPort(this ApplicationModel.IResourceBuilder<Postgres.PgWebContainerResource> builder, int? port) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> WithInitBindMount(this ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> builder, string source, bool isReadOnly = true) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithPgAdmin<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.IResourceBuilder<Postgres.PgAdminContainerResource>>? configureContainer = null, string? containerName = null)
            where T : ApplicationModel.PostgresServerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> WithPgWeb(this ApplicationModel.IResourceBuilder<ApplicationModel.PostgresServerResource> builder, System.Action<ApplicationModel.IResourceBuilder<Postgres.PgWebContainerResource>>? configureContainer = null, string? containerName = null) { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class PostgresDatabaseResource : Resource, IResourceWithParent<PostgresServerResource>, IResourceWithParent, IResource, IResourceWithConnectionString, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public PostgresDatabaseResource(string name, string databaseName, PostgresServerResource postgresParentResource) : base(default!) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public string DatabaseName { get { throw null; } }

        public PostgresServerResource Parent { get { throw null; } }
    }

    public partial class PostgresServerResource : ContainerResource, IResourceWithConnectionString, IResource, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public PostgresServerResource(string name, ParameterResource? userName, ParameterResource password) : base(default!, default) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public System.Collections.Generic.IReadOnlyDictionary<string, string> Databases { get { throw null; } }

        public ParameterResource PasswordParameter { get { throw null; } set { } }

        public EndpointReference PrimaryEndpoint { get { throw null; } }

        public ParameterResource? UserNameParameter { get { throw null; } set { } }

        public System.Threading.Tasks.ValueTask<string?> GetConnectionStringAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }
}

namespace Aspire.Hosting.Postgres
{
    public sealed partial class PgAdminContainerResource : ApplicationModel.ContainerResource
    {
        public PgAdminContainerResource(string name) : base(default!, default) { }
    }

    public sealed partial class PgWebContainerResource : ApplicationModel.ContainerResource
    {
        public PgWebContainerResource(string name) : base(default!, default) { }

        public ApplicationModel.EndpointReference PrimaryEndpoint { get { throw null; } }
    }
}