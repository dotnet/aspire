<Project>

  <Import Project="..\..\Directory.Build.targets" />

  <!--
  Logic for including the ConfigurationSchema.json file and corresponding
  PackageId.targets file which brings the ConfigurationSchema.json file into the Json Schema.
  -->
  <PropertyGroup>
    <ConfigurationSchemaPath>$(MSBuildProjectDirectory)\ConfigurationSchema.json</ConfigurationSchemaPath>
    <ConfigurationSchemaExists Condition="Exists('$(ConfigurationSchemaPath)')">true</ConfigurationSchemaExists>
    <Features Condition="'$(EnableConfigurationBindingGenerator)' == 'true'">$(Features);InterceptorsPreview</Features>
    <!-- AspNetCore.HealthChecks packages are unsigned, we ignore that warning on purpose  -->
    <NoWarn>$(NoWarn);CS8002</NoWarn>

    <TargetsTriggeredByCompilation Condition="'$(DesignTimeBuild)' != 'true'">$(TargetsTriggeredByCompilation);GenerateConfigurationSchema</TargetsTriggeredByCompilation>
  </PropertyGroup>

  <ItemGroup Condition="'$(ConfigurationSchemaExists)' == 'true'">
    <None Include="$(ConfigurationSchemaPath)"
          Pack="True"
          PackagePath="ConfigurationSchema.json" />
  </ItemGroup>

  <ItemGroup>
    <!-- ensure the config generator is built -->
    <ProjectReference Include="$(MSBuildThisFileDirectory)..\Tools\ConfigurationSchemaGenerator\ConfigurationSchemaGenerator.csproj"
                      SetTargetFramework="TargetFramework=$(NetCurrent)"
                      OutputItemType="_ReferencedExecutable"
                      Private="false"
                      ReferenceOutputAssembly="false" />
  </ItemGroup>

  <PropertyGroup Condition="'$(ConfigurationSchemaExists)' == 'true'">
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);AddPackageTargetsInPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <Target Name="AddPackageTargetsInPackage">
    <ItemGroup>
      <TfmSpecificPackageFile Include="$(MSBuildThisFileDirectory)Common\Package.targets"
                              PackagePath="buildTransitive\$(TargetFramework)\$(PackageId).targets" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <ConfigurationSchemaGeneratorPath>$(ArtifactsBinDir)ConfigurationSchemaGenerator\$(Configuration)\$(NetCurrent)\ConfigurationSchemaGenerator.dll</ConfigurationSchemaGeneratorPath>

    <ConfigurationSchemaGeneratorRspPath>$(IntermediateOutputPath)$(AsemblyName).configschema.rsp</ConfigurationSchemaGeneratorRspPath>
    <GeneratedConfigurationSchemaOutputPath>$(IntermediateOutputPath)ConfigurationSchema.json</GeneratedConfigurationSchemaOutputPath>
  </PropertyGroup>
  
  <Target Name="GenerateConfigurationSchema"
          DependsOnTargets="CoreGenerateConfigurationSchema;
                            CopyNewConfigurationSchema;
                            CompareConfigurationSchema" />
  
  <Target Name="WriteConfigurationSchemaGeneratorRspFile">
    <PropertyGroup>
      <ConfigSchemaInput>"@(IntermediateAssembly)"</ConfigSchemaInput>
      <ConfigSchemaReferences>"@(ReferencePathWithRefAssemblies, '" "')"</ConfigSchemaReferences>
      <ConfigSchemaOutput>"$(GeneratedConfigurationSchemaOutputPath)"</ConfigSchemaOutput>
    </PropertyGroup>

    <ItemGroup>
      <ConfigSchemaGenArg Include="--input $(ConfigSchemaInput)" />
      <ConfigSchemaGenArg Include="--reference $(ConfigSchemaReferences)" />
      <ConfigSchemaGenArg Include="--output $(ConfigSchemaOutput)" />
    </ItemGroup>

    <WriteLinesToFile File="$(ConfigurationSchemaGeneratorRspPath)"
                      Lines="@(ConfigSchemaGenArg)"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />
  </Target>

  <Target Name="CoreGenerateConfigurationSchema"
          DependsOnTargets="WriteConfigurationSchemaGeneratorRspFile"
          Inputs="$(ConfigurationSchemaGeneratorPath);
                  @(IntermediateAssembly);
                  @(ReferencePathWithRefAssemblies)"
          Outputs="$(GeneratedConfigurationSchemaOutputPath)">
    <PropertyGroup>

      <GeneratorCommandLine>"$(DotNetTool)" exec $(ConfigurationSchemaGeneratorPath)</GeneratorCommandLine>
      <GeneratorCommandLine>$(GeneratorCommandLine) @$(ConfigurationSchemaGeneratorRspPath)</GeneratorCommandLine>
    </PropertyGroup>
    
    <Exec Command="$(GeneratorCommandLine)" />

    <ItemGroup>
      <FileWrites Include="$(GeneratedConfigurationSchemaOutputPath)" Condition="Exists('$(GeneratedConfigurationSchemaOutputPath)')"/>
    </ItemGroup>
  </Target>

  <Target Name="CopyNewConfigurationSchema"
          Condition="'$(ConfigurationSchemaExists)' != 'true' OR '$(UpdateConfigurationSchema)' == 'true'">

    <Copy SourceFiles="$(GeneratedConfigurationSchemaOutputPath)"
          DestinationFiles="$(ConfigurationSchemaPath)" />

  </Target>

  <Target Name="CompareConfigurationSchema"
          Condition="Exists('$(ConfigurationSchemaPath)') AND Exists('GeneratedConfigurationSchemaOutputPath')">

    <PropertyGroup>
      <CurrentConfigurationSchemaFileContent>$([System.IO.File]::ReadAllText('$(ConfigurationSchemaPath)'))</CurrentConfigurationSchemaFileContent>
      <GeneratedConfigurationSchemaFileContent>$([System.IO.File]::ReadAllText('$(GeneratedConfigurationSchemaOutputPath)'))</GeneratedConfigurationSchemaFileContent>
    </PropertyGroup>

    <Error Condition="'$(CurrentConfigurationSchemaFileContent)' != '$(GeneratedConfigurationSchemaFileContent)'"
           Text="ConfigurationSchema.json is out of date. Run 'dotnet build --no-incremental /p:UpdateConfigurationSchema=true' to update it." />
  </Target>

</Project>
