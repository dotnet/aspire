//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aspire.Cli.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExecCommandStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExecCommandStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Aspire.Cli.Resources.ExecCommandStrings", typeof(ExecCommandStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command to execute in the target resource&apos;s context. Commands can be specified directly after options or after a -- separator..
        /// </summary>
        internal static string CommandArgumentDescription {
            get {
                return ResourceManager.GetString("CommandArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute commands in the context of an Aspire application resource. Starts the AppHost, waits for resources to initialize, then runs the specified command in the target resource&apos;s environment. (Preview)
        ///
        ///Examples:
        ///  aspire exec --resource api dotnet build
        ///  aspire exec --resource api -- dotnet test --logger console
        ///  aspire exec --start-resource worker pwsh -c &quot;Get-Process&quot;
        ///    .
        /// </summary>
        internal static string Description {
            get {
                return ResourceManager.GetString("Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to parse the command. Ensure the command is specified after all options or after the -- separator..
        /// </summary>
        internal static string FailedToParseCommand {
            get {
                return ResourceManager.GetString("FailedToParseCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command is not specified..
        /// </summary>
        internal static string NoCommandSpecified {
            get {
                return ResourceManager.GetString("NoCommandSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to the Aspire AppHost project file. If not specified, searches for a project file in the current directory..
        /// </summary>
        internal static string ProjectArgumentDescription {
            get {
                return ResourceManager.GetString("ProjectArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running exec....
        /// </summary>
        internal static string Running {
            get {
                return ResourceManager.GetString("Running", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the target resource to execute the command against. The command will only be executed after the target resource has successfully started and is running..
        /// </summary>
        internal static string StartTargetResourceArgumentDescription {
            get {
                return ResourceManager.GetString("StartTargetResourceArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stopping app host....
        /// </summary>
        internal static string StoppingAppHost {
            get {
                return ResourceManager.GetString("StoppingAppHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the target resource to execute the command against. The command will be executed as soon as the AppHost starts, without waiting for the resource to be ready..
        /// </summary>
        internal static string TargetResourceArgumentDescription {
            get {
                return ResourceManager.GetString("TargetResourceArgumentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target resource is not specified. Use --resource or --start-resource to specify the target..
        /// </summary>
        internal static string TargetResourceNotSpecified {
            get {
                return ResourceManager.GetString("TargetResourceNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The working directory to execute command in..
        /// </summary>
        internal static string WorkdirArgumentDescription {
            get {
                return ResourceManager.GetString("WorkdirArgumentDescription", resourceCulture);
            }
        }
    }
}
