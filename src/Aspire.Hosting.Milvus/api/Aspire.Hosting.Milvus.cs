//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class MilvusBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.MilvusDatabaseResource> AddDatabase(this ApplicationModel.IResourceBuilder<Milvus.MilvusServerResource> builder, string name, string? databaseName = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<Milvus.MilvusServerResource> AddMilvus(this IDistributedApplicationBuilder builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? apiKey = null, int? grpcPort = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithAttu<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.IResourceBuilder<Milvus.AttuResource>>? configureContainer = null, string? containerName = null)
            where T : Milvus.MilvusServerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<Milvus.MilvusServerResource> WithConfigurationBindMount(this ApplicationModel.IResourceBuilder<Milvus.MilvusServerResource> builder, string configurationFilePath) { throw null; }

        public static ApplicationModel.IResourceBuilder<Milvus.MilvusServerResource> WithDataBindMount(this ApplicationModel.IResourceBuilder<Milvus.MilvusServerResource> builder, string source, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<Milvus.MilvusServerResource> WithDataVolume(this ApplicationModel.IResourceBuilder<Milvus.MilvusServerResource> builder, string? name = null, bool isReadOnly = false) { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class MilvusDatabaseResource : Resource, IResourceWithParent<Milvus.MilvusServerResource>, IResourceWithParent, IResource, IResourceWithConnectionString, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public MilvusDatabaseResource(string name, string databaseName, Milvus.MilvusServerResource parent) : base(default!) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public string DatabaseName { get { throw null; } }

        public Milvus.MilvusServerResource Parent { get { throw null; } }
    }
}

namespace Aspire.Hosting.Milvus
{
    public partial class AttuResource : ApplicationModel.ContainerResource
    {
        public AttuResource(string name) : base(default!, default) { }
    }

    public partial class MilvusServerResource : ApplicationModel.ContainerResource, ApplicationModel.IResourceWithConnectionString, ApplicationModel.IResource, ApplicationModel.IManifestExpressionProvider, ApplicationModel.IValueProvider, ApplicationModel.IValueWithReferences
    {
        public MilvusServerResource(string name, ApplicationModel.ParameterResource apiKey) : base(default!, default) { }

        public ApplicationModel.ParameterResource ApiKeyParameter { get { throw null; } }

        public ApplicationModel.ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public System.Collections.Generic.IReadOnlyDictionary<string, string> Databases { get { throw null; } }

        public ApplicationModel.EndpointReference PrimaryEndpoint { get { throw null; } }
    }
}