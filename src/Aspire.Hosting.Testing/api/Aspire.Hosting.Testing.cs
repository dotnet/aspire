//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting.Testing
{
    public partial class DistributedApplicationFactory : System.IDisposable, System.IAsyncDisposable
    {
        public DistributedApplicationFactory(System.Type entryPoint, string[] args) { }

        public DistributedApplicationFactory(System.Type entryPoint) { }

        public System.Net.Http.HttpClient CreateHttpClient(string resourceName, string? endpointName = null) { throw null; }

        public virtual void Dispose() { }

        public virtual System.Threading.Tasks.ValueTask DisposeAsync() { throw null; }

        public System.Threading.Tasks.ValueTask<string?> GetConnectionString(string resourceName) { throw null; }

        public System.Uri GetEndpoint(string resourceName, string? endpointName = null) { throw null; }

        protected virtual void OnBuilderCreated(DistributedApplicationBuilder applicationBuilder) { }

        protected virtual void OnBuilderCreating(DistributedApplicationOptions applicationOptions, Microsoft.Extensions.Hosting.HostApplicationBuilderSettings hostOptions) { }

        protected virtual void OnBuilding(DistributedApplicationBuilder applicationBuilder) { }

        protected virtual void OnBuilt(DistributedApplication application) { }

        public System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public static partial class DistributedApplicationHostingTestingExtensions
    {
        public static System.Net.Http.HttpClient CreateHttpClient(this DistributedApplication app, string resourceName, string? endpointName = null) { throw null; }

        public static System.Threading.Tasks.ValueTask<string?> GetConnectionStringAsync(this DistributedApplication app, string resourceName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Uri GetEndpoint(this DistributedApplication app, string resourceName, string? endpointName = null) { throw null; }
    }

    public static partial class DistributedApplicationTestingBuilder
    {
        public static IDistributedApplicationTestingBuilder Create(string[] args, System.Action<DistributedApplicationOptions, Microsoft.Extensions.Hosting.HostApplicationBuilderSettings> configureBuilder) { throw null; }

        public static IDistributedApplicationTestingBuilder Create(params string[] args) { throw null; }

        public static System.Threading.Tasks.Task<IDistributedApplicationTestingBuilder> CreateAsync(System.Type entryPoint, string[] args, System.Action<DistributedApplicationOptions, Microsoft.Extensions.Hosting.HostApplicationBuilderSettings> configureBuilder, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IDistributedApplicationTestingBuilder> CreateAsync(System.Type entryPoint, string[] args, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IDistributedApplicationTestingBuilder> CreateAsync(System.Type entryPoint, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IDistributedApplicationTestingBuilder> CreateAsync<TEntryPoint>(string[] args, System.Action<DistributedApplicationOptions, Microsoft.Extensions.Hosting.HostApplicationBuilderSettings> configureBuilder, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IDistributedApplicationTestingBuilder> CreateAsync<TEntryPoint>(string[] args, System.Threading.CancellationToken cancellationToken = default)
            where TEntryPoint : class { throw null; }

        public static System.Threading.Tasks.Task<IDistributedApplicationTestingBuilder> CreateAsync<TEntryPoint>(System.Threading.CancellationToken cancellationToken = default)
            where TEntryPoint : class { throw null; }
    }

    public partial interface IDistributedApplicationTestingBuilder : IDistributedApplicationBuilder, System.IAsyncDisposable, System.IDisposable
    {
        System.Reflection.Assembly? AppHostAssembly { get; }

        string AppHostDirectory { get; }

        Microsoft.Extensions.Configuration.ConfigurationManager Configuration { get; }

        Microsoft.Extensions.Hosting.IHostEnvironment Environment { get; }

        Eventing.IDistributedApplicationEventing Eventing { get; }

        DistributedApplicationExecutionContext ExecutionContext { get; }

        ApplicationModel.IResourceCollection Resources { get; }

        Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }

        ApplicationModel.IResourceBuilder<T> AddResource<T>(T resource)
            where T : ApplicationModel.IResource;
        System.Threading.Tasks.Task<DistributedApplication> BuildAsync(System.Threading.CancellationToken cancellationToken = default);
        ApplicationModel.IResourceBuilder<T> CreateResourceBuilder<T>(T resource)
            where T : ApplicationModel.IResource;
    }
}