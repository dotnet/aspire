<Project Sdk="Microsoft.Build.NoTargets/3.7.0">

  <Import Project="$(SharedDir)Workload.targets" />

  <PropertyGroup>
    <PackageId>$(PackageId).Manifest-$(DotNetAspireManifestVersionBand)</PackageId>
    <Description>.NET Aspire workload manifest</Description>

    <!--
      the workload testing targets from dotnet/runtime install the manifest nuget with nuget-restore, which fails
      for this manifest package because PackageType='dotnetplatform'.

      As a temporary workaround, set `PackageType=''` but only for Linux/CI or local runs
      Because the official workload packages are generated on windows, they will not be
      affected by this workaround
    -->
    <PackageType Condition="'$(ContinuousIntegrationBuild)' != 'true' or ('$(OS)' != 'Windows_NT' and '$(ArchiveTests)' == 'true')" />
  </PropertyGroup>

  <ItemGroup>
    <None Include="WorkloadManifest.in.json" Pack="true" PerformTextReplacement="True" />
    <None Include="WorkloadManifest.targets" Pack="true" PackagePath="data" CopyToOutputDirectory="PreserveNewest" />
    <None Include="WorkloadManifest.Aspire.targets" Pack="true" PackagePath="data" CopyToOutputDirectory="PreserveNewest" />
    <None Include="Rollback.in.json" PerformTextReplacement="True" />
    <None Include="SdkInstaller.in.json" PerformTextReplacement="True" />
    <None Update="@(None->HasMetadata('PerformTextReplacement'))" CopyToOutputDirectory="PreserveNewest" PackagePath="data" />
  </ItemGroup>

  <ItemGroup>
    <TextReplacementValue Include="MicrosoftDotnetSdkInternalPackageVersion" NewValue="$(MicrosoftDotnetSdkInternalPackageVersion)" />
    <TextReplacementValue Include="MicrosoftNETCoreAppRefPackageVersion" NewValue="$(MicrosoftNETCoreAppRefPackageVersion)" />
    <TextReplacementValue Include="DotNetAspireManifestVersionBand" NewValue="$(DotNetAspireManifestVersionBand)" />
    <TextReplacementValue Include="ASPIRE_DOTNET_VERSION_MAJOR" NewValue="$(_AspireDotNetVersionMajor)" />
    <TextReplacementValue Include="ASPIRE_DOTNET_VERSION" NewValue="$(_AspireDotNetVersion)" />
    <TextReplacementValue Include="DCP_VERSION" NewValue="$(MicrosoftDeveloperControlPlanedarwinamd64PackageVersion)" />
  </ItemGroup>

  <Target Name="_CopyAdditionalFIles" AfterTargets="Build">
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(Version)/$(GitSha).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(Version)/$(GitSemVerLabel).$(BUILDVERSION).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(Version)/$(GitSemVerLabel).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(Version)/$(PackageReferenceVersion).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(GitSha).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(GitSemVerLabel).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(GitBranch).json" />
    <Copy SourceFiles="$(OutputPath)Rollback.json" DestinationFiles="$(PackageOutputPath)/metadata/rollbacks/$(PackageReferenceVersion).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(Version)/$(GitSha).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(Version)/$(GitSemVerLabel).$(BUILDVERSION).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(Version)/$(GitSemVerLabel).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(Version)/$(PackageReferenceVersion).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(GitSha).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(GitSemVerLabel).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(GitBranch).json" />
    <Copy SourceFiles="$(OutputPath)SdkInstaller.json" DestinationFiles="$(PackageOutputPath)/metadata/sdks/$(PackageReferenceVersion).json" />
  </Target>

  <Target Name="ReturnPackageVersion" Returns="$(PackageVersion)" />

  <Target Name="_CopyManifest" AfterTargets="Build">
    <ItemGroup>
      <_Files Include="$(OutputPath)WorkloadManifest.*" />
    </ItemGroup>
    <Copy SourceFiles="@(_Files)" DestinationFolder="$(DotNetSdkManifestsDirectory)$(MSBuildProjectName.ToLowerInvariant())" />
  </Target>
</Project>
