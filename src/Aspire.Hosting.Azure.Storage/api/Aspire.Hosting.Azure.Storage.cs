//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class AzureStorageExtensions
    {
        public static ApplicationModel.IResourceBuilder<Azure.AzureStorageResource> AddAzureStorage(this IDistributedApplicationBuilder builder, string name) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureBlobStorageResource> AddBlobs(this ApplicationModel.IResourceBuilder<Azure.AzureStorageResource> builder, string name) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureQueueStorageResource> AddQueues(this ApplicationModel.IResourceBuilder<Azure.AzureStorageResource> builder, string name) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureTableStorageResource> AddTables(this ApplicationModel.IResourceBuilder<Azure.AzureStorageResource> builder, string name) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureStorageResource> RunAsEmulator(this ApplicationModel.IResourceBuilder<Azure.AzureStorageResource> builder, System.Action<ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource>>? configureContainer = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> WithApiVersionCheck(this ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> builder, bool enable = true) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> WithBlobPort(this ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> builder, int port) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> WithDataBindMount(this ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> builder, string? path = null, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> WithDataVolume(this ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> builder, string? name = null, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> WithQueuePort(this ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> builder, int port) { throw null; }

        public static ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> WithTablePort(this ApplicationModel.IResourceBuilder<Azure.AzureStorageEmulatorResource> builder, int port) { throw null; }
    }
}

namespace Aspire.Hosting.Azure
{
    public partial class AzureBlobStorageResource : ApplicationModel.Resource, ApplicationModel.IResourceWithConnectionString, ApplicationModel.IResource, ApplicationModel.IManifestExpressionProvider, ApplicationModel.IValueProvider, ApplicationModel.IValueWithReferences, ApplicationModel.IResourceWithParent<AzureStorageResource>, ApplicationModel.IResourceWithParent, IResourceWithAzureFunctionsConfig
    {
        public AzureBlobStorageResource(string name, AzureStorageResource storage) : base(default!) { }

        public ApplicationModel.ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public AzureStorageResource Parent { get { throw null; } }

        void IResourceWithAzureFunctionsConfig.ApplyAzureFunctionsConfiguration(System.Collections.Generic.IDictionary<string, object> target, string connectionName) { }
    }

    public partial class AzureQueueStorageResource : ApplicationModel.Resource, ApplicationModel.IResourceWithConnectionString, ApplicationModel.IResource, ApplicationModel.IManifestExpressionProvider, ApplicationModel.IValueProvider, ApplicationModel.IValueWithReferences, ApplicationModel.IResourceWithParent<AzureStorageResource>, ApplicationModel.IResourceWithParent, IResourceWithAzureFunctionsConfig
    {
        public AzureQueueStorageResource(string name, AzureStorageResource storage) : base(default!) { }

        public ApplicationModel.ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public AzureStorageResource Parent { get { throw null; } }

        void IResourceWithAzureFunctionsConfig.ApplyAzureFunctionsConfiguration(System.Collections.Generic.IDictionary<string, object> target, string connectionName) { }
    }

    public partial class AzureStorageEmulatorResource : ApplicationModel.ContainerResource, ApplicationModel.IResource
    {
        public AzureStorageEmulatorResource(AzureStorageResource innerResource) : base(default!, default) { }

        public override ApplicationModel.ResourceAnnotationCollection Annotations { get { throw null; } }

        public override string Name { get { throw null; } }
    }

    public partial class AzureStorageResource : AzureProvisioningResource, ApplicationModel.IResourceWithEndpoints, ApplicationModel.IResource, IResourceWithAzureFunctionsConfig
    {
        public AzureStorageResource(string name, System.Action<AzureResourceInfrastructure> configureInfrastructure) : base(default!, default!) { }

        public BicepOutputReference BlobEndpoint { get { throw null; } }

        public bool IsEmulator { get { throw null; } }

        public BicepOutputReference QueueEndpoint { get { throw null; } }

        public BicepOutputReference TableEndpoint { get { throw null; } }

        void IResourceWithAzureFunctionsConfig.ApplyAzureFunctionsConfiguration(System.Collections.Generic.IDictionary<string, object> target, string connectionName) { }
    }

    public partial class AzureTableStorageResource : ApplicationModel.Resource, ApplicationModel.IResourceWithConnectionString, ApplicationModel.IResource, ApplicationModel.IManifestExpressionProvider, ApplicationModel.IValueProvider, ApplicationModel.IValueWithReferences, ApplicationModel.IResourceWithParent<AzureStorageResource>, ApplicationModel.IResourceWithParent
    {
        public AzureTableStorageResource(string name, AzureStorageResource storage) : base(default!) { }

        public ApplicationModel.ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public AzureStorageResource Parent { get { throw null; } }
    }
}