//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace <global namespace>
{
    public partial class CertificateAuthorityCollection : Aspire.Hosting.ApplicationModel.Resource
    {
        public CertificateAuthorityCollection(string name) : base(default!) { }

        public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates { get { throw null; } }
    }
}

namespace Aspire.Hosting
{
    public static partial class ConnectionPropertiesExtensions
    {
        public static System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, ApplicationModel.ReferenceExpression>> CombineProperties(this ApplicationModel.IResourceWithConnectionString source, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, ApplicationModel.ReferenceExpression>> additional) { throw null; }
    }

    public static partial class ConnectionStringBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ConnectionStringResource> AddConnectionString(this IDistributedApplicationBuilder builder, string name, ApplicationModel.ReferenceExpression connectionStringExpression) { throw null; }

        public static ApplicationModel.IResourceBuilder<ConnectionStringResource> AddConnectionString(this IDistributedApplicationBuilder builder, string name, System.Action<ApplicationModel.ReferenceExpressionBuilder> connectionStringBuilder) { throw null; }
    }

    public sealed partial class ConnectionStringResource : ApplicationModel.Resource, ApplicationModel.IResourceWithConnectionString, ApplicationModel.IResource, ApplicationModel.IManifestExpressionProvider, ApplicationModel.IValueProvider, ApplicationModel.IValueWithReferences, ApplicationModel.IResourceWithWaitSupport
    {
        public ConnectionStringResource(string name, ApplicationModel.ReferenceExpression connectionStringExpression) : base(default!) { }

        public ApplicationModel.ReferenceExpression ConnectionStringExpression { get { throw null; } }
    }

    public static partial class ContainerResourceBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource> AddContainer(this IDistributedApplicationBuilder builder, string name, string image, string tag) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource> AddContainer(this IDistributedApplicationBuilder builder, string name, string image) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource> AddDockerfile(this IDistributedApplicationBuilder builder, string name, string contextPath, string? dockerfilePath = null, string? stage = null) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource> AddDockerfileBuilder(this IDistributedApplicationBuilder builder, string name, string contextPath, System.Action<ApplicationModel.DockerfileBuilderCallbackContext> callback, string? stage = null) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource> AddDockerfileBuilder(this IDistributedApplicationBuilder builder, string name, string contextPath, System.Func<ApplicationModel.DockerfileBuilderCallbackContext, System.Threading.Tasks.Task> callback, string? stage = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource> AddDockerfileFactory(this IDistributedApplicationBuilder builder, string name, string contextPath, System.Func<ApplicationModel.DockerfileFactoryContext, string> dockerfileFactory, string? stage = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource> AddDockerfileFactory(this IDistributedApplicationBuilder builder, string name, string contextPath, System.Func<ApplicationModel.DockerfileFactoryContext, System.Threading.Tasks.Task<string>> dockerfileFactory, string? stage = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> PublishAsContainer<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithBindMount<T>(this ApplicationModel.IResourceBuilder<T> builder, string source, string target, bool isReadOnly = false)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithBuildArg<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> value)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithBuildArg<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, object? value)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithBuildSecret<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> value)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<TResource> WithContainerCertificatePaths<TResource>(this ApplicationModel.IResourceBuilder<TResource> builder, string? customCertificatesDestination = null, System.Collections.Generic.List<string>? defaultCertificateBundlePaths = null, System.Collections.Generic.List<string>? defaultCertificateDirectoryPaths = null)
            where TResource : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithContainerFiles<T>(this ApplicationModel.IResourceBuilder<T> builder, string destinationPath, System.Collections.Generic.IEnumerable<ApplicationModel.ContainerFileSystemItem> entries, int? defaultOwner = null, int? defaultGroup = null, System.IO.UnixFileMode? umask = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithContainerFiles<T>(this ApplicationModel.IResourceBuilder<T> builder, string destinationPath, System.Func<ApplicationModel.ContainerFileSystemCallbackContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ApplicationModel.ContainerFileSystemItem>>> callback, int? defaultOwner = null, int? defaultGroup = null, System.IO.UnixFileMode? umask = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithContainerFiles<T>(this ApplicationModel.IResourceBuilder<T> builder, string destinationPath, string sourcePath, int? defaultOwner = null, int? defaultGroup = null, System.IO.UnixFileMode? umask = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithContainerName<T>(this ApplicationModel.IResourceBuilder<T> builder, string name)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithContainerRuntimeArgs<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.ContainerRuntimeArgsCallbackContext> callback)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithContainerRuntimeArgs<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<ApplicationModel.ContainerRuntimeArgsCallbackContext, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithContainerRuntimeArgs<T>(this ApplicationModel.IResourceBuilder<T> builder, params string[] args)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithDockerfile<T>(this ApplicationModel.IResourceBuilder<T> builder, string contextPath, string? dockerfilePath = null, string? stage = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<T> WithDockerfileBaseImage<T>(this ApplicationModel.IResourceBuilder<T> builder, string? buildImage = null, string? runtimeImage = null)
            where T : ApplicationModel.IResource { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<T> WithDockerfileBuilder<T>(this ApplicationModel.IResourceBuilder<T> builder, string contextPath, System.Action<ApplicationModel.DockerfileBuilderCallbackContext> callback, string? stage = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<T> WithDockerfileBuilder<T>(this ApplicationModel.IResourceBuilder<T> builder, string contextPath, System.Func<ApplicationModel.DockerfileBuilderCallbackContext, System.Threading.Tasks.Task> callback, string? stage = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithDockerfileFactory<T>(this ApplicationModel.IResourceBuilder<T> builder, string contextPath, System.Func<ApplicationModel.DockerfileFactoryContext, string> dockerfileFactory, string? stage = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithDockerfileFactory<T>(this ApplicationModel.IResourceBuilder<T> builder, string contextPath, System.Func<ApplicationModel.DockerfileFactoryContext, System.Threading.Tasks.Task<string>> dockerfileFactory, string? stage = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPROXYENDPOINTS001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<T> WithEndpointProxySupport<T>(this ApplicationModel.IResourceBuilder<T> builder, bool proxyEnabled)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEntrypoint<T>(this ApplicationModel.IResourceBuilder<T> builder, string entrypoint)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithImage<T>(this ApplicationModel.IResourceBuilder<T> builder, string image, string? tag = null)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithImagePullPolicy<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.ImagePullPolicy pullPolicy)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithImageRegistry<T>(this ApplicationModel.IResourceBuilder<T> builder, string? registry)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithImageSHA256<T>(this ApplicationModel.IResourceBuilder<T> builder, string sha256)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithImageTag<T>(this ApplicationModel.IResourceBuilder<T> builder, string tag)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithLifetime<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.ContainerLifetime lifetime)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithVolume<T>(this ApplicationModel.IResourceBuilder<T> builder, string? name, string target, bool isReadOnly = false)
            where T : ApplicationModel.ContainerResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithVolume<T>(this ApplicationModel.IResourceBuilder<T> builder, string target)
            where T : ApplicationModel.ContainerResource { throw null; }
    }

    public static partial class ContainerResourceExtensions
    {
        public static System.Collections.Generic.IEnumerable<ApplicationModel.IResource> GetContainerResources(this ApplicationModel.DistributedApplicationModel model) { throw null; }

        public static bool IsContainer(this ApplicationModel.IResource resource) { throw null; }
    }

    public static partial class CustomResourceExtensions
    {
        public static ApplicationModel.IResourceBuilder<TResource> WithInitialState<TResource>(this ApplicationModel.IResourceBuilder<TResource> builder, ApplicationModel.CustomResourceSnapshot initialSnapshot)
            where TResource : ApplicationModel.IResource { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{_host}")]
    public partial class DistributedApplication : Microsoft.Extensions.Hosting.IHost, System.IDisposable, System.IAsyncDisposable
    {
        public DistributedApplication(Microsoft.Extensions.Hosting.IHost host) { }

        public ApplicationModel.ResourceCommandService ResourceCommands { get { throw null; } }

        public ApplicationModel.ResourceNotificationService ResourceNotifications { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }

        public static IDistributedApplicationBuilder CreateBuilder() { throw null; }

        public static IDistributedApplicationBuilder CreateBuilder(DistributedApplicationOptions options) { throw null; }

        public static IDistributedApplicationBuilder CreateBuilder(string[] args) { throw null; }

        public virtual void Dispose() { }

        public virtual System.Threading.Tasks.ValueTask DisposeAsync() { throw null; }

        System.Threading.Tasks.Task Microsoft.Extensions.Hosting.IHost.StartAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        System.Threading.Tasks.Task Microsoft.Extensions.Hosting.IHost.StopAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        public void Run() { }

        public virtual System.Threading.Tasks.Task RunAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public virtual System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public virtual System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public partial class DistributedApplicationBuilder : IDistributedApplicationBuilder
    {
        public DistributedApplicationBuilder(DistributedApplicationOptions options) { }

        public DistributedApplicationBuilder(string[] args) { }

        public System.Reflection.Assembly? AppHostAssembly { get { throw null; } }

        public string AppHostDirectory { get { throw null; } }

        public string AppHostPath { get { throw null; } }

        public Microsoft.Extensions.Configuration.ConfigurationManager Configuration { get { throw null; } }

        public Microsoft.Extensions.Hosting.IHostEnvironment Environment { get { throw null; } }

        public Eventing.IDistributedApplicationEventing Eventing { get { throw null; } }

        public DistributedApplicationExecutionContext ExecutionContext { get { throw null; } }

        public Pipelines.IDistributedApplicationPipeline Pipeline { get { throw null; } }

        public ApplicationModel.IResourceCollection Resources { get { throw null; } }

        public Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get { throw null; } }

        public ApplicationModel.IResourceBuilder<T> AddResource<T>(T resource)
            where T : ApplicationModel.IResource { throw null; }

        public DistributedApplication Build() { throw null; }

        public ApplicationModel.IResourceBuilder<T> CreateResourceBuilder<T>(T resource)
            where T : ApplicationModel.IResource { throw null; }
    }

    public static partial class DistributedApplicationBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<T> CreateResourceBuilder<T>(this IDistributedApplicationBuilder builder, string name)
            where T : ApplicationModel.IResource { throw null; }

        public static bool TryCreateResourceBuilder<T>(this IDistributedApplicationBuilder builder, string name, out ApplicationModel.IResourceBuilder<T>? resourceBuilder)
            where T : ApplicationModel.IResource { throw null; }
    }

    public static partial class DistributedApplicationEventingExtensions
    {
        public static ApplicationModel.IResourceBuilder<T> OnBeforeResourceStarted<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<T, ApplicationModel.BeforeResourceStartedEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> OnConnectionStringAvailable<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<T, ApplicationModel.ConnectionStringAvailableEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResourceWithConnectionString { throw null; }

        public static ApplicationModel.IResourceBuilder<T> OnInitializeResource<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<T, ApplicationModel.InitializeResourceEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> OnResourceEndpointsAllocated<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<T, ApplicationModel.ResourceEndpointsAllocatedEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> OnResourceReady<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<T, ApplicationModel.ResourceReadyEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> OnResourceStopped<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<T, ApplicationModel.ResourceStoppedEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResource { throw null; }
    }

    public partial class DistributedApplicationException : System.Exception
    {
        public DistributedApplicationException() { }

        public DistributedApplicationException(string message, System.Exception inner) { }

        public DistributedApplicationException(string message) { }
    }

    public partial class DistributedApplicationExecutionContext
    {
        public DistributedApplicationExecutionContext(DistributedApplicationExecutionContextOptions options) { }

        public DistributedApplicationExecutionContext(DistributedApplicationOperation operation, string publisherName) { }

        public DistributedApplicationExecutionContext(DistributedApplicationOperation operation) { }

        public bool IsPublishMode { get { throw null; } }

        public bool IsRunMode { get { throw null; } }

        public DistributedApplicationOperation Operation { get { throw null; } }

        public string PublisherName { get { throw null; } set { } }

        public System.IServiceProvider ServiceProvider { get { throw null; } }
    }

    public partial class DistributedApplicationExecutionContextOptions
    {
        public DistributedApplicationExecutionContextOptions(DistributedApplicationOperation operation, string publisherName) { }

        public DistributedApplicationExecutionContextOptions(DistributedApplicationOperation operation) { }

        public DistributedApplicationOperation Operation { get { throw null; } }

        public string? PublisherName { get { throw null; } }

        public System.IServiceProvider? ServiceProvider { get { throw null; } set { } }
    }

    public enum DistributedApplicationOperation
    {
        Run = 0,
        Publish = 1
    }

    public sealed partial class DistributedApplicationOptions
    {
        public bool AllowUnsecuredTransport { get { throw null; } set { } }

        public string[]? Args { get { throw null; } set { } }

        public string? AssemblyName { get { throw null; } set { } }

        public string? ContainerRegistryOverride { get { throw null; } set { } }

        public string? DashboardApplicationName { get { throw null; } set { } }

        public bool DisableDashboard { get { throw null; } set { } }

        public bool EnableResourceLogging { get { throw null; } set { } }

        public string? ProjectDirectory { get { throw null; } set { } }

        public bool? TrustDeveloperCertificate { get { throw null; } set { } }
    }

    public static partial class EmulatorResourceExtensions
    {
        public static bool IsEmulator(this ApplicationModel.IResource resource) { throw null; }
    }

    public static partial class ExecutableResourceBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.ExecutableResource> AddExecutable(this IDistributedApplicationBuilder builder, string name, string command, string workingDirectory, params object[]? args) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ExecutableResource> AddExecutable(this IDistributedApplicationBuilder builder, string name, string command, string workingDirectory, params string[]? args) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> PublishAsDockerFile<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource>>? configure)
            where T : ApplicationModel.ExecutableResource { throw null; }

        [System.Obsolete("Use builder.PublishAsDockerFile(c => c.WithBuildArg(name, value)) instead.")]
        public static ApplicationModel.IResourceBuilder<T> PublishAsDockerFile<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Collections.Generic.IEnumerable<ApplicationModel.DockerBuildArg>? buildArgs)
            where T : ApplicationModel.ExecutableResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> PublishAsDockerFile<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.ExecutableResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithCommand<T>(this ApplicationModel.IResourceBuilder<T> builder, string command)
            where T : ApplicationModel.ExecutableResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithWorkingDirectory<T>(this ApplicationModel.IResourceBuilder<T> builder, string workingDirectory)
            where T : ApplicationModel.ExecutableResource { throw null; }
    }

    public static partial class ExecutableResourceExtensions
    {
        public static System.Collections.Generic.IEnumerable<ApplicationModel.ExecutableResource> GetExecutableResources(this ApplicationModel.DistributedApplicationModel model) { throw null; }
    }

    public static partial class ExternalServiceBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ExternalServiceResource> AddExternalService(this IDistributedApplicationBuilder builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> urlParameter) { throw null; }

        public static ApplicationModel.IResourceBuilder<ExternalServiceResource> AddExternalService(this IDistributedApplicationBuilder builder, string name, string url) { throw null; }

        public static ApplicationModel.IResourceBuilder<ExternalServiceResource> AddExternalService(this IDistributedApplicationBuilder builder, string name, System.Uri uri) { throw null; }

        public static ApplicationModel.IResourceBuilder<ExternalServiceResource> WithHttpHealthCheck(this ApplicationModel.IResourceBuilder<ExternalServiceResource> builder, string? path = null, int? statusCode = null) { throw null; }
    }

    public sealed partial class ExternalServiceResource : ApplicationModel.Resource
    {
        public ExternalServiceResource(string name, ApplicationModel.ParameterResource urlParameter) : base(default!) { }

        public ExternalServiceResource(string name, System.Uri uri) : base(default!) { }

        public System.Uri? Uri { get { throw null; } }

        public ApplicationModel.ParameterResource? UrlParameter { get { throw null; } }
    }

    public partial interface IDeveloperCertificateService
    {
        System.Collections.Immutable.ImmutableList<System.Security.Cryptography.X509Certificates.X509Certificate2> Certificates { get; }

        bool SupportsContainerTrust { get; }

        bool TrustCertificate { get; }
    }

    public partial interface IDistributedApplicationBuilder
    {
        System.Reflection.Assembly? AppHostAssembly { get; }

        string AppHostDirectory { get; }

        Microsoft.Extensions.Configuration.ConfigurationManager Configuration { get; }

        Microsoft.Extensions.Hosting.IHostEnvironment Environment { get; }

        Eventing.IDistributedApplicationEventing Eventing { get; }

        DistributedApplicationExecutionContext ExecutionContext { get; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        Pipelines.IDistributedApplicationPipeline Pipeline { get; }

        ApplicationModel.IResourceCollection Resources { get; }

        Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }

        ApplicationModel.IResourceBuilder<T> AddResource<T>(T resource)
            where T : ApplicationModel.IResource;
        DistributedApplication Build();
        ApplicationModel.IResourceBuilder<T> CreateResourceBuilder<T>(T resource)
            where T : ApplicationModel.IResource;
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IInteractionService
    {
        bool IsAvailable { get; }

        System.Threading.Tasks.Task<InteractionResult<bool>> PromptConfirmationAsync(string title, string message, MessageBoxInteractionOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<InteractionResult<InteractionInput>> PromptInputAsync(string title, string? message, InteractionInput input, InputsDialogInteractionOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<InteractionResult<InteractionInput>> PromptInputAsync(string title, string? message, string inputLabel, string placeHolder, InputsDialogInteractionOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<InteractionResult<InteractionInputCollection>> PromptInputsAsync(string title, string? message, System.Collections.Generic.IReadOnlyList<InteractionInput> inputs, InputsDialogInteractionOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<InteractionResult<bool>> PromptMessageBoxAsync(string title, string message, MessageBoxInteractionOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<InteractionResult<bool>> PromptNotificationAsync(string title, string message, NotificationInteractionOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class InputLoadOptions
    {
        public bool AlwaysLoadOnStart { get { throw null; } init { } }

        public System.Collections.Generic.IReadOnlyList<string>? DependsOnInputs { get { throw null; } init { } }

        public required System.Func<LoadInputContext, System.Threading.Tasks.Task> LoadCallback { get { throw null; } init { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class InputsDialogInteractionOptions : InteractionOptions
    {
        public System.Func<InputsDialogValidationContext, System.Threading.Tasks.Task>? ValidationCallback { get { throw null; } set { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class InputsDialogValidationContext
    {
        public required System.Threading.CancellationToken CancellationToken { get { throw null; } init { } }

        public required InteractionInputCollection Inputs { get { throw null; } init { } }

        public required System.IServiceProvider ServiceProvider { get { throw null; } init { } }

        public void AddValidationError(InteractionInput input, string errorMessage) { }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public enum InputType
    {
        Text = 0,
        SecretText = 1,
        Choice = 2,
        Boolean = 3,
        Number = 4
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    [System.Diagnostics.DebuggerDisplay("Name = {Name}, InputType = {InputType}, Required = {Required}, Value = {Value}")]
    public sealed partial class InteractionInput
    {
        public bool AllowCustomChoice { get { throw null; } init { } }

        public string? Description { get { throw null; } init { } }

        public bool Disabled { get { throw null; } set { } }

        public InputLoadOptions? DynamicLoading { get { throw null; } init { } }

        public bool EnableDescriptionMarkdown { get { throw null; } init { } }

        public required InputType InputType { get { throw null; } init { } }

        public string? Label { get { throw null; } init { } }

        public int? MaxLength { get { throw null; } init { } }

        public required string Name { get { throw null; } init { } }

        public System.Collections.Generic.IReadOnlyList<System.Collections.Generic.KeyValuePair<string, string>>? Options { get { throw null; } set { } }

        public string? Placeholder { get { throw null; } init { } }

        public bool Required { get { throw null; } init { } }

        public string? Value { get { throw null; } set { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    [System.Diagnostics.DebuggerDisplay("Count = {Count}")]
    public sealed partial class InteractionInputCollection : System.Collections.Generic.IReadOnlyList<InteractionInput>, System.Collections.Generic.IEnumerable<InteractionInput>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection<InteractionInput>
    {
        public InteractionInputCollection(System.Collections.Generic.IReadOnlyList<InteractionInput> inputs) { }

        public int Count { get { throw null; } }

        public InteractionInput this[int index] { get { throw null; } }

        public InteractionInput this[string name] { get { throw null; } }

        public System.Collections.Generic.IEnumerable<string> Names { get { throw null; } }

        public bool ContainsName(string name) { throw null; }

        public System.Collections.Generic.IEnumerator<InteractionInput> GetEnumerator() { throw null; }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }

        public bool TryGetByName(string name, out InteractionInput? input) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class InteractionOptions
    {
        public bool? EnableMessageMarkdown { get { throw null; } set { } }

        public string? PrimaryButtonText { get { throw null; } set { } }

        public string? SecondaryButtonText { get { throw null; } set { } }

        public bool? ShowDismiss { get { throw null; } set { } }

        public bool? ShowSecondaryButton { get { throw null; } set { } }
    }

    public static partial class InteractionResult
    {
        public static InteractionResult<T> Cancel<T>(T? data = default) { throw null; }

        public static InteractionResult<T> Ok<T>(T result) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class InteractionResult<T>
    {
        internal InteractionResult() { }

        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "Data")]
        public bool Canceled { get { throw null; } }

        public T? Data { get { throw null; } }
    }

    public partial interface IProjectMetadata : ApplicationModel.IResourceAnnotation
    {
        bool IsFileBasedApp { get; }

        LaunchSettings? LaunchSettings { get; }

        string ProjectPath { get; }

        bool SuppressBuild { get; }
    }

    public partial interface IResourceWithContainerFiles : ApplicationModel.IResource
    {
    }

    public partial interface IResourceWithServiceDiscovery : ApplicationModel.IResourceWithEndpoints, ApplicationModel.IResource
    {
    }

    public sealed partial class LaunchProfile
    {
        [System.Text.Json.Serialization.JsonPropertyName("applicationUrl")]
        public string? ApplicationUrl { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonPropertyName("commandLineArgs")]
        public string? CommandLineArgs { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonPropertyName("commandName")]
        public string? CommandName { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonPropertyName("dotnetRunMessages")]
        public bool? DotnetRunMessages { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonPropertyName("environmentVariables")]
        public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonPropertyName("executablePath")]
        public string? ExecutablePath { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonPropertyName("launchBrowser")]
        public bool? LaunchBrowser { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonPropertyName("launchUrl")]
        public string? LaunchUrl { get { throw null; } set { } }
    }

    public sealed partial class LaunchSettings
    {
        [System.Text.Json.Serialization.JsonPropertyName("profiles")]
        public System.Collections.Generic.Dictionary<string, LaunchProfile> Profiles { get { throw null; } set { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class LoadInputContext
    {
        public required InteractionInputCollection AllInputs { get { throw null; } init { } }

        public required System.Threading.CancellationToken CancellationToken { get { throw null; } init { } }

        public required InteractionInput Input { get { throw null; } init { } }

        public required System.IServiceProvider ServiceProvider { get { throw null; } init { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class MessageBoxInteractionOptions : InteractionOptions
    {
        public MessageIntent? Intent { get { throw null; } set { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public enum MessageIntent
    {
        None = 0,
        Success = 1,
        Warning = 2,
        Error = 3,
        Information = 4,
        Confirmation = 5
    }

    public partial class MissingParameterValueException : DistributedApplicationException
    {
        public MissingParameterValueException(string message, System.Exception innerException) { }

        public MissingParameterValueException(string message) { }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class NotificationInteractionOptions : InteractionOptions
    {
        public MessageIntent? Intent { get { throw null; } set { } }

        public string? LinkText { get { throw null; } set { } }

        public string? LinkUrl { get { throw null; } set { } }
    }

    public static partial class OtlpConfigurationExtensions
    {
        public static void AddOtlpEnvironment(ApplicationModel.IResource resource, Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.Extensions.Hosting.IHostEnvironment environment, OtlpProtocol protocol) { }

        public static void AddOtlpEnvironment(ApplicationModel.IResource resource, Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.Extensions.Hosting.IHostEnvironment environment) { }

        public static ApplicationModel.IResourceBuilder<T> WithOtlpExporter<T>(this ApplicationModel.IResourceBuilder<T> builder, OtlpProtocol protocol)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithOtlpExporter<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }
    }

    public enum OtlpProtocol
    {
        Grpc = 0,
        HttpProtobuf = 1
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class ParameterProcessor
    {
        public ParameterProcessor(ApplicationModel.ResourceNotificationService notificationService, ApplicationModel.ResourceLoggerService loggerService, IInteractionService interactionService, Microsoft.Extensions.Logging.ILogger<ParameterProcessor> logger, DistributedApplicationExecutionContext executionContext, Publishing.IDeploymentStateManager deploymentStateManager) { }

        public System.Threading.Tasks.Task InitializeParametersAsync(ApplicationModel.DistributedApplicationModel model, bool waitForResolution = false, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task InitializeParametersAsync(System.Collections.Generic.IEnumerable<ApplicationModel.ParameterResource> parameterResources, bool waitForResolution = false) { throw null; }
    }

    public static partial class ParameterResourceBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.IResourceWithConnectionString> AddConnectionString(this IDistributedApplicationBuilder builder, string name, string? environmentVariableName = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> AddParameter(this IDistributedApplicationBuilder builder, string name, ApplicationModel.ParameterDefault value, bool secret = false, bool persist = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> AddParameter(this IDistributedApplicationBuilder builder, string name, bool secret = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> AddParameter(this IDistributedApplicationBuilder builder, string name, System.Func<string> valueGetter, bool publishValueAsDefault = false, bool secret = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> AddParameter(this IDistributedApplicationBuilder builder, string name, string value, bool publishValueAsDefault = false, bool secret = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> AddParameterFromConfiguration(this IDistributedApplicationBuilder builder, string name, string configurationKey, bool secret = false) { throw null; }

        public static void ConfigureConnectionStringManifestPublisher(ApplicationModel.IResourceBuilder<ApplicationModel.IResourceWithConnectionString> builder) { }

        public static ApplicationModel.ParameterResource CreateDefaultPasswordParameter(IDistributedApplicationBuilder builder, string name, bool lower = true, bool upper = true, bool numeric = true, bool special = true, int minLower = 0, int minUpper = 0, int minNumeric = 0, int minSpecial = 0) { throw null; }

        public static ApplicationModel.ParameterResource CreateGeneratedParameter(IDistributedApplicationBuilder builder, string name, bool secret, ApplicationModel.GenerateParameterDefault parameterDefault) { throw null; }

        public static ApplicationModel.ParameterResource CreateParameter(IDistributedApplicationBuilder builder, string name, bool secret) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> PublishAsConnectionString<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.ContainerResource, ApplicationModel.IResourceWithConnectionString { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> WithCustomInput(this ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> builder, System.Func<ApplicationModel.ParameterResource, InteractionInput> createInput) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> WithDescription(this ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> builder, string description, bool enableMarkdown = false) { throw null; }
    }

    public static partial class ProjectResourceBuilderExtensions
    {
        [System.Diagnostics.CodeAnalysis.Experimental("ASPIRECSHARPAPPS001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.CSharpAppResource> AddCSharpApp(this IDistributedApplicationBuilder builder, string name, string path, System.Action<ProjectResourceOptions> configure) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIRECSHARPAPPS001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> AddCSharpApp(this IDistributedApplicationBuilder builder, string name, string path) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> AddProject(this IDistributedApplicationBuilder builder, string name, string projectPath, System.Action<ProjectResourceOptions> configure) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> AddProject(this IDistributedApplicationBuilder builder, string name, string projectPath, string? launchProfileName) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> AddProject(this IDistributedApplicationBuilder builder, string name, string projectPath) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> AddProject<TProject>(this IDistributedApplicationBuilder builder, string name, System.Action<ProjectResourceOptions> configure)
            where TProject : IProjectMetadata, new() { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> AddProject<TProject>(this IDistributedApplicationBuilder builder, string name, string? launchProfileName)
            where TProject : IProjectMetadata, new() { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> AddProject<TProject>(this IDistributedApplicationBuilder builder, string name)
            where TProject : IProjectMetadata, new() { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> DisableForwardedHeaders(this ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> builder) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> PublishAsDockerFile<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.IResourceBuilder<ApplicationModel.ContainerResource>>? configure = null)
            where T : ApplicationModel.ProjectResource { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> WithEndpointsInEnvironment(this ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> builder, System.Func<ApplicationModel.EndpointAnnotation, bool> filter) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> WithReplicas(this ApplicationModel.IResourceBuilder<ApplicationModel.ProjectResource> builder, int replicas) { throw null; }
    }

    public partial class ProjectResourceOptions
    {
        public bool ExcludeKestrelEndpoints { get { throw null; } set { } }

        public bool ExcludeLaunchProfile { get { throw null; } set { } }

        public string? LaunchProfileName { get { throw null; } set { } }
    }

    public static partial class ResourceBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<T> AsHttp2Service<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> ExcludeFromManifest<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> ExcludeFromMcp<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.ReferenceExpression GetConnectionProperty(this ApplicationModel.IResourceWithConnectionString resource, string key) { throw null; }

        public static ApplicationModel.EndpointReference GetEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, ApplicationModel.NetworkIdentifier contextNetworkID)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.EndpointReference GetEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, string name)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> PublishWithContainerFiles<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<IResourceWithContainerFiles> source, string destinationPath)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WaitFor<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResource> dependency, ApplicationModel.WaitBehavior waitBehavior)
            where T : ApplicationModel.IResourceWithWaitSupport { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WaitFor<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResource> dependency)
            where T : ApplicationModel.IResourceWithWaitSupport { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WaitForCompletion<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResource> dependency, int exitCode = 0)
            where T : ApplicationModel.IResourceWithWaitSupport { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WaitForStart<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResource> dependency, ApplicationModel.WaitBehavior waitBehavior)
            where T : ApplicationModel.IResourceWithWaitSupport { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WaitForStart<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResource> dependency)
            where T : ApplicationModel.IResourceWithWaitSupport { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithArgs<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.CommandLineArgsCallbackContext> callback)
            where T : ApplicationModel.IResourceWithArgs { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithArgs<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<ApplicationModel.CommandLineArgsCallbackContext, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResourceWithArgs { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithArgs<T>(this ApplicationModel.IResourceBuilder<T> builder, params object[] args)
            where T : ApplicationModel.IResourceWithArgs { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithArgs<T>(this ApplicationModel.IResourceBuilder<T> builder, params string[] args)
            where T : ApplicationModel.IResourceWithArgs { throw null; }

        public static ApplicationModel.IResourceBuilder<TResource> WithCertificateAuthorityCollection<TResource>(this ApplicationModel.IResourceBuilder<TResource> builder, ApplicationModel.IResourceBuilder<CertificateAuthorityCollection> certificateAuthorityCollection)
            where TResource : ApplicationModel.IResourceWithEnvironment, ApplicationModel.IResourceWithArgs { throw null; }

        public static ApplicationModel.IResourceBuilder<TResource> WithCertificateTrustConfiguration<TResource>(this ApplicationModel.IResourceBuilder<TResource> builder, System.Func<ApplicationModel.CertificateTrustConfigurationCallbackAnnotationContext, System.Threading.Tasks.Task> callback)
            where TResource : ApplicationModel.IResourceWithArgs, ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<TResource> WithCertificateTrustScope<TResource>(this ApplicationModel.IResourceBuilder<TResource> builder, ApplicationModel.CertificateTrustScope scope)
            where TResource : ApplicationModel.IResourceWithEnvironment, ApplicationModel.IResourceWithArgs { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithChildRelationship<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResource child)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithChildRelationship<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResource> child)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithCommand<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, string displayName, System.Func<ApplicationModel.ExecuteCommandContext, System.Threading.Tasks.Task<ApplicationModel.ExecuteCommandResult>> executeCommand, ApplicationModel.CommandOptions? commandOptions = null)
            where T : ApplicationModel.IResource { throw null; }

        [System.Obsolete("This method is obsolete and will be removed in a future version. Use the overload that accepts a CommandOptions instance instead.")]
        public static ApplicationModel.IResourceBuilder<T> WithCommand<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, string displayName, System.Func<ApplicationModel.ExecuteCommandContext, System.Threading.Tasks.Task<ApplicationModel.ExecuteCommandResult>> executeCommand, System.Func<ApplicationModel.UpdateCommandStateContext, ApplicationModel.ResourceCommandState>? updateState = null, string? displayDescription = null, object? parameter = null, string? confirmationMessage = null, string? iconName = null, ApplicationModel.IconVariant? iconVariant = null, bool isHighlighted = false)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithComputeEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IComputeEnvironmentResource> computeEnvironmentResource)
            where T : ApplicationModel.IComputeResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithConnectionStringRedirection<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceWithConnectionString resource)
            where T : ApplicationModel.IResourceWithConnectionString { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithContainerFilesSource<T>(this ApplicationModel.IResourceBuilder<T> builder, string sourcePath, ApplicationModel.ResourceAnnotationMutationBehavior behavior = ApplicationModel.ResourceAnnotationMutationBehavior.Append)
            where T : IResourceWithContainerFiles { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREEXTENSION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<T> WithDebugSupport<T, TLaunchConfiguration>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<string, TLaunchConfiguration> launchConfigurationProducer, string launchConfigurationType, System.Action<ApplicationModel.CommandLineArgsCallbackContext>? argsCallback = null)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<TResource> WithDeveloperCertificateTrust<TResource>(this ApplicationModel.IResourceBuilder<TResource> builder, bool trust)
            where TResource : ApplicationModel.IResourceWithEnvironment, ApplicationModel.IResourceWithArgs { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, int? port = null, int? targetPort = null, string? scheme = null, string? name = null, string? env = null, bool isProxied = true, bool? isExternal = null, System.Net.Sockets.ProtocolType? protocol = null)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, int? port, int? targetPort, string? scheme, string? name, string? env, bool isProxied, bool? isExternal)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, string endpointName, System.Action<ApplicationModel.EndpointAnnotation> callback, bool createIfNotExists = true)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.EnvironmentCallbackContext> callback)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<ApplicationModel.EnvironmentCallbackContext, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, ApplicationModel.EndpointReference endpointReference)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, string envVarName, ApplicationModel.IResourceBuilder<ApplicationModel.IResourceWithConnectionString> resource)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource> parameter)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, ApplicationModel.IResourceBuilder<ExternalServiceResource> externalService)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, in ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler value)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, ApplicationModel.ReferenceExpression value)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, System.Func<string> callback)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T>(this ApplicationModel.IResourceBuilder<T> builder, string name, string? value)
            where T : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithEnvironment<T, TValue>(this ApplicationModel.IResourceBuilder<T> builder, string name, TValue value)
            where T : ApplicationModel.IResourceWithEnvironment where TValue : ApplicationModel.IValueProvider, ApplicationModel.IManifestExpressionProvider { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithExplicitStart<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithExternalHttpEndpoints<T>(this ApplicationModel.IResourceBuilder<T> builder)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithHealthCheck<T>(this ApplicationModel.IResourceBuilder<T> builder, string key)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<TResource> WithHttpCommand<TResource>(this ApplicationModel.IResourceBuilder<TResource> builder, string path, string displayName, System.Func<ApplicationModel.EndpointReference>? endpointSelector, string? commandName = null, ApplicationModel.HttpCommandOptions? commandOptions = null)
            where TResource : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<TResource> WithHttpCommand<TResource>(this ApplicationModel.IResourceBuilder<TResource> builder, string path, string displayName, string? endpointName = null, string? commandName = null, ApplicationModel.HttpCommandOptions? commandOptions = null)
            where TResource : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithHttpEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, int? port = null, int? targetPort = null, string? name = null, string? env = null, bool isProxied = true)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithHttpHealthCheck<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<ApplicationModel.EndpointReference>? endpointSelector, string? path = null, int? statusCode = null)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithHttpHealthCheck<T>(this ApplicationModel.IResourceBuilder<T> builder, string? path = null, int? statusCode = null, string? endpointName = null)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPROBES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<T> WithHttpProbe<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.ProbeType type, System.Func<ApplicationModel.EndpointReference>? endpointSelector, string? path = null, int? initialDelaySeconds = null, int? periodSeconds = null, int? timeoutSeconds = null, int? failureThreshold = null, int? successThreshold = null)
            where T : ApplicationModel.IResourceWithEndpoints, ApplicationModel.IResourceWithProbes { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPROBES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static ApplicationModel.IResourceBuilder<T> WithHttpProbe<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.ProbeType type, string? path = null, int? initialDelaySeconds = null, int? periodSeconds = null, int? timeoutSeconds = null, int? failureThreshold = null, int? successThreshold = null, string? endpointName = null)
            where T : ApplicationModel.IResourceWithEndpoints, ApplicationModel.IResourceWithProbes { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithHttpsEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, int? port = null, int? targetPort = null, string? name = null, string? env = null, bool isProxied = true)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        [System.Obsolete("This method is obsolete and will be removed in a future version. Use the WithHttpHealthCheck method instead.")]
        public static ApplicationModel.IResourceBuilder<T> WithHttpsHealthCheck<T>(this ApplicationModel.IResourceBuilder<T> builder, string? path = null, int? statusCode = null, string? endpointName = null)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithIconName<T>(this ApplicationModel.IResourceBuilder<T> builder, string iconName, ApplicationModel.IconVariant iconVariant = ApplicationModel.IconVariant.Filled)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithManifestPublishingCallback<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<Publishing.ManifestPublishingContext> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithManifestPublishingCallback<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<Publishing.ManifestPublishingContext, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithParentRelationship<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResource parent)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithParentRelationship<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResource> parent)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<TDestination> WithReference<TDestination>(this ApplicationModel.IResourceBuilder<TDestination> builder, ApplicationModel.EndpointReference endpointReference)
            where TDestination : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<TDestination> WithReference<TDestination>(this ApplicationModel.IResourceBuilder<TDestination> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResourceWithConnectionString> source, string? connectionName = null, bool optional = false)
            where TDestination : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<TDestination> WithReference<TDestination>(this ApplicationModel.IResourceBuilder<TDestination> builder, ApplicationModel.IResourceBuilder<ExternalServiceResource> externalService)
            where TDestination : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<TDestination> WithReference<TDestination>(this ApplicationModel.IResourceBuilder<TDestination> builder, ApplicationModel.IResourceBuilder<IResourceWithServiceDiscovery> source, string name)
            where TDestination : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<TDestination> WithReference<TDestination>(this ApplicationModel.IResourceBuilder<TDestination> builder, ApplicationModel.IResourceBuilder<IResourceWithServiceDiscovery> source)
            where TDestination : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<TDestination> WithReference<TDestination>(this ApplicationModel.IResourceBuilder<TDestination> builder, string name, System.Uri uri)
            where TDestination : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<TDestination> WithReferenceEnvironment<TDestination>(this ApplicationModel.IResourceBuilder<TDestination> builder, ApplicationModel.ReferenceEnvironmentInjectionFlags flags)
            where TDestination : ApplicationModel.IResourceWithEnvironment { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithReferenceRelationship<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResource resource)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithReferenceRelationship<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResourceBuilder<ApplicationModel.IResource> resourceBuilder)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithReferenceRelationship<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.ReferenceExpression expression)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithRelationship<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.IResource resource, string type)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithUrl<T>(this ApplicationModel.IResourceBuilder<T> builder, ApplicationModel.ReferenceExpression url, string? displayText = null)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithUrl<T>(this ApplicationModel.IResourceBuilder<T> builder, in ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler url, string? displayText = null)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithUrl<T>(this ApplicationModel.IResourceBuilder<T> builder, string url, string? displayText = null)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithUrlForEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, string endpointName, System.Action<ApplicationModel.ResourceUrlAnnotation> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithUrlForEndpoint<T>(this ApplicationModel.IResourceBuilder<T> builder, string endpointName, System.Func<ApplicationModel.EndpointReference, ApplicationModel.ResourceUrlAnnotation> callback)
            where T : ApplicationModel.IResourceWithEndpoints { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithUrls<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.ResourceUrlsCallbackContext> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithUrls<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<ApplicationModel.ResourceUrlsCallbackContext, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResource { throw null; }
    }

    public static partial class VolumeNameGenerator
    {
        public static string Generate<T>(ApplicationModel.IResourceBuilder<T> builder, string suffix)
            where T : ApplicationModel.IResource { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    [System.Obsolete("The AfterEndpointsAllocatedEvent is deprecated and will be removed in a future version. Use the resource specific events BeforeResourceStartedEvent or ResourceEndpointsAllocatedEvent instead depending on your needs.")]
    public partial class AfterEndpointsAllocatedEvent : Eventing.IDistributedApplicationEvent
    {
        public AfterEndpointsAllocatedEvent(System.IServiceProvider services, DistributedApplicationModel model) { }

        public DistributedApplicationModel Model { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    public partial class AfterResourcesCreatedEvent : Eventing.IDistributedApplicationEvent
    {
        public AfterResourcesCreatedEvent(System.IServiceProvider services, DistributedApplicationModel model) { }

        public DistributedApplicationModel Model { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Name = {Endpoint.Name}, UriString = {UriString}")]
    public partial class AllocatedEndpoint
    {
        public AllocatedEndpoint(EndpointAnnotation endpoint, string address, int port, EndpointBindingMode bindingMode, string? targetPortExpression = null, NetworkIdentifier? networkID = null) { }

        public AllocatedEndpoint(EndpointAnnotation endpoint, string address, int port, EndpointBindingMode bindingMode, string? targetPortExpression = null) { }

        public AllocatedEndpoint(EndpointAnnotation endpoint, string address, int port, string? targetPortExpression = null) { }

        public string Address { get { throw null; } }

        public EndpointBindingMode BindingMode { get { throw null; } }

        public EndpointAnnotation Endpoint { get { throw null; } }

        public string EndPointString { get { throw null; } }

        public NetworkIdentifier NetworkID { get { throw null; } }

        public int Port { get { throw null; } }

        public string? TargetPortExpression { get { throw null; } }

        public string UriScheme { get { throw null; } }

        public string UriString { get { throw null; } }

        public override string ToString() { throw null; }
    }

    public static partial class AspireStoreExtensions
    {
        public static string GetFileNameWithContent(this IAspireStore aspireStore, string filenameTemplate, string sourceFilename) { throw null; }
    }

    public partial class BeforeResourceStartedEvent : Eventing.IDistributedApplicationResourceEvent, Eventing.IDistributedApplicationEvent
    {
        public BeforeResourceStartedEvent(IResource resource, System.IServiceProvider services) { }

        public IResource Resource { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    public partial class BeforeStartEvent : Eventing.IDistributedApplicationEvent
    {
        public BeforeStartEvent(System.IServiceProvider services, DistributedApplicationModel model) { }

        public DistributedApplicationModel Model { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    public sealed partial class CertificateAuthorityCollectionAnnotation : IResourceAnnotation
    {
        public System.Collections.Generic.List<CertificateAuthorityCollection> CertificateAuthorityCollections { get { throw null; } }

        public CertificateTrustScope? Scope { get { throw null; } }

        public bool? TrustDeveloperCertificates { get { throw null; } }
    }

    public static partial class CertificateAuthorityCollectionResourceExtensions
    {
        public static IResourceBuilder<CertificateAuthorityCollection> AddCertificateAuthorityCollection(this IDistributedApplicationBuilder builder, string name) { throw null; }

        public static IResourceBuilder<CertificateAuthorityCollection> WithCertificate(this IResourceBuilder<CertificateAuthorityCollection> builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { throw null; }

        public static IResourceBuilder<CertificateAuthorityCollection> WithCertificates(this IResourceBuilder<CertificateAuthorityCollection> builder, System.Collections.Generic.IEnumerable<System.Security.Cryptography.X509Certificates.X509Certificate2> certificates) { throw null; }

        public static IResourceBuilder<CertificateAuthorityCollection> WithCertificates(this IResourceBuilder<CertificateAuthorityCollection> builder, System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates) { throw null; }

        public static IResourceBuilder<CertificateAuthorityCollection> WithCertificatesFromFile(this IResourceBuilder<CertificateAuthorityCollection> builder, string pemFilePath, System.Func<System.Security.Cryptography.X509Certificates.X509Certificate2, bool>? filter = null) { throw null; }

        public static IResourceBuilder<CertificateAuthorityCollection> WithCertificatesFromStore(this IResourceBuilder<CertificateAuthorityCollection> builder, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Func<System.Security.Cryptography.X509Certificates.X509Certificate2, bool>? filter = null) { throw null; }
    }

    public sealed partial class CertificateTrustConfigurationCallbackAnnotation : IResourceAnnotation
    {
        public CertificateTrustConfigurationCallbackAnnotation(System.Func<CertificateTrustConfigurationCallbackAnnotationContext, System.Threading.Tasks.Task> callback) { }

        public System.Func<CertificateTrustConfigurationCallbackAnnotationContext, System.Threading.Tasks.Task> Callback { get { throw null; } }
    }

    public sealed partial class CertificateTrustConfigurationCallbackAnnotationContext
    {
        public required System.Collections.Generic.List<object> Arguments { get { throw null; } init { } }

        public required System.Threading.CancellationToken CancellationToken { get { throw null; } init { } }

        public required ReferenceExpression CertificateBundlePath { get { throw null; } init { } }

        public required ReferenceExpression CertificateDirectoriesPath { get { throw null; } init { } }

        public required System.Collections.Generic.Dictionary<string, object> EnvironmentVariables { get { throw null; } init { } }

        public required DistributedApplicationExecutionContext ExecutionContext { get { throw null; } init { } }

        public required IResource Resource { get { throw null; } init { } }

        public required CertificateTrustScope Scope { get { throw null; } init { } }
    }

    public enum CertificateTrustScope
    {
        Append = 0,
        Override = 1,
        System = 2,
        None = 3
    }

    public partial class CommandLineArgsCallbackAnnotation : IResourceAnnotation
    {
        public CommandLineArgsCallbackAnnotation(System.Action<System.Collections.Generic.IList<object>> callback) { }

        public CommandLineArgsCallbackAnnotation(System.Func<CommandLineArgsCallbackContext, System.Threading.Tasks.Task> callback) { }

        public System.Func<CommandLineArgsCallbackContext, System.Threading.Tasks.Task> Callback { get { throw null; } }
    }

    public sealed partial class CommandLineArgsCallbackContext
    {
        public CommandLineArgsCallbackContext(System.Collections.Generic.IList<object> args, IResource resource, System.Threading.CancellationToken cancellationToken = default) { }

        public CommandLineArgsCallbackContext(System.Collections.Generic.IList<object> args, System.Threading.CancellationToken cancellationToken = default) { }

        public System.Collections.Generic.IList<object> Args { get { throw null; } }

        public System.Threading.CancellationToken CancellationToken { get { throw null; } }

        public DistributedApplicationExecutionContext ExecutionContext { get { throw null; } init { } }

        public Microsoft.Extensions.Logging.ILogger Logger { get { throw null; } init { } }

        public IResource Resource { get { throw null; } }
    }

    public partial class CommandOptions
    {
        public string? ConfirmationMessage { get { throw null; } set { } }

        public string? Description { get { throw null; } set { } }

        public string? IconName { get { throw null; } set { } }

        public IconVariant? IconVariant { get { throw null; } set { } }

        public bool IsHighlighted { get { throw null; } set { } }

        public object? Parameter { get { throw null; } set { } }

        public System.Func<UpdateCommandStateContext, ResourceCommandState>? UpdateState { get { throw null; } set { } }
    }

    public static partial class CommandResults
    {
        public static ExecuteCommandResult Canceled() { throw null; }

        public static ExecuteCommandResult Failure(System.Exception exception) { throw null; }

        public static ExecuteCommandResult Failure(string? errorMessage = null) { throw null; }

        public static ExecuteCommandResult Success() { throw null; }
    }

    public partial class ConnectionStringAvailableEvent : Eventing.IDistributedApplicationResourceEvent, Eventing.IDistributedApplicationEvent
    {
        public ConnectionStringAvailableEvent(IResource resource, System.IServiceProvider services) { }

        public IResource Resource { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    public partial class ConnectionStringRedirectAnnotation : IResourceAnnotation
    {
        public ConnectionStringRedirectAnnotation(IResourceWithConnectionString resource) { }

        public IResourceWithConnectionString Resource { get { throw null; } }
    }

    public partial class ConnectionStringReference : IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public ConnectionStringReference(IResourceWithConnectionString resource, bool optional) { }

        string IManifestExpressionProvider.ValueExpression { get { throw null; } }

        System.Collections.Generic.IEnumerable<object> IValueWithReferences.References { get { throw null; } }

        public bool Optional { get { throw null; } }

        public IResourceWithConnectionString Resource { get { throw null; } }

        System.Threading.Tasks.ValueTask<string?> IValueProvider.GetValueAsync(ValueProviderContext context, System.Threading.CancellationToken cancellationToken) { throw null; }

        System.Threading.Tasks.ValueTask<string?> IValueProvider.GetValueAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    }

    public sealed partial class ContainerCertificatePathsAnnotation : IResourceAnnotation
    {
        public static System.Collections.Immutable.ImmutableList<string> DefaultCertificateBundlePaths;
        public static System.Collections.Immutable.ImmutableList<string> DefaultCertificateDirectoriesPaths;
        public const string DefaultCustomCertificatesDestination = "/usr/lib/ssl/aspire";
        public string? CustomCertificatesDestination { get { throw null; } init { } }

        public System.Collections.Generic.List<string>? DefaultCertificateBundles { get { throw null; } init { } }

        public System.Collections.Generic.List<string>? DefaultCertificateDirectories { get { throw null; } init { } }
    }

    public sealed partial class ContainerDirectory : ContainerFileSystemItem
    {
        public System.Collections.Generic.IEnumerable<ContainerFileSystemItem> Entries { get { throw null; } set { } }

        public static System.Collections.Generic.IEnumerable<ContainerFileSystemItem> GetFileSystemItemsFromPath(string path, string searchPattern = "*", System.IO.SearchOption searchOptions = System.IO.SearchOption.TopDirectoryOnly, System.Action<ContainerFileSystemItem>? updateItem = null) { throw null; }
    }

    public sealed partial class ContainerFile : ContainerFileBase
    {
    }

    public abstract partial class ContainerFileBase : ContainerFileSystemItem
    {
        public string? Contents { get { throw null; } set { } }

        public bool? ContinueOnError { get { throw null; } set { } }

        public string? SourcePath { get { throw null; } set { } }
    }

    public sealed partial class ContainerFilesDestinationAnnotation : IResourceAnnotation
    {
        public required string DestinationPath { get { throw null; } init { } }

        public required IResource Source { get { throw null; } init { } }
    }

    public sealed partial class ContainerFilesSourceAnnotation : IResourceAnnotation
    {
        public required string SourcePath { get { throw null; } init { } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nw}, DestinationPath = {DestinationPath}")]
    public sealed partial class ContainerFileSystemCallbackAnnotation : IResourceAnnotation
    {
        public required System.Func<ContainerFileSystemCallbackContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ContainerFileSystemItem>>> Callback { get { throw null; } init { } }

        public int? DefaultGroup { get { throw null; } init { } }

        public int? DefaultOwner { get { throw null; } init { } }

        public required string DestinationPath { get { throw null; } init { } }

        public System.IO.UnixFileMode? Umask { get { throw null; } set { } }
    }

    public sealed partial class ContainerFileSystemCallbackContext
    {
        public required IResource Model { get { throw null; } init { } }

        public required System.IServiceProvider ServiceProvider { get { throw null; } init { } }
    }

    public abstract partial class ContainerFileSystemItem
    {
        public int? Group { get { throw null; } set { } }

        public System.IO.UnixFileMode Mode { get { throw null; } set { } }

        public string Name { get { throw null; } set { } }

        public int? Owner { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Image = {Image}, Tag = {Tag}, SHA256 = {SHA256}")]
    public sealed partial class ContainerImageAnnotation : IResourceAnnotation
    {
        public required string Image { get { throw null; } set { } }

        public string? Registry { get { throw null; } set { } }

        public string? SHA256 { get { throw null; } set { } }

        public string? Tag { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}")]
    public sealed partial class ContainerImagePullPolicyAnnotation : IResourceAnnotation
    {
        public required ImagePullPolicy ImagePullPolicy { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("{ValueExpression}")]
    public partial class ContainerImageReference : IManifestExpressionProvider, IValueWithReferences, IValueProvider
    {
        public ContainerImageReference(IResource resource) { }

        public System.Collections.Generic.IEnumerable<object> References { get { throw null; } }

        public IResource Resource { get { throw null; } }

        public string ValueExpression { get { throw null; } }

        System.Threading.Tasks.ValueTask<string?> IValueProvider.GetValueAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    }

    public enum ContainerLifetime
    {
        Session = 0,
        Persistent = 1
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}")]
    public sealed partial class ContainerLifetimeAnnotation : IResourceAnnotation
    {
        public required ContainerLifetime Lifetime { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Source = {Source}, Target = {Target}")]
    public sealed partial class ContainerMountAnnotation : IResourceAnnotation
    {
        public ContainerMountAnnotation(string? source, string target, ContainerMountType type, bool isReadOnly) { }

        public bool IsReadOnly { get { throw null; } }

        public string? Source { get { throw null; } }

        public string Target { get { throw null; } }

        public ContainerMountType Type { get { throw null; } }
    }

    public enum ContainerMountType
    {
        BindMount = 0,
        Volume = 1
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Name = {Name}")]
    public sealed partial class ContainerNameAnnotation : IResourceAnnotation
    {
        public required string Name { get { throw null; } set { } }
    }

    public sealed partial class ContainerOpenSSLCertificateFile : ContainerFileBase
    {
    }

    [System.Diagnostics.DebuggerDisplay("{ValueExpression}")]
    public partial class ContainerPortReference : IManifestExpressionProvider, IValueWithReferences, IValueProvider
    {
        public ContainerPortReference(IResource resource) { }

        public System.Collections.Generic.IEnumerable<object> References { get { throw null; } }

        public IResource Resource { get { throw null; } }

        public string ValueExpression { get { throw null; } }

        System.Threading.Tasks.ValueTask<string?> IValueProvider.GetValueAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    }

    public partial class ContainerRegistryReferenceAnnotation : IResourceAnnotation
    {
        public ContainerRegistryReferenceAnnotation(IContainerRegistry registry) { }

        public IContainerRegistry Registry { get { throw null; } }
    }

    public partial class ContainerResource : Resource, IResourceWithEnvironment, IResource, IResourceWithArgs, IResourceWithEndpoints, IResourceWithWaitSupport, IResourceWithProbes, IComputeResource
    {
        public ContainerResource(string name, string? entrypoint = null) : base(default!) { }

        public string? Entrypoint { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}")]
    public sealed partial class ContainerRuntimeArgsCallbackAnnotation : IResourceAnnotation
    {
        public ContainerRuntimeArgsCallbackAnnotation(System.Action<System.Collections.Generic.IList<object>> callback) { }

        public ContainerRuntimeArgsCallbackAnnotation(System.Func<ContainerRuntimeArgsCallbackContext, System.Threading.Tasks.Task> callback) { }

        public System.Func<ContainerRuntimeArgsCallbackContext, System.Threading.Tasks.Task> Callback { get { throw null; } }
    }

    public sealed partial class ContainerRuntimeArgsCallbackContext
    {
        public ContainerRuntimeArgsCallbackContext(System.Collections.Generic.IList<object> args, System.Threading.CancellationToken cancellationToken = default) { }

        public System.Collections.Generic.IList<object> Args { get { throw null; } }

        public System.Threading.CancellationToken CancellationToken { get { throw null; } }
    }

    public partial class CSharpAppResource : ProjectResource
    {
        public CSharpAppResource(string name) : base(default!) { }
    }

    public static partial class CustomResourceKnownProperties
    {
        public static string ConnectionString { get { throw null; } }

        public static string Source { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("ResourceType = {ResourceType,nq}, State = {State?.Text,nq}, HealthStatus = {HealthStatus?.ToString(),nq}, Properties = {Properties.Length}")]
    public sealed partial record CustomResourceSnapshot()
    {
        public System.Collections.Immutable.ImmutableArray<ResourceCommandSnapshot> Commands { get { throw null; } init { } }

        public System.DateTime? CreationTimeStamp { get { throw null; } init { } }

        public System.Collections.Immutable.ImmutableArray<EnvironmentVariableSnapshot> EnvironmentVariables { get { throw null; } init { } }

        public int? ExitCode { get { throw null; } init { } }

        public System.Collections.Immutable.ImmutableArray<HealthReportSnapshot> HealthReports { get { throw null; } }

        public Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? HealthStatus { get { throw null; } }

        public string? IconName { get { throw null; } init { } }

        public IconVariant? IconVariant { get { throw null; } init { } }

        public bool IsHidden { get { throw null; } init { } }

        public required System.Collections.Immutable.ImmutableArray<ResourcePropertySnapshot> Properties { get { throw null; } init { } }

        public System.Collections.Immutable.ImmutableArray<RelationshipSnapshot> Relationships { get { throw null; } init { } }

        public required string ResourceType { get { throw null; } init { } }

        public System.DateTime? StartTimeStamp { get { throw null; } init { } }

        public ResourceStateSnapshot? State { get { throw null; } init { } }

        public System.DateTime? StopTimeStamp { get { throw null; } init { } }

        public System.Collections.Immutable.ImmutableArray<UrlSnapshot> Urls { get { throw null; } init { } }

        public System.Collections.Immutable.ImmutableArray<VolumeSnapshot> Volumes { get { throw null; } init { } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, LaunchProfileName = {LaunchProfileName}")]
    public sealed partial class DefaultLaunchProfileAnnotation : IResourceAnnotation
    {
        public DefaultLaunchProfileAnnotation(string launchProfileName) { }

        public string LaunchProfileName { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}")]
    [System.Diagnostics.CodeAnalysis.Experimental("ASPIRECOMPUTE001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class DeploymentImageTagCallbackAnnotation : IResourceAnnotation
    {
        public DeploymentImageTagCallbackAnnotation(System.Func<DeploymentImageTagCallbackAnnotationContext, string> callback) { }

        public DeploymentImageTagCallbackAnnotation(System.Func<DeploymentImageTagCallbackAnnotationContext, System.Threading.Tasks.Task<string>> callback) { }

        public System.Func<DeploymentImageTagCallbackAnnotationContext, System.Threading.Tasks.Task<string>> Callback { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIRECOMPUTE001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class DeploymentImageTagCallbackAnnotationContext
    {
        public required System.Threading.CancellationToken CancellationToken { get { throw null; } init { } }

        public required IResource Resource { get { throw null; } init { } }
    }

    public sealed partial class DeploymentTargetAnnotation : IResourceAnnotation
    {
        public DeploymentTargetAnnotation(IResource target) { }

        public IComputeEnvironmentResource? ComputeEnvironment { get { throw null; } set { } }

        public IContainerRegistry? ContainerRegistry { get { throw null; } set { } }

        public IResource DeploymentTarget { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}")]
    public sealed partial class DisableForwardedHeadersAnnotation : IResourceAnnotation
    {
    }

    [System.Diagnostics.DebuggerDisplay("Resources = {Resources.Count}")]
    public partial class DistributedApplicationModel
    {
        public DistributedApplicationModel(IResourceCollection resources) { }

        public DistributedApplicationModel(System.Collections.Generic.IEnumerable<IResource> resources) { }

        public IResourceCollection Resources { get { throw null; } }
    }

    public static partial class DistributedApplicationModelExtensions
    {
        public static System.Collections.Generic.IEnumerable<IResource> GetBuildResources(this DistributedApplicationModel model) { throw null; }

        public static System.Collections.Generic.IEnumerable<IResource> GetComputeResources(this DistributedApplicationModel model) { throw null; }
    }

    [System.Obsolete("Use DockerfileBuildAnnotation to define docker build arguments.")]
    public sealed partial class DockerBuildArg
    {
        public DockerBuildArg(string name, object? value = null) { }

        public string Name { get { throw null; } init { } }

        public object? Value { get { throw null; } init { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class DockerfileBaseImageAnnotation : IResourceAnnotation
    {
        public string? BuildImage { get { throw null; } set { } }

        public string? RuntimeImage { get { throw null; } set { } }
    }

    public partial class DockerfileBuildAnnotation : IResourceAnnotation
    {
        public DockerfileBuildAnnotation(string contextPath, string dockerfilePath, string? stage) { }

        public System.Collections.Generic.Dictionary<string, object?> BuildArguments { get { throw null; } }

        public System.Collections.Generic.Dictionary<string, object> BuildSecrets { get { throw null; } }

        public string ContextPath { get { throw null; } }

        public System.Func<DockerfileFactoryContext, System.Threading.Tasks.Task<string>>? DockerfileFactory { get { throw null; } init { } }

        public string DockerfilePath { get { throw null; } }

        public bool HasEntrypoint { get { throw null; } set { } }

        public string? ImageName { get { throw null; } set { } }

        public string? ImageTag { get { throw null; } set { } }

        public string? Stage { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class DockerfileBuilderCallbackAnnotation : IResourceAnnotation
    {
        public DockerfileBuilderCallbackAnnotation() { }

        public DockerfileBuilderCallbackAnnotation(System.Func<DockerfileBuilderCallbackContext, System.Threading.Tasks.Task> callback) { }

        public System.Collections.Generic.IReadOnlyList<System.Func<DockerfileBuilderCallbackContext, System.Threading.Tasks.Task>> Callbacks { get { throw null; } }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public void AddCallback(System.Func<DockerfileBuilderCallbackContext, System.Threading.Tasks.Task> callback) { }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class DockerfileBuilderCallbackContext
    {
        public DockerfileBuilderCallbackContext(IResource resource, Docker.DockerfileBuilder builder, System.IServiceProvider services, System.Threading.CancellationToken cancellationToken) { }

        public Docker.DockerfileBuilder Builder { get { throw null; } }

        public System.Threading.CancellationToken CancellationToken { get { throw null; } }

        public IResource Resource { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    public sealed partial class DockerfileFactoryContext
    {
        public System.Threading.CancellationToken CancellationToken { get { throw null; } init { } }

        public required IResource Resource { get { throw null; } init { } }

        public required System.IServiceProvider Services { get { throw null; } init { } }
    }

    public sealed partial class EmulatorResourceAnnotation : IResourceAnnotation
    {
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Name = {Name}")]
    public sealed partial class EndpointAnnotation : IResourceAnnotation
    {
        public EndpointAnnotation(System.Net.Sockets.ProtocolType protocol, NetworkIdentifier? networkID, string? uriScheme = null, string? transport = null, string? name = null, int? port = null, int? targetPort = null, bool? isExternal = null, bool isProxied = true) { }

        public EndpointAnnotation(System.Net.Sockets.ProtocolType protocol, string? uriScheme = null, string? transport = null, string? name = null, int? port = null, int? targetPort = null, bool? isExternal = null, bool isProxied = true) { }

        public NetworkEndpointSnapshotList AllAllocatedEndpoints { get { throw null; } }

        public AllocatedEndpoint? AllocatedEndpoint { get { throw null; } set { } }

        public ValueSnapshot<AllocatedEndpoint> AllocatedEndpointSnapshot { get { throw null; } }

        public NetworkIdentifier DefaultNetworkID { get { throw null; } }

        public bool IsExternal { get { throw null; } set { } }

        public bool IsProxied { get { throw null; } set { } }

        public string Name { get { throw null; } set { } }

        public int? Port { get { throw null; } set { } }

        public System.Net.Sockets.ProtocolType Protocol { get { throw null; } set { } }

        public string TargetHost { get { throw null; } set { } }

        public int? TargetPort { get { throw null; } set { } }

        public string Transport { get { throw null; } set { } }

        public string UriScheme { get { throw null; } set { } }
    }

    public enum EndpointBindingMode
    {
        SingleAddress = 0,
        DualStackAnyAddresses = 1,
        IPv4AnyAddresses = 2,
        IPv6AnyAddresses = 3
    }

    [System.AttributeUsage(System.AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed partial class EndpointNameAttribute : System.Attribute, IModelNameParameter
    {
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPROBES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class EndpointProbeAnnotation : ProbeAnnotation
    {
        public required EndpointReference EndpointReference { get { throw null; } init { } }

        public required string Path { get { throw null; } init { } }
    }

    public enum EndpointProperty
    {
        Url = 0,
        Host = 1,
        IPV4Host = 2,
        Port = 3,
        Scheme = 4,
        TargetPort = 5,
        HostAndPort = 6
    }

    [System.Diagnostics.DebuggerDisplay("Resource = {Resource.Name}, EndpointName = {EndpointName}, IsAllocated = {IsAllocated}")]
    public sealed partial class EndpointReference : IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public EndpointReference(IResourceWithEndpoints owner, EndpointAnnotation endpoint, NetworkIdentifier? contextNetworkID) { }

        public EndpointReference(IResourceWithEndpoints owner, EndpointAnnotation endpoint) { }

        public EndpointReference(IResourceWithEndpoints owner, string endpointName, NetworkIdentifier? contextNetworkID = null) { }

        public EndpointReference(IResourceWithEndpoints owner, string endpointName) { }

        string IManifestExpressionProvider.ValueExpression { get { throw null; } }

        System.Collections.Generic.IEnumerable<object> IValueWithReferences.References { get { throw null; } }

        public NetworkIdentifier? ContextNetworkID { get { throw null; } }

        public EndpointAnnotation EndpointAnnotation { get { throw null; } }

        public string EndpointName { get { throw null; } }

        public string? ErrorMessage { get { throw null; } init { } }

        public bool Exists { get { throw null; } }

        public string Host { get { throw null; } }

        public bool IsAllocated { get { throw null; } }

        public int Port { get { throw null; } }

        public IResourceWithEndpoints Resource { get { throw null; } }

        public string Scheme { get { throw null; } }

        public int? TargetPort { get { throw null; } }

        public string Url { get { throw null; } }

        public System.Threading.Tasks.ValueTask<string?> GetValueAsync(ValueProviderContext context, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.ValueTask<string?> GetValueAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public EndpointReferenceExpression Property(EndpointProperty property) { throw null; }
    }

    public partial class EndpointReferenceExpression : IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public EndpointReferenceExpression(EndpointReference endpointReference, EndpointProperty property) { }

        System.Collections.Generic.IEnumerable<object> IValueWithReferences.References { get { throw null; } }

        public EndpointReference Endpoint { get { throw null; } }

        public EndpointProperty Property { get { throw null; } }

        public string ValueExpression { get { throw null; } }

        public System.Threading.Tasks.ValueTask<string?> GetValueAsync(ValueProviderContext context, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.ValueTask<string?> GetValueAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerToString(),nq}")]
    public partial class EnvironmentCallbackAnnotation : IResourceAnnotation
    {
        public EnvironmentCallbackAnnotation(System.Action<EnvironmentCallbackContext> callback) { }

        public EnvironmentCallbackAnnotation(System.Action<System.Collections.Generic.Dictionary<string, object>> callback) { }

        public EnvironmentCallbackAnnotation(System.Func<EnvironmentCallbackContext, System.Threading.Tasks.Task> callback) { }

        public EnvironmentCallbackAnnotation(string name, System.Func<string> callback) { }

        public System.Func<EnvironmentCallbackContext, System.Threading.Tasks.Task> Callback { get { throw null; } }
    }

    public partial class EnvironmentCallbackContext
    {
        public EnvironmentCallbackContext(DistributedApplicationExecutionContext executionContext, IResource resource, System.Collections.Generic.Dictionary<string, object>? environmentVariables = null, System.Threading.CancellationToken cancellationToken = default) { }

        public EnvironmentCallbackContext(DistributedApplicationExecutionContext executionContext, System.Collections.Generic.Dictionary<string, object>? environmentVariables = null, System.Threading.CancellationToken cancellationToken = default) { }

        public System.Threading.CancellationToken CancellationToken { get { throw null; } }

        public System.Collections.Generic.Dictionary<string, object> EnvironmentVariables { get { throw null; } }

        public DistributedApplicationExecutionContext ExecutionContext { get { throw null; } }

        public Microsoft.Extensions.Logging.ILogger Logger { get { throw null; } set { } }

        public IResource Resource { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("{Value}", Name = "{Name}")]
    public sealed partial record EnvironmentVariableSnapshot(string Name, string? Value, bool IsFromSpec)
    {
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}")]
    public sealed partial class ExcludeLaunchProfileAnnotation : IResourceAnnotation
    {
    }

    [System.Diagnostics.DebuggerDisplay("Command = {Command,nq}, WorkingDirectory = {WorkingDirectory}")]
    public sealed partial class ExecutableAnnotation : IResourceAnnotation
    {
        public required string Command { get { throw null; } set { } }

        public required string WorkingDirectory { get { throw null; } set { } }
    }

    public partial class ExecutableResource : Resource, IResourceWithEnvironment, IResource, IResourceWithArgs, IResourceWithEndpoints, IResourceWithWaitSupport, IResourceWithProbes, IComputeResource
    {
        public ExecutableResource(string name, string command, string workingDirectory) : base(default!) { }

        public string Command { get { throw null; } }

        public string WorkingDirectory { get { throw null; } }
    }

    public sealed partial class ExecuteCommandContext
    {
        public required System.Threading.CancellationToken CancellationToken { get { throw null; } init { } }

        public required string ResourceName { get { throw null; } init { } }

        public required System.IServiceProvider ServiceProvider { get { throw null; } init { } }
    }

    public sealed partial class ExecuteCommandResult
    {
        public bool Canceled { get { throw null; } init { } }

        public string? ErrorMessage { get { throw null; } init { } }

        public required bool Success { get { throw null; } init { } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}")]
    public sealed partial class ExplicitStartupAnnotation : IResourceAnnotation
    {
    }

    public sealed partial class GenerateParameterDefault : ParameterDefault
    {
        public bool Lower { get { throw null; } set { } }

        public int MinLength { get { throw null; } set { } }

        public int MinLower { get { throw null; } set { } }

        public int MinNumeric { get { throw null; } set { } }

        public int MinSpecial { get { throw null; } set { } }

        public int MinUpper { get { throw null; } set { } }

        public bool Numeric { get { throw null; } set { } }

        public bool Special { get { throw null; } set { } }

        public bool Upper { get { throw null; } set { } }

        public override string GetDefaultValue() { throw null; }

        public override void WriteToManifest(Publishing.ManifestPublishingContext context) { }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Key = {Key}")]
    public partial class HealthCheckAnnotation : IResourceAnnotation
    {
        public HealthCheckAnnotation(string key) { }

        public string Key { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("{Status}", Name = "{Name}")]
    public sealed partial record HealthReportSnapshot(string Name, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? Status, string? Description, string? ExceptionText)
    {
        public System.DateTime? LastRunAt { get { throw null; } init { } }
    }

    public partial record HostUrl(string Url) : IValueProvider, IManifestExpressionProvider
    {
        string IManifestExpressionProvider.ValueExpression { get { throw null; } }

        System.Threading.Tasks.ValueTask<string?> IValueProvider.GetValueAsync(ValueProviderContext context, System.Threading.CancellationToken cancellationToken) { throw null; }

        System.Threading.Tasks.ValueTask<string?> IValueProvider.GetValueAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    }

    public partial class HttpCommandOptions : CommandOptions
    {
        public System.Func<EndpointReference>? EndpointSelector { get { throw null; } set { } }

        public System.Func<HttpCommandResultContext, System.Threading.Tasks.Task<ExecuteCommandResult>>? GetCommandResult { get { throw null; } set { } }

        public string? HttpClientName { get { throw null; } set { } }

        public System.Net.Http.HttpMethod? Method { get { throw null; } set { } }

        public System.Func<HttpCommandRequestContext, System.Threading.Tasks.Task>? PrepareRequest { get { throw null; } set { } }
    }

    public sealed partial class HttpCommandRequestContext
    {
        public required System.Threading.CancellationToken CancellationToken { get { throw null; } init { } }

        public required EndpointReference Endpoint { get { throw null; } init { } }

        public required System.Net.Http.HttpClient HttpClient { get { throw null; } init { } }

        public required System.Net.Http.HttpRequestMessage Request { get { throw null; } init { } }

        public required string ResourceName { get { throw null; } init { } }

        public required System.IServiceProvider ServiceProvider { get { throw null; } init { } }
    }

    public sealed partial class HttpCommandResultContext
    {
        public required System.Threading.CancellationToken CancellationToken { get { throw null; } init { } }

        public required EndpointReference Endpoint { get { throw null; } init { } }

        public required System.Net.Http.HttpClient HttpClient { get { throw null; } init { } }

        public required string ResourceName { get { throw null; } init { } }

        public required System.Net.Http.HttpResponseMessage Response { get { throw null; } init { } }

        public required System.IServiceProvider ServiceProvider { get { throw null; } init { } }
    }

    public partial interface IAspireStore
    {
        string BasePath { get; }

        string GetFileNameWithContent(string filenameTemplate, System.IO.Stream contentStream);
    }

    public partial interface IComputeEnvironmentResource : IResource
    {
        [System.Diagnostics.CodeAnalysis.Experimental("ASPIRECOMPUTE002", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        ReferenceExpression GetHostAddressExpression(EndpointReference endpointReference);
    }

    public partial interface IComputeResource : IResource
    {
    }

    public partial interface IContainerRegistry
    {
        ReferenceExpression Endpoint { get; }

        ReferenceExpression Name { get; }
    }

    public enum IconVariant
    {
        Regular = 0,
        Filled = 1
    }

    public enum ImagePullPolicy
    {
        Default = 0,
        Always = 1,
        Missing = 2
    }

    public partial interface IManifestExpressionProvider
    {
        string ValueExpression { get; }
    }

    public partial interface IModelNameParameter
    {
    }

    public partial class InitializeResourceEvent : Eventing.IDistributedApplicationResourceEvent, Eventing.IDistributedApplicationEvent
    {
        public InitializeResourceEvent(IResource resource, Eventing.IDistributedApplicationEventing distributedApplicationEventing, ResourceLoggerService resourceLoggerService, ResourceNotificationService resourceNotificationService, System.IServiceProvider services) { }

        public Eventing.IDistributedApplicationEventing Eventing { get { throw null; } }

        public Microsoft.Extensions.Logging.ILogger Logger { get { throw null; } }

        public ResourceNotificationService Notifications { get { throw null; } }

        public IResource Resource { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREINTERACTION001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class InputGeneratorAnnotation : IResourceAnnotation
    {
        public InputGeneratorAnnotation(System.Func<ParameterResource, InteractionInput> inputGenerator) { }

        public System.Func<ParameterResource, InteractionInput> InputGenerator { get { throw null; } }
    }

    public partial interface IResource
    {
        ResourceAnnotationCollection Annotations { get; }

        string Name { get; }
    }

    public partial interface IResourceAnnotation
    {
    }

    public partial interface IResourceBuilder<out T>
        where T : IResource
    {
        IDistributedApplicationBuilder ApplicationBuilder { get; }

        T Resource { get; }

        IResourceBuilder<T> WithAnnotation<TAnnotation>(TAnnotation annotation, ResourceAnnotationMutationBehavior behavior = ResourceAnnotationMutationBehavior.Append)
            where TAnnotation : IResourceAnnotation;
        IResourceBuilder<T> WithAnnotation<TAnnotation>(ResourceAnnotationMutationBehavior behavior = ResourceAnnotationMutationBehavior.Append)
            where TAnnotation : IResourceAnnotation, new();
    }

    public partial interface IResourceCollection : System.Collections.Generic.IList<IResource>, System.Collections.Generic.ICollection<IResource>, System.Collections.Generic.IEnumerable<IResource>, System.Collections.IEnumerable
    {
    }

    public partial interface IResourceWithArgs : IResource
    {
    }

    public partial interface IResourceWithConnectionString : IResource, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        string IManifestExpressionProvider.ValueExpression { get; }

        System.Collections.Generic.IEnumerable<object> IValueWithReferences.References { get; }

        string? ConnectionStringEnvironmentVariable { get; }

        ReferenceExpression ConnectionStringExpression { get; }

        System.Threading.Tasks.ValueTask<string?> IValueProvider.GetValueAsync(ValueProviderContext context, System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.ValueTask<string?> IValueProvider.GetValueAsync(System.Threading.CancellationToken cancellationToken);
        System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, ReferenceExpression>> GetConnectionProperties();
        System.Threading.Tasks.ValueTask<string?> GetConnectionStringAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    public partial interface IResourceWithEndpoints : IResource
    {
    }

    public partial interface IResourceWithEnvironment : IResource
    {
    }

    public partial interface IResourceWithoutLifetime : IResource
    {
    }

    public partial interface IResourceWithParameters : IResource
    {
        System.Collections.Generic.IDictionary<string, object?> Parameters { get; }
    }

    public partial interface IResourceWithParent : IResource
    {
        IResource Parent { get; }
    }

    public partial interface IResourceWithParent<out T> : IResourceWithParent, IResource where T : IResource
    {
        IResource IResourceWithParent.Parent { get; }

        T Parent { get; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPROBES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IResourceWithProbes : IResource
    {
    }

    public partial interface IResourceWithWaitSupport : IResource
    {
    }

    public partial interface IValueProvider
    {
        System.Threading.Tasks.ValueTask<string?> GetValueAsync(ValueProviderContext context, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.ValueTask<string?> GetValueAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    public partial interface IValueWithReferences
    {
        System.Collections.Generic.IEnumerable<object> References { get; }
    }

    public static partial class KnownHostNames
    {
        public const string DefaultContainerTunnelHostName = "aspire.dev.internal";
        public const string DockerDesktopHostBridge = "host.docker.internal";
        public const string Localhost = "localhost";
    }

    public static partial class KnownNetworkIdentifiers
    {
        public static readonly NetworkIdentifier DefaultAspireContainerNetwork;
        public static readonly NetworkIdentifier LocalhostNetwork;
        public static readonly NetworkIdentifier PublicInternet;
    }

    public static partial class KnownResourceCommands
    {
        public static readonly string RestartCommand;
        public static readonly string StartCommand;
        public static readonly string StopCommand;
    }

    public static partial class KnownResourceStates
    {
        public static readonly string Active;
        public static readonly string Exited;
        public static readonly string FailedToStart;
        public static readonly string Finished;
        [System.Obsolete("Use CustomResourceSnapshot.IsHidden instead.")]
        public static readonly string Hidden;
        public static readonly string NotStarted;
        public static readonly string Running;
        public static readonly string RuntimeUnhealthy;
        public static readonly string Starting;
        public static readonly string Stopping;
        public static readonly System.Collections.Generic.IReadOnlyList<string> TerminalStates;
        public static readonly string Waiting;
    }

    public static partial class KnownResourceStateStyles
    {
        public static readonly string Error;
        public static readonly string Info;
        public static readonly string Success;
        public static readonly string Warn;
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, LaunchProfileName = {LaunchProfileName}")]
    public sealed partial class LaunchProfileAnnotation : IResourceAnnotation
    {
        public LaunchProfileAnnotation(string launchProfileName) { }

        public string LaunchProfileName { get { throw null; } }
    }

    public readonly partial struct LogLine : System.IEquatable<LogLine>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public LogLine(int LineNumber, string Content, bool IsErrorMessage) { }

        public string Content { get { throw null; } init { } }

        public bool IsErrorMessage { get { throw null; } init { } }

        public int LineNumber { get { throw null; } init { } }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public readonly void Deconstruct(out int LineNumber, out string Content, out bool IsErrorMessage) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public readonly bool Equals(LogLine other) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly bool Equals(object obj) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly int GetHashCode() { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public static bool operator ==(LogLine left, LogLine right) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public static bool operator !=(LogLine left, LogLine right) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly string ToString() { throw null; }
    }

    public readonly partial struct LogSubscriber : System.IEquatable<LogSubscriber>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public LogSubscriber(string Name, bool AnySubscribers) { }

        public bool AnySubscribers { get { throw null; } init { } }

        public string Name { get { throw null; } init { } }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public readonly void Deconstruct(out string Name, out bool AnySubscribers) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public readonly bool Equals(LogSubscriber other) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly bool Equals(object obj) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly int GetHashCode() { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public static bool operator ==(LogSubscriber left, LogSubscriber right) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public static bool operator !=(LogSubscriber left, LogSubscriber right) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly string ToString() { throw null; }
    }

    public partial class ManifestPublishingCallbackAnnotation : IResourceAnnotation
    {
        public ManifestPublishingCallbackAnnotation(System.Action<Publishing.ManifestPublishingContext>? callback) { }

        public ManifestPublishingCallbackAnnotation(System.Func<Publishing.ManifestPublishingContext, System.Threading.Tasks.Task>? callback) { }

        public System.Func<Publishing.ManifestPublishingContext, System.Threading.Tasks.Task>? Callback { get { throw null; } }

        public static ManifestPublishingCallbackAnnotation Ignore { get { throw null; } }
    }

    public partial record NetworkEndpointSnapshot(ValueSnapshot<AllocatedEndpoint> Snapshot, NetworkIdentifier NetworkID)
    {
    }

    public partial class NetworkEndpointSnapshotList : System.Collections.Generic.IEnumerable<NetworkEndpointSnapshot>, System.Collections.IEnumerable
    {
        public System.Collections.Generic.IEnumerator<NetworkEndpointSnapshot> GetEnumerator() { throw null; }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }

        public bool TryAdd(NetworkIdentifier networkID, ValueSnapshot<AllocatedEndpoint> snapshot) { throw null; }
    }

    public readonly partial struct NetworkIdentifier : System.IEquatable<NetworkIdentifier>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public NetworkIdentifier(string Value) { }

        public string Value { get { throw null; } init { } }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public readonly void Deconstruct(out string Value) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public readonly bool Equals(NetworkIdentifier other) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly bool Equals(object obj) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly int GetHashCode() { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public static bool operator ==(NetworkIdentifier left, NetworkIdentifier right) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public static bool operator !=(NetworkIdentifier left, NetworkIdentifier right) { throw null; }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public override readonly string ToString() { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}")]
    public partial class OtlpExporterAnnotation : IResourceAnnotation
    {
        public OtlpProtocol? RequiredProtocol { get { throw null; } init { } }
    }

    public abstract partial class ParameterDefault
    {
        public abstract string GetDefaultValue();
        public abstract void WriteToManifest(Publishing.ManifestPublishingContext context);
    }

    public partial class ParameterResource : Resource, IManifestExpressionProvider, IValueProvider
    {
        public ParameterResource(string name, System.Func<ParameterDefault?, string> callback, bool secret = false) : base(default!) { }

        public ParameterDefault? Default { get { throw null; } set { } }

        public string? Description { get { throw null; } set { } }

        public bool EnableDescriptionMarkdown { get { throw null; } set { } }

        public bool IsConnectionString { get { throw null; } set { } }

        public bool Secret { get { throw null; } }

        [System.Obsolete("Use GetValueAsync for async access or pass the ParameterResource directly to methods that accept it (e.g., environment variables).")]
        public string Value { get { throw null; } }

        public string ValueExpression { get { throw null; } }

        public System.Threading.Tasks.ValueTask<string?> GetValueAsync(ValueProviderContext _, System.Threading.CancellationToken cancellationToken) { throw null; }

        public System.Threading.Tasks.ValueTask<string?> GetValueAsync(System.Threading.CancellationToken cancellationToken) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPROBES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public abstract partial class ProbeAnnotation : IResourceAnnotation
    {
        public int FailureThreshold { get { throw null; } init { } }

        public int InitialDelaySeconds { get { throw null; } init { } }

        public int PeriodSeconds { get { throw null; } init { } }

        public int SuccessThreshold { get { throw null; } init { } }

        public int TimeoutSeconds { get { throw null; } set { } }

        public required ProbeType Type { get { throw null; } init { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPROBES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public enum ProbeType
    {
        Startup = 0,
        Readiness = 1,
        Liveness = 2
    }

    public partial class ProjectResource : Resource, IResourceWithEnvironment, IResource, IResourceWithArgs, IResourceWithServiceDiscovery, IResourceWithEndpoints, IResourceWithWaitSupport, IResourceWithProbes, IComputeResource
    {
        public ProjectResource(string name) : base(default!) { }
    }

    public static partial class ProjectResourceExtensions
    {
        public static IProjectMetadata GetProjectMetadata(this ProjectResource projectResource) { throw null; }

        public static System.Collections.Generic.IEnumerable<ProjectResource> GetProjectResources(this DistributedApplicationModel model) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Enabled = {Enabled}")]
    public sealed partial class ProxySupportAnnotation : IResourceAnnotation
    {
        public required bool ProxyEnabled { get { throw null; } set { } }
    }

    public sealed partial class ReferenceEnvironmentInjectionAnnotation : IResourceAnnotation
    {
        public ReferenceEnvironmentInjectionAnnotation(ReferenceEnvironmentInjectionFlags flags) { }

        public ReferenceEnvironmentInjectionFlags Flags { get { throw null; } }
    }

    [System.Flags]
    public enum ReferenceEnvironmentInjectionFlags
    {
        None = 0,
        ConnectionString = 1,
        ConnectionProperties = 2,
        ServiceDiscovery = 4,
        Endpoints = 8,
        All = 15
    }

    public partial class ReferenceExpression : IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        internal ReferenceExpression() { }

        public static readonly ReferenceExpression Empty;
        System.Collections.Generic.IEnumerable<object> IValueWithReferences.References { get { throw null; } }

        public string Format { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<string> ManifestExpressions { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<string?> StringFormats { get { throw null; } }

        public string ValueExpression { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<IValueProvider> ValueProviders { get { throw null; } }

        public static ReferenceExpression Create(in ExpressionInterpolatedStringHandler handler) { throw null; }

        public System.Threading.Tasks.ValueTask<string?> GetValueAsync(ValueProviderContext context, System.Threading.CancellationToken cancellationToken) { throw null; }

        public System.Threading.Tasks.ValueTask<string?> GetValueAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        public ref partial struct ExpressionInterpolatedStringHandler
        {
            private object _dummy;
            private int _dummyPrimitive;
            public ExpressionInterpolatedStringHandler(int literalLength, int formattedCount) { }

            public readonly void AppendFormatted(string? value, string? format = null) { }

            public readonly void AppendFormatted(string? value) { }

            public void AppendFormatted<T>(T valueProvider, string? format = null)
                where T : IValueProvider, IManifestExpressionProvider { }

            public void AppendFormatted<T>(T valueProvider)
                where T : IValueProvider, IManifestExpressionProvider { }

            public void AppendFormatted<T>(IResourceBuilder<T> valueProvider, string? format = null)
                where T : IResource, IValueProvider, IManifestExpressionProvider { }

            public void AppendFormatted<T>(IResourceBuilder<T> valueProvider)
                where T : IResource, IValueProvider, IManifestExpressionProvider { }

            public readonly void AppendLiteral(string value) { }
        }
    }

    public partial class ReferenceExpressionBuilder
    {
        public bool IsEmpty { get { throw null; } }

        public void Append(in ReferenceExpressionBuilderInterpolatedStringHandler handler) { }

        public void AppendFormatted(string? value) { }

        public void AppendFormatted<T>(T valueProvider, string? format)
            where T : IValueProvider, IManifestExpressionProvider { }

        public void AppendFormatted<T>(T valueProvider)
            where T : IValueProvider, IManifestExpressionProvider { }

        public void AppendLiteral(string value) { }

        public ReferenceExpression Build() { throw null; }

        [System.Runtime.CompilerServices.InterpolatedStringHandler]
        public ref partial struct ReferenceExpressionBuilderInterpolatedStringHandler
        {
            private object _dummy;
            private int _dummyPrimitive;
            public ReferenceExpressionBuilderInterpolatedStringHandler(int literalLength, int formattedCount, ReferenceExpressionBuilder builder) { }

            public readonly void AppendFormatted(string? value) { }

            public void AppendFormatted<T>(T valueProvider, string? format)
                where T : IValueProvider, IManifestExpressionProvider { }

            public void AppendFormatted<T>(T valueProvider)
                where T : IValueProvider, IManifestExpressionProvider { }

            public void AppendFormatted<T>(IResourceBuilder<T> valueProvider, string? format)
                where T : IResource, IValueProvider, IManifestExpressionProvider { }

            public void AppendFormatted<T>(IResourceBuilder<T> valueProvider)
                where T : IResource, IValueProvider, IManifestExpressionProvider { }

            public readonly void AppendLiteral(string value) { }
        }
    }

    public sealed partial record RelationshipSnapshot(string ResourceName, string Type)
    {
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Replicas = {Replicas}")]
    public sealed partial class ReplicaAnnotation : IResourceAnnotation
    {
        public ReplicaAnnotation(int replicas = 1) { }

        public int Replicas { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("{DebuggerToString(),nq}")]
    public abstract partial class Resource : IResource
    {
        protected Resource(string name) { }

        public virtual ResourceAnnotationCollection Annotations { get { throw null; } }

        public virtual string Name { get { throw null; } }
    }

    public sealed partial class ResourceAnnotationCollection : System.Collections.ObjectModel.Collection<IResourceAnnotation>
    {
    }

    public enum ResourceAnnotationMutationBehavior
    {
        Append = 0,
        Replace = 1
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Name = {Name}")]
    public sealed partial class ResourceCommandAnnotation : IResourceAnnotation
    {
        public ResourceCommandAnnotation(string name, string displayName, System.Func<UpdateCommandStateContext, ResourceCommandState> updateState, System.Func<ExecuteCommandContext, System.Threading.Tasks.Task<ExecuteCommandResult>> executeCommand, string? displayDescription, object? parameter, string? confirmationMessage, string? iconName, IconVariant? iconVariant, bool isHighlighted) { }

        public string? ConfirmationMessage { get { throw null; } }

        public string? DisplayDescription { get { throw null; } }

        public string DisplayName { get { throw null; } }

        public System.Func<ExecuteCommandContext, System.Threading.Tasks.Task<ExecuteCommandResult>> ExecuteCommand { get { throw null; } }

        public string? IconName { get { throw null; } }

        public IconVariant? IconVariant { get { throw null; } }

        public bool IsHighlighted { get { throw null; } }

        public string Name { get { throw null; } }

        public object? Parameter { get { throw null; } }

        public System.Func<UpdateCommandStateContext, ResourceCommandState> UpdateState { get { throw null; } }
    }

    public partial class ResourceCommandService
    {
        internal ResourceCommandService() { }

        public System.Threading.Tasks.Task<ExecuteCommandResult> ExecuteCommandAsync(IResource resource, string commandName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task<ExecuteCommandResult> ExecuteCommandAsync(string resourceId, string commandName, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay(null, Name = "{Name}")]
    public sealed partial record ResourceCommandSnapshot(string Name, ResourceCommandState State, string DisplayName, string? DisplayDescription, object? Parameter, string? ConfirmationMessage, string? IconName, IconVariant? IconVariant, bool IsHighlighted)
    {
    }

    public enum ResourceCommandState
    {
        Enabled = 0,
        Disabled = 1,
        Hidden = 2
    }

    public partial class ResourceEndpointsAllocatedEvent : Eventing.IDistributedApplicationResourceEvent, Eventing.IDistributedApplicationEvent
    {
        public ResourceEndpointsAllocatedEvent(IResource resource, System.IServiceProvider services) { }

        public IResource Resource { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    public partial class ResourceEvent
    {
        public ResourceEvent(IResource resource, string resourceId, CustomResourceSnapshot snapshot) { }

        public IResource Resource { get { throw null; } }

        public string ResourceId { get { throw null; } }

        public CustomResourceSnapshot Snapshot { get { throw null; } }
    }

    public static partial class ResourceExtensions
    {
        public static System.Threading.Tasks.ValueTask<string[]> GetArgumentValuesAsync(this IResourceWithArgs resource, DistributedApplicationOperation applicationOperation = DistributedApplicationOperation.Run) { throw null; }

        public static DeploymentTargetAnnotation? GetDeploymentTargetAnnotation(this IResource resource, IComputeEnvironmentResource? targetComputeEnvironment = null) { throw null; }

        public static EndpointReference GetEndpoint(this IResourceWithEndpoints resource, string endpointName, NetworkIdentifier contextNetworkID) { throw null; }

        public static EndpointReference GetEndpoint(this IResourceWithEndpoints resource, string endpointName) { throw null; }

        public static System.Collections.Generic.IEnumerable<EndpointReference> GetEndpoints(this IResourceWithEndpoints resource, NetworkIdentifier contextNetworkID) { throw null; }

        public static System.Collections.Generic.IEnumerable<EndpointReference> GetEndpoints(this IResourceWithEndpoints resource) { throw null; }

        public static System.Threading.Tasks.ValueTask<System.Collections.Generic.Dictionary<string, string>> GetEnvironmentVariableValuesAsync(this IResourceWithEnvironment resource, DistributedApplicationOperation applicationOperation = DistributedApplicationOperation.Run) { throw null; }

        public static int GetReplicaCount(this IResource resource) { throw null; }

        public static bool HasAnnotationIncludingAncestorsOfType<T>(this IResource resource)
            where T : IResourceAnnotation { throw null; }

        public static bool HasAnnotationOfType<T>(this IResource resource)
            where T : IResourceAnnotation { throw null; }

        public static bool IsExcludedFromPublish(this IResource resource) { throw null; }

        public static System.Threading.Tasks.ValueTask ProcessArgumentValuesAsync(this IResource resource, DistributedApplicationExecutionContext executionContext, System.Action<object?, string?, System.Exception?, bool> processValue, Microsoft.Extensions.Logging.ILogger logger, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask<(CertificateTrustScope, System.Security.Cryptography.X509Certificates.X509Certificate2Collection?)> ProcessCertificateTrustConfigAsync(this IResource resource, DistributedApplicationExecutionContext executionContext, System.Action<object?, string?, System.Exception?, bool> processArgumentValue, System.Action<string, object?, string?, System.Exception?> processEnvironmentVariableValue, Microsoft.Extensions.Logging.ILogger logger, System.Func<CertificateTrustScope, ReferenceExpression> bundlePathFactory, System.Func<CertificateTrustScope, ReferenceExpression> certificateDirectoryPathsFactory, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.ValueTask ProcessEnvironmentVariableValuesAsync(this IResource resource, DistributedApplicationExecutionContext executionContext, System.Action<string, object?, string?, System.Exception?> processValue, Microsoft.Extensions.Logging.ILogger logger, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static bool RequiresImageBuild(this IResource resource) { throw null; }

        public static bool RequiresImageBuildAndPush(this IResource resource) { throw null; }

        public static bool TryGetAnnotationsIncludingAncestorsOfType<T>(this IResource resource, out System.Collections.Generic.IEnumerable<T>? result)
            where T : IResourceAnnotation { throw null; }

        public static bool TryGetAnnotationsOfType<T>(this IResource resource, out System.Collections.Generic.IEnumerable<T>? result)
            where T : IResourceAnnotation { throw null; }

        public static bool TryGetContainerImageName(this IResource resource, bool useBuiltImage, out string? imageName) { throw null; }

        public static bool TryGetContainerImageName(this IResource resource, out string? imageName) { throw null; }

        public static bool TryGetContainerMounts(this IResource resource, out System.Collections.Generic.IEnumerable<ContainerMountAnnotation>? volumeMounts) { throw null; }

        public static bool TryGetEndpoints(this IResource resource, out System.Collections.Generic.IEnumerable<EndpointAnnotation>? endpoints) { throw null; }

        public static bool TryGetEnvironmentVariables(this IResource resource, out System.Collections.Generic.IEnumerable<EnvironmentCallbackAnnotation>? environmentVariables) { throw null; }

        public static bool TryGetLastAnnotation<T>(this IResource resource, out T? annotation)
            where T : IResourceAnnotation { throw null; }

        public static bool TryGetUrls(this IResource resource, out System.Collections.Generic.IEnumerable<ResourceUrlAnnotation>? urls) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIRECOMPUTE001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static IResourceBuilder<T> WithDeploymentImageTag<T>(this IResourceBuilder<T> builder, System.Func<DeploymentImageTagCallbackAnnotationContext, string> callback)
            where T : class, IResource { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIRECOMPUTE001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public static IResourceBuilder<T> WithDeploymentImageTag<T>(this IResourceBuilder<T> builder, System.Func<DeploymentImageTagCallbackAnnotationContext, System.Threading.Tasks.Task<string>> callback)
            where T : class, IResource { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, IconName = {IconName}, IconVariant = {IconVariant}")]
    public sealed partial class ResourceIconAnnotation : IResourceAnnotation
    {
        public ResourceIconAnnotation(string iconName, IconVariant iconVariant = IconVariant.Filled) { }

        public string IconName { get { throw null; } }

        public IconVariant IconVariant { get { throw null; } }
    }

    public partial class ResourceLoggerService
    {
        public void ClearBacklog(string resourceName) { }

        public void Complete(IResource resource) { }

        public void Complete(string name) { }

        public System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<LogLine>> GetAllAsync(IResource resource) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<LogLine>> GetAllAsync(string resourceName) { throw null; }

        public Microsoft.Extensions.Logging.ILogger GetLogger(IResource resource) { throw null; }

        public Microsoft.Extensions.Logging.ILogger GetLogger(string resourceName) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<LogSubscriber> WatchAnySubscribersAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<LogLine>> WatchAsync(IResource resource) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<LogLine>> WatchAsync(string resourceName) { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed partial class ResourceNameAttribute : System.Attribute, IModelNameParameter
    {
    }

    public partial class ResourceNotificationService : System.IDisposable
    {
        public ResourceNotificationService(Microsoft.Extensions.Logging.ILogger<ResourceNotificationService> logger, Microsoft.Extensions.Hosting.IHostApplicationLifetime hostApplicationLifetime, System.IServiceProvider serviceProvider, ResourceLoggerService resourceLoggerService) { }

        [System.Obsolete("ResourceNotificationService now requires an IServiceProvider and ResourceLoggerService.\nUse the constructor that accepts an ILogger<ResourceNotificationService>, IHostApplicationLifetime, IServiceProvider and ResourceLoggerService.\nThis constructor will be removed in the next major version of Aspire.")]
        public ResourceNotificationService(Microsoft.Extensions.Logging.ILogger<ResourceNotificationService> logger, Microsoft.Extensions.Hosting.IHostApplicationLifetime hostApplicationLifetime) { }

        public void Dispose() { }

        public System.Threading.Tasks.Task PublishUpdateAsync(IResource resource, System.Func<CustomResourceSnapshot, CustomResourceSnapshot> stateFactory) { throw null; }

        public System.Threading.Tasks.Task PublishUpdateAsync(IResource resource, string resourceId, System.Func<CustomResourceSnapshot, CustomResourceSnapshot> stateFactory) { throw null; }

        public bool TryGetCurrentState(string resourceId, out ResourceEvent? resourceEvent) { throw null; }

        public System.Threading.Tasks.Task WaitForDependenciesAsync(IResource resource, System.Threading.CancellationToken cancellationToken) { throw null; }

        public System.Threading.Tasks.Task<string> WaitForResourceAsync(string resourceName, System.Collections.Generic.IEnumerable<string> targetStates, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task<ResourceEvent> WaitForResourceAsync(string resourceName, System.Func<ResourceEvent, bool> predicate, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task WaitForResourceAsync(string resourceName, string? targetState = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task<ResourceEvent> WaitForResourceHealthyAsync(string resourceName, WaitBehavior waitBehavior, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task<ResourceEvent> WaitForResourceHealthyAsync(string resourceName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<ResourceEvent> WatchAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class ResourceNotificationServiceOptions
    {
        public WaitBehavior DefaultWaitBehavior { get { throw null; } set { } }
    }

    [System.Diagnostics.DebuggerDisplay("{Value}", Name = "{Name}")]
    public sealed partial record ResourcePropertySnapshot(string Name, object? Value)
    {
        public bool IsSensitive { get { throw null; } init { } }
    }

    public partial class ResourceReadyEvent : Eventing.IDistributedApplicationResourceEvent, Eventing.IDistributedApplicationEvent
    {
        public ResourceReadyEvent(IResource resource, System.IServiceProvider services) { }

        public IResource Resource { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Resource = {Resource.Name}, RelationshipType = {Type}")]
    public sealed partial class ResourceRelationshipAnnotation : IResourceAnnotation
    {
        public ResourceRelationshipAnnotation(IResource resource, string type) { }

        public IResource Resource { get { throw null; } }

        public string Type { get { throw null; } }
    }

    public partial class ResourceSnapshotAnnotation : IResourceAnnotation
    {
        public ResourceSnapshotAnnotation(CustomResourceSnapshot initialSnapshot) { }

        public CustomResourceSnapshot InitialSnapshot { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("{Text}")]
    public sealed partial record ResourceStateSnapshot(string Text, string? Style)
    {
        public static implicit operator ResourceStateSnapshot?(string? s) { throw null; }
    }

    public partial class ResourceStoppedEvent : Eventing.IDistributedApplicationResourceEvent, Eventing.IDistributedApplicationEvent
    {
        public ResourceStoppedEvent(IResource resource, System.IServiceProvider services, ResourceEvent resourceEvent) { }

        public IResource Resource { get { throw null; } }

        public ResourceEvent ResourceEvent { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    [System.Diagnostics.DebuggerDisplay("Url = {Url}, DisplayText = {DisplayText}")]
    public sealed partial class ResourceUrlAnnotation : IResourceAnnotation
    {
        public int? DisplayOrder;
        public UrlDisplayLocation DisplayLocation { get { throw null; } set { } }

        public string? DisplayText { get { throw null; } set { } }

        public EndpointReference? Endpoint { get { throw null; } init { } }

        public required string Url { get { throw null; } set { } }
    }

    public sealed partial class ResourceUrlsCallbackAnnotation : IResourceAnnotation
    {
        public ResourceUrlsCallbackAnnotation(System.Action<ResourceUrlsCallbackContext> callback) { }

        public ResourceUrlsCallbackAnnotation(System.Func<ResourceUrlsCallbackContext, System.Threading.Tasks.Task> callback) { }

        public System.Func<ResourceUrlsCallbackContext, System.Threading.Tasks.Task> Callback { get { throw null; } }
    }

    public partial class ResourceUrlsCallbackContext
    {
        public ResourceUrlsCallbackContext(DistributedApplicationExecutionContext executionContext, IResource resource, System.Collections.Generic.List<ResourceUrlAnnotation>? urls = null, System.Threading.CancellationToken cancellationToken = default) { }

        public System.Threading.CancellationToken CancellationToken { get { throw null; } }

        public DistributedApplicationExecutionContext ExecutionContext { get { throw null; } }

        public Microsoft.Extensions.Logging.ILogger Logger { get { throw null; } set { } }

        public IResource Resource { get { throw null; } }

        public System.Collections.Generic.List<ResourceUrlAnnotation> Urls { get { throw null; } }

        public EndpointReference? GetEndpoint(string name, NetworkIdentifier contextNetworkID) { throw null; }

        public EndpointReference? GetEndpoint(string name) { throw null; }
    }

    public sealed partial class UpdateCommandStateContext
    {
        public required CustomResourceSnapshot ResourceSnapshot { get { throw null; } init { } }

        public required System.IServiceProvider ServiceProvider { get { throw null; } init { } }
    }

    public enum UrlDisplayLocation
    {
        SummaryAndDetails = 0,
        DetailsOnly = 1
    }

    public sealed partial record UrlDisplayPropertiesSnapshot(string DisplayName = "", int SortOrder = 0)
    {
    }

    [System.Diagnostics.DebuggerDisplay("{Url}", Name = "{Name}")]
    public sealed partial record UrlSnapshot(string? Name, string Url, bool IsInternal)
    {
        public UrlDisplayPropertiesSnapshot DisplayProperties { get { throw null; } init { } }

        public bool IsInactive { get { throw null; } init { } }
    }

    public partial class ValueProviderContext
    {
        public IResource? Caller { get { throw null; } init { } }

        public DistributedApplicationExecutionContext? ExecutionContext { get { throw null; } init { } }

        public NetworkIdentifier? Network { get { throw null; } init { } }
    }

    public sealed partial class ValueSnapshot<T>
    {
        public bool IsValueSet { get { throw null; } }

        public System.Threading.Tasks.Task<T> GetValueAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public void SetException(System.Exception exception) { }

        public void SetValue(T value) { }
    }

    [System.Diagnostics.DebuggerDisplay("{Source}", Name = "{Target}")]
    public sealed partial record VolumeSnapshot(string? Source, string Target, string MountType, bool IsReadOnly)
    {
    }

    [System.Diagnostics.DebuggerDisplay("Type = {GetType().Name,nq}, Resource = {Resource.Name}")]
    public sealed partial class WaitAnnotation : IResourceAnnotation
    {
        public WaitAnnotation(IResource resource, WaitType waitType, int exitCode = 0) { }

        public int ExitCode { get { throw null; } }

        public IResource Resource { get { throw null; } }

        public WaitBehavior? WaitBehavior { get { throw null; } init { } }

        public WaitType WaitType { get { throw null; } }
    }

    public enum WaitBehavior
    {
        WaitOnResourceUnavailable = 0,
        StopOnResourceUnavailable = 1
    }

    public enum WaitType
    {
        WaitUntilHealthy = 0,
        WaitForCompletion = 1,
        WaitUntilStarted = 2
    }
}

namespace Aspire.Hosting.ApplicationModel.Docker
{
    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class DockerfileBuilder
    {
        public System.Collections.Generic.IReadOnlyList<DockerfileStage> Stages { get { throw null; } }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage From(string image, string stageName) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage From(string image) { throw null; }

        public System.Threading.Tasks.Task WriteAsync(System.IO.StreamWriter writer, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class DockerfileStage : DockerfileStatement
    {
        public DockerfileStage(string? stageName, string imageReference) { }

        public string? StageName { get { throw null; } }

        public System.Collections.Generic.IList<DockerfileStatement> Statements { get { throw null; } }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Arg(string name, string defaultValue) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Arg(string name) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Cmd(string[] command) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Comment(string comment) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Copy(string source, string destination, string chown) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Copy(string source, string destination) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage CopyFrom(string stage, string source, string destination, string chown) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage CopyFrom(string from, string source, string destination) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage EmptyLine() { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Entrypoint(string[] command) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Env(string name, string value) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Expose(int port) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage Run(string command) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage RunWithMounts(string command, params string[] mounts) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage User(string user) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
        public DockerfileStage WorkDir(string path) { throw null; }

        public override System.Threading.Tasks.Task WriteStatementAsync(System.IO.StreamWriter writer, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREDOCKERFILEBUILDER001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public abstract partial class DockerfileStatement
    {
        public abstract System.Threading.Tasks.Task WriteStatementAsync(System.IO.StreamWriter writer, System.Threading.CancellationToken cancellationToken = default);
    }
}

namespace Aspire.Hosting.Dcp.Model
{
    public partial class ExecutableLaunchConfiguration
    {
        public ExecutableLaunchConfiguration(string type) { }

        [System.Text.Json.Serialization.JsonPropertyName("mode")]
        public string Mode { get { throw null; } set { } }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get { throw null; } set { } }
    }
}

namespace Aspire.Hosting.Eventing
{
    public partial class DistributedApplicationEventing : IDistributedApplicationEventing
    {
        public System.Threading.Tasks.Task PublishAsync<T>(T @event, EventDispatchBehavior dispatchBehavior, System.Threading.CancellationToken cancellationToken = default)
            where T : IDistributedApplicationEvent { throw null; }

        public System.Threading.Tasks.Task PublishAsync<T>(T @event, System.Threading.CancellationToken cancellationToken = default)
            where T : IDistributedApplicationEvent { throw null; }

        public DistributedApplicationEventSubscription Subscribe<T>(ApplicationModel.IResource resource, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : IDistributedApplicationResourceEvent { throw null; }

        public DistributedApplicationEventSubscription Subscribe<T>(System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : IDistributedApplicationEvent { throw null; }

        public void Unsubscribe(DistributedApplicationEventSubscription subscription) { }
    }

    public partial class DistributedApplicationEventSubscription
    {
        public DistributedApplicationEventSubscription(System.Func<IDistributedApplicationEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback) { }

        public System.Func<IDistributedApplicationEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> Callback { get { throw null; } }
    }

    public partial class DistributedApplicationResourceEventSubscription : DistributedApplicationEventSubscription
    {
        public DistributedApplicationResourceEventSubscription(ApplicationModel.IResource? resource, System.Func<IDistributedApplicationResourceEvent, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback) : base(default!) { }

        public ApplicationModel.IResource? Resource { get { throw null; } }
    }

    public enum EventDispatchBehavior
    {
        BlockingSequential = 0,
        BlockingConcurrent = 1,
        NonBlockingSequential = 2,
        NonBlockingConcurrent = 3
    }

    public partial interface IDistributedApplicationEvent
    {
    }

    public partial interface IDistributedApplicationEventing
    {
        System.Threading.Tasks.Task PublishAsync<T>(T @event, EventDispatchBehavior dispatchBehavior, System.Threading.CancellationToken cancellationToken = default)
            where T : IDistributedApplicationEvent;
        System.Threading.Tasks.Task PublishAsync<T>(T @event, System.Threading.CancellationToken cancellationToken = default)
            where T : IDistributedApplicationEvent;
        DistributedApplicationEventSubscription Subscribe<T>(ApplicationModel.IResource resource, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : IDistributedApplicationResourceEvent;
        DistributedApplicationEventSubscription Subscribe<T>(System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback)
            where T : IDistributedApplicationEvent;
        void Unsubscribe(DistributedApplicationEventSubscription subscription);
    }

    public partial interface IDistributedApplicationResourceEvent : IDistributedApplicationEvent
    {
        ApplicationModel.IResource Resource { get; }
    }
}

namespace Aspire.Hosting.Lifecycle
{
    public static partial class EventingSubscriberServiceCollectionExtensions
    {
        public static void AddEventingSubscriber<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where T : class, IDistributedApplicationEventingSubscriber { }

        public static void TryAddEventingSubscriber<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where T : class, IDistributedApplicationEventingSubscriber { }
    }

    public partial interface IDistributedApplicationEventingSubscriber
    {
        System.Threading.Tasks.Task SubscribeAsync(Eventing.IDistributedApplicationEventing eventing, DistributedApplicationExecutionContext executionContext, System.Threading.CancellationToken cancellationToken);
    }

    [System.Obsolete("Use IDistributedApplicationEventingSubscriber instead.")]
    public partial interface IDistributedApplicationLifecycleHook
    {
        System.Threading.Tasks.Task AfterEndpointsAllocatedAsync(ApplicationModel.DistributedApplicationModel appModel, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task AfterResourcesCreatedAsync(ApplicationModel.DistributedApplicationModel appModel, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task BeforeStartAsync(ApplicationModel.DistributedApplicationModel appModel, System.Threading.CancellationToken cancellationToken = default);
    }

    public static partial class LifecycleHookServiceCollectionExtensions
    {
        [System.Obsolete("Use EventingSubscriberServiceCollectionExtensions.AddEventingSubscriber instead.")]
        public static void AddLifecycleHook<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, T> implementationFactory)
            where T : class, IDistributedApplicationLifecycleHook { }

        [System.Obsolete("Use EventingSubscriberServiceCollectionExtensions.AddEventingSubscriber instead.")]
        public static void AddLifecycleHook<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where T : class, IDistributedApplicationLifecycleHook { }

        [System.Obsolete("Use EventingSubscriberServiceCollectionExtensions.TryAddEventingSubscriber instead.")]
        public static void TryAddLifecycleHook<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, T> implementationFactory)
            where T : class, IDistributedApplicationLifecycleHook { }

        [System.Obsolete("Use EventingSubscriberServiceCollectionExtensions.TryAddEventingSubscriber instead.")]
        public static void TryAddLifecycleHook<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where T : class, IDistributedApplicationLifecycleHook { }
    }
}

namespace Aspire.Hosting.Pipelines
{
    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public enum CompletionState
    {
        InProgress = 0,
        Completed = 1,
        CompletedWithWarning = 2,
        CompletedWithError = 3
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IDistributedApplicationPipeline
    {
        void AddPipelineConfiguration(System.Func<PipelineConfigurationContext, System.Threading.Tasks.Task> callback);
        void AddStep(PipelineStep step);
        void AddStep(string name, System.Func<PipelineStepContext, System.Threading.Tasks.Task> action, object? dependsOn = null, object? requiredBy = null);
        System.Threading.Tasks.Task ExecuteAsync(PipelineContext context);
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IPipelineActivityReporter
    {
        System.Threading.Tasks.Task CompletePublishAsync(string? completionMessage = null, CompletionState? completionState = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<IReportingStep> CreateStepAsync(string title, System.Threading.CancellationToken cancellationToken = default);
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES004", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IPipelineOutputService
    {
        string GetOutputDirectory();
        string GetOutputDirectory(ApplicationModel.IResource resource);
        string GetTempDirectory();
        string GetTempDirectory(ApplicationModel.IResource resource);
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IReportingStep : System.IAsyncDisposable
    {
        System.Threading.Tasks.Task CompleteAsync(string completionText, CompletionState completionState = CompletionState.Completed, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<IReportingTask> CreateTaskAsync(string statusText, System.Threading.CancellationToken cancellationToken = default);
        void Log(Microsoft.Extensions.Logging.LogLevel logLevel, string message, bool enableMarkdown);
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IReportingTask : System.IAsyncDisposable
    {
        System.Threading.Tasks.Task CompleteAsync(string? completionMessage = null, CompletionState completionState = CompletionState.Completed, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task UpdateAsync(string statusText, System.Threading.CancellationToken cancellationToken = default);
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class NullPublishingActivityReporter : IPipelineActivityReporter
    {
        public System.Threading.Tasks.Task CompletePublishAsync(string? completionMessage = null, CompletionState? completionState = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task<IReportingStep> CreateStepAsync(string title, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class PipelineConfigurationAnnotation : ApplicationModel.IResourceAnnotation
    {
        public PipelineConfigurationAnnotation(System.Action<PipelineConfigurationContext> callback) { }

        public PipelineConfigurationAnnotation(System.Func<PipelineConfigurationContext, System.Threading.Tasks.Task> callback) { }

        public System.Func<PipelineConfigurationContext, System.Threading.Tasks.Task> Callback { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class PipelineConfigurationContext
    {
        public required ApplicationModel.DistributedApplicationModel Model { get { throw null; } init { } }

        public required System.IServiceProvider Services { get { throw null; } init { } }

        public required System.Collections.Generic.IReadOnlyList<PipelineStep> Steps { get { throw null; } init { } }

        public System.Collections.Generic.IEnumerable<PipelineStep> GetSteps(ApplicationModel.IResource resource, string tag) { throw null; }

        public System.Collections.Generic.IEnumerable<PipelineStep> GetSteps(ApplicationModel.IResource resource) { throw null; }

        public System.Collections.Generic.IEnumerable<PipelineStep> GetSteps(string tag) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class PipelineContext
    {
        public PipelineContext(ApplicationModel.DistributedApplicationModel model, DistributedApplicationExecutionContext executionContext, System.IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILogger logger, System.Threading.CancellationToken cancellationToken) { }

        public System.Threading.CancellationToken CancellationToken { get { throw null; } set { } }

        public DistributedApplicationExecutionContext ExecutionContext { get { throw null; } }

        public Microsoft.Extensions.Logging.ILogger Logger { get { throw null; } }

        public ApplicationModel.DistributedApplicationModel Model { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class PipelineOptions
    {
        public bool ClearCache { get { throw null; } set { } }

        public string? LogLevel { get { throw null; } set { } }

        public string? OutputPath { get { throw null; } set { } }

        public string? Step { get { throw null; } set { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class PipelineStep
    {
        public required System.Func<PipelineStepContext, System.Threading.Tasks.Task> Action { get { throw null; } init { } }

        public System.Collections.Generic.List<string> DependsOnSteps { get { throw null; } init { } }

        public required string Name { get { throw null; } init { } }

        public System.Collections.Generic.List<string> RequiredBySteps { get { throw null; } init { } }

        public ApplicationModel.IResource? Resource { get { throw null; } set { } }

        public System.Collections.Generic.List<string> Tags { get { throw null; } init { } }

        public void DependsOn(PipelineStep step) { }

        public void DependsOn(string stepName) { }

        public void RequiredBy(PipelineStep step) { }

        public void RequiredBy(string stepName) { }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class PipelineStepAnnotation : ApplicationModel.IResourceAnnotation
    {
        public PipelineStepAnnotation(System.Func<PipelineStepFactoryContext, PipelineStep> factory) { }

        public PipelineStepAnnotation(System.Func<PipelineStepFactoryContext, System.Collections.Generic.IEnumerable<PipelineStep>> factory) { }

        public PipelineStepAnnotation(System.Func<PipelineStepFactoryContext, System.Threading.Tasks.Task<PipelineStep>> factory) { }

        public PipelineStepAnnotation(System.Func<PipelineStepFactoryContext, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<PipelineStep>>> factory) { }

        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<PipelineStep>> CreateStepsAsync(PipelineStepFactoryContext context) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public sealed partial class PipelineStepContext
    {
        public System.Threading.CancellationToken CancellationToken { get { throw null; } }

        public DistributedApplicationExecutionContext ExecutionContext { get { throw null; } }

        public Microsoft.Extensions.Logging.ILogger Logger { get { throw null; } }

        public ApplicationModel.DistributedApplicationModel Model { get { throw null; } }

        public required PipelineContext PipelineContext { get { throw null; } init { } }

        public required IReportingStep ReportingStep { get { throw null; } init { } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public static partial class PipelineStepExtensions
    {
        public static ApplicationModel.IResourceBuilder<T> WithPipelineConfiguration<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<PipelineConfigurationContext> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithPipelineConfiguration<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<PipelineConfigurationContext, System.Threading.Tasks.Task> callback)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithPipelineStepFactory<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<PipelineStepFactoryContext, PipelineStep> factory)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithPipelineStepFactory<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<PipelineStepFactoryContext, System.Collections.Generic.IEnumerable<PipelineStep>> factory)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithPipelineStepFactory<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<PipelineStepFactoryContext, System.Threading.Tasks.Task<PipelineStep>> factory)
            where T : ApplicationModel.IResource { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithPipelineStepFactory<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Func<PipelineStepFactoryContext, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<PipelineStep>>> factory)
            where T : ApplicationModel.IResource { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class PipelineStepFactoryContext
    {
        public required PipelineContext PipelineContext { get { throw null; } init { } }

        public required ApplicationModel.IResource Resource { get { throw null; } init { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public static partial class PipelineStepsExtensions
    {
        public static System.Collections.Generic.IEnumerable<PipelineStep> DependsOn(this System.Collections.Generic.IEnumerable<PipelineStep> steps, PipelineStep? step) { throw null; }

        public static System.Collections.Generic.IEnumerable<PipelineStep> DependsOn(this System.Collections.Generic.IEnumerable<PipelineStep> steps, System.Collections.Generic.IEnumerable<PipelineStep> targetSteps) { throw null; }

        public static System.Collections.Generic.IEnumerable<PipelineStep> DependsOn(this System.Collections.Generic.IEnumerable<PipelineStep> steps, string stepName) { throw null; }

        public static System.Collections.Generic.IEnumerable<PipelineStep> RequiredBy(this System.Collections.Generic.IEnumerable<PipelineStep> steps, PipelineStep? step) { throw null; }

        public static System.Collections.Generic.IEnumerable<PipelineStep> RequiredBy(this System.Collections.Generic.IEnumerable<PipelineStep> steps, System.Collections.Generic.IEnumerable<PipelineStep> targetSteps) { throw null; }

        public static System.Collections.Generic.IEnumerable<PipelineStep> RequiredBy(this System.Collections.Generic.IEnumerable<PipelineStep> steps, string stepName) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public static partial class PublishingExtensions
    {
        public static System.Threading.Tasks.Task<IReportingStep> FailAsync(this IReportingStep step, string? errorMessage = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IReportingTask> FailAsync(this IReportingTask task, string? errorMessage = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IReportingStep> SucceedAsync(this IReportingStep step, string? message = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IReportingTask> SucceedAsync(this IReportingTask task, string? message = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IReportingTask> UpdateStatusAsync(this IReportingTask task, string statusText, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IReportingStep> WarnAsync(this IReportingStep step, string? message = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Threading.Tasks.Task<IReportingTask> WarnAsync(this IReportingTask task, string? message = null, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public static partial class WellKnownPipelineSteps
    {
        public static readonly string Build;
        public static readonly string BuildPrereq;
        public static readonly string Deploy;
        public static readonly string DeployPrereq;
        public static readonly string Diagnostics;
        public static readonly string Publish;
        public static readonly string PublishPrereq;
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public static partial class WellKnownPipelineTags
    {
        public const string BuildCompute = "build-compute";
        public const string DeployCompute = "deploy-compute";
        public const string ProvisionInfrastructure = "provision-infra";
        public const string PushContainerImage = "push-container-image";
    }
}

namespace Aspire.Hosting.Publishing
{
    public sealed partial class AfterPublishEvent : Eventing.IDistributedApplicationEvent
    {
        public AfterPublishEvent(System.IServiceProvider services, ApplicationModel.DistributedApplicationModel model) { }

        public ApplicationModel.DistributedApplicationModel Model { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    public sealed partial class BeforePublishEvent : Eventing.IDistributedApplicationEvent
    {
        public BeforePublishEvent(System.IServiceProvider services, ApplicationModel.DistributedApplicationModel model) { }

        public ApplicationModel.DistributedApplicationModel Model { get { throw null; } }

        public System.IServiceProvider Services { get { throw null; } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES003", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial class ContainerBuildOptions
    {
        public ContainerImageFormat? ImageFormat { get { throw null; } init { } }

        public string? OutputPath { get { throw null; } init { } }

        public ContainerTargetPlatform? TargetPlatform { get { throw null; } init { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES003", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public enum ContainerImageFormat
    {
        Docker = 0,
        Oci = 1
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES003", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    [System.Flags]
    public enum ContainerTargetPlatform
    {
        LinuxAmd64 = 1,
        LinuxArm64 = 2,
        AllLinux = 3,
        LinuxArm = 4,
        Linux386 = 8,
        WindowsAmd64 = 16,
        WindowsArm64 = 32
    }

    public sealed partial class DeploymentStateSection
    {
        public DeploymentStateSection(string sectionName, System.Text.Json.Nodes.JsonObject? data, long version) { }

        public System.Text.Json.Nodes.JsonObject Data { get { throw null; } }

        public string SectionName { get { throw null; } }

        public long Version { get { throw null; } set { } }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES002", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IDeploymentStateManager
    {
        string? StateFilePath { get; }

        System.Threading.Tasks.Task<DeploymentStateSection> AcquireSectionAsync(string sectionName, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task SaveSectionAsync(DeploymentStateSection section, System.Threading.CancellationToken cancellationToken = default);
    }

    [System.Obsolete("IDistributedApplicationPublisher is obsolete. Use PipelineStep where applicable.")]
    public partial interface IDistributedApplicationPublisher
    {
        System.Threading.Tasks.Task PublishAsync(ApplicationModel.DistributedApplicationModel model, System.Threading.CancellationToken cancellationToken);
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES003", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public partial interface IResourceContainerImageBuilder
    {
        System.Threading.Tasks.Task BuildImageAsync(ApplicationModel.IResource resource, ContainerBuildOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task BuildImagesAsync(System.Collections.Generic.IEnumerable<ApplicationModel.IResource> resources, ContainerBuildOptions? options = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task PushImageAsync(string imageName, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task TagImageAsync(string localImageName, string targetImageName, System.Threading.CancellationToken cancellationToken = default);
    }

    public sealed partial class ManifestPublishingContext
    {
        public ManifestPublishingContext(DistributedApplicationExecutionContext executionContext, string manifestPath, System.Text.Json.Utf8JsonWriter writer, System.Threading.CancellationToken cancellationToken = default) { }

        public System.Threading.CancellationToken CancellationToken { get { throw null; } }

        public DistributedApplicationExecutionContext ExecutionContext { get { throw null; } }

        public string ManifestPath { get { throw null; } }

        public System.Text.Json.Utf8JsonWriter Writer { get { throw null; } }

        public string? GetManifestRelativePath(string? path) { throw null; }

        public void TryAddDependentResources(object? value) { }

        public void WriteBindings(ApplicationModel.IResource resource) { }

        public System.Threading.Tasks.Task WriteCommandLineArgumentsAsync(ApplicationModel.IResource resource) { throw null; }

        public void WriteConnectionString(ApplicationModel.IResource resource) { }

        public System.Threading.Tasks.Task WriteContainerAsync(ApplicationModel.ContainerResource container) { throw null; }

        public System.Threading.Tasks.Task WriteEnvironmentVariablesAsync(ApplicationModel.IResource resource) { throw null; }
    }

    [System.Diagnostics.CodeAnalysis.Experimental("ASPIREPIPELINES001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public static partial class ManifestPublishingExtensions
    {
        public static Pipelines.IDistributedApplicationPipeline AddManifestPublishing(this Pipelines.IDistributedApplicationPipeline pipeline) { throw null; }
    }

    [System.Obsolete("PublishingOptions is obsolete. Use PipelineOptions where applicable.")]
    public partial class PublishingOptions
    {
        public const string Publishing = "Publishing";
        public bool Deploy { get { throw null; } set { } }

        public string? OutputPath { get { throw null; } set { } }

        public string? Publisher { get { throw null; } set { } }
    }
}

namespace Aspire.Hosting.Publishing.Internal
{
    public abstract partial class DeploymentStateManagerBase<T> : IDeploymentStateManager where T : class
    {
        protected readonly Microsoft.Extensions.Logging.ILogger<T> logger;
        protected static readonly System.Text.Json.JsonSerializerOptions s_jsonSerializerOptions;
        protected DeploymentStateManagerBase(Microsoft.Extensions.Logging.ILogger<T> logger) { }

        public abstract string? StateFilePath { get; }

        public System.Threading.Tasks.Task<DeploymentStateSection> AcquireSectionAsync(string sectionName, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public static System.Text.Json.Nodes.JsonObject FlattenJsonObject(System.Text.Json.Nodes.JsonObject source) { throw null; }

        protected abstract string? GetStatePath();
        protected System.Threading.Tasks.Task<System.Text.Json.Nodes.JsonObject> LoadStateAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task SaveSectionAsync(DeploymentStateSection section, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Threading.Tasks.Task SaveStateAsync(System.Text.Json.Nodes.JsonObject state, System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected abstract System.Threading.Tasks.Task SaveStateToStorageAsync(System.Text.Json.Nodes.JsonObject state, System.Threading.CancellationToken cancellationToken);
        public static System.Text.Json.Nodes.JsonObject UnflattenJsonObject(System.Text.Json.Nodes.JsonObject source) { throw null; }
    }

    public sealed partial class FileDeploymentStateManager : DeploymentStateManagerBase<FileDeploymentStateManager>
    {
        public FileDeploymentStateManager(Microsoft.Extensions.Logging.ILogger<FileDeploymentStateManager> logger, Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.Extensions.Hosting.IHostEnvironment hostEnvironment, Microsoft.Extensions.Options.IOptions<Pipelines.PipelineOptions> pipelineOptions) : base(default!) { }

        public override string? StateFilePath { get { throw null; } }

        protected override string? GetStatePath() { throw null; }

        protected override System.Threading.Tasks.Task SaveStateToStorageAsync(System.Text.Json.Nodes.JsonObject state, System.Threading.CancellationToken cancellationToken) { throw null; }
    }

    public sealed partial class UserSecretsDeploymentStateManager : DeploymentStateManagerBase<UserSecretsDeploymentStateManager>
    {
        public UserSecretsDeploymentStateManager(Microsoft.Extensions.Logging.ILogger<UserSecretsDeploymentStateManager> logger) : base(default!) { }

        public override string? StateFilePath { get { throw null; } }

        protected override string? GetStatePath() { throw null; }

        protected override System.Threading.Tasks.Task SaveStateToStorageAsync(System.Text.Json.Nodes.JsonObject state, System.Threading.CancellationToken cancellationToken) { throw null; }
    }
}

namespace Aspire.Hosting.Utils
{
    public static partial class EndpointHostHelpers
    {
        public static bool IsDevLocalhostTld(string? host) { throw null; }

        public static bool IsDevLocalhostTld(System.Uri? uri) { throw null; }

        public static bool IsLocalhost(string? host) { throw null; }

        public static bool IsLocalhost(System.Uri? uri) { throw null; }

        public static bool IsLocalhostOrLocalhostTld(string? host) { throw null; }

        public static bool IsLocalhostOrLocalhostTld(System.Uri? uri) { throw null; }

        public static bool IsLocalhostTld(string? host) { throw null; }

        public static bool IsLocalhostTld(System.Uri? uri) { throw null; }
    }
}