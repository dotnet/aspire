// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System.Diagnostics.CodeAnalysis;
using Aspire.Hosting.ApplicationModel;

namespace Aspire.Hosting;

/// <summary>
/// Provides volume-related extension methods for any <see cref="IComputeResource"/>.
/// </summary>
public static class ComputeResourceBuilderExtensions
{
    /// <summary>
    /// Adds (or shares) a container-managed volume on a compute resource.
    /// </summary>
    /// <typeparam name="T">A compute resource type (container, project, job, etc.).</typeparam>
    /// <param name="builder">The resource builder.</param>
    /// <param name="name">
    /// The name of the volume. Use the same name on multiple resources to share it. Pass <c>null</c> for an anonymous
    /// (non-shared) volume (a random name will be generated by the container runtime).
    /// </param>
    /// <param name="target">
    /// Absolute path inside the resource's filesystem/container where the volume will be mounted.
    /// </param>
    /// <param name="isReadOnly">Mount as read-only (cannot be true for anonymous volumes).</param>
    /// <remarks>
    /// Volumes persist data managed by the runtime (not host bind mounts). To mount host paths, use
    /// <see cref="ContainerResourceBuilderExtensions.WithBindMount{T}(IResourceBuilder{T}, string, string, bool)"/>.
    /// </remarks>
    [Experimental("ASPIRECOMPUTE001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public static IResourceBuilder<T> WithVolume<T>(
        this IResourceBuilder<T> builder,
        string? name,
        string target,
        bool isReadOnly = false)
        where T : IComputeResource
    {
        ArgumentNullException.ThrowIfNull(builder);
        ArgumentNullException.ThrowIfNull(target);

        var annotation = new ContainerMountAnnotation(name, target, ContainerMountType.Volume, isReadOnly);
        return builder.WithAnnotation(annotation);
    }

    /// <summary>
    /// Adds an anonymous (non-shared) volume to a compute resource.
    /// </summary>
    /// <typeparam name="T">A compute resource type.</typeparam>
    /// <param name="builder">The resource builder.</param>
    /// <param name="target">
    /// Absolute path inside the resource's filesystem/container where the volume will be mounted.
    /// </param>
    [Experimental("ASPIRECOMPUTE001", UrlFormat = "https://aka.ms/aspire/diagnostics/{0}")]
    public static IResourceBuilder<T> WithVolume<T>(
        this IResourceBuilder<T> builder,
        string target)
        where T : IComputeResource
    {
        ArgumentNullException.ThrowIfNull(builder);
        ArgumentNullException.ThrowIfNull(target);

        var annotation = new ContainerMountAnnotation(null, target, ContainerMountType.Volume, isReadOnly: false);
        return builder.WithAnnotation(annotation);
    }
}