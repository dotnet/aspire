#nullable enable
Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent
Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent.AfterEndpointsAllocatedEvent(System.IServiceProvider! services, Aspire.Hosting.ApplicationModel.DistributedApplicationModel! model) -> void
Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent.Model.get -> Aspire.Hosting.ApplicationModel.DistributedApplicationModel!
Aspire.Hosting.ApplicationModel.AfterEndpointsAllocatedEvent.Services.get -> System.IServiceProvider!
Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent
Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent.AfterResourcesCreatedEvent(System.IServiceProvider! services, Aspire.Hosting.ApplicationModel.DistributedApplicationModel! model) -> void
Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent.Model.get -> Aspire.Hosting.ApplicationModel.DistributedApplicationModel!
Aspire.Hosting.ApplicationModel.AfterResourcesCreatedEvent.Services.get -> System.IServiceProvider!
Aspire.Hosting.ApplicationModel.BeforeResourceStartedEvent
Aspire.Hosting.ApplicationModel.BeforeResourceStartedEvent.BeforeResourceStartedEvent(Aspire.Hosting.ApplicationModel.IResource! resource, System.IServiceProvider! services) -> void
Aspire.Hosting.ApplicationModel.BeforeResourceStartedEvent.Resource.get -> Aspire.Hosting.ApplicationModel.IResource!
Aspire.Hosting.ApplicationModel.BeforeResourceStartedEvent.Services.get -> System.IServiceProvider!
Aspire.Hosting.ApplicationModel.BeforeStartEvent
Aspire.Hosting.ApplicationModel.BeforeStartEvent.BeforeStartEvent(System.IServiceProvider! services, Aspire.Hosting.ApplicationModel.DistributedApplicationModel! model) -> void
Aspire.Hosting.ApplicationModel.BeforeStartEvent.Model.get -> Aspire.Hosting.ApplicationModel.DistributedApplicationModel!
Aspire.Hosting.ApplicationModel.BeforeStartEvent.Services.get -> System.IServiceProvider!
Aspire.Hosting.ApplicationModel.ConnectionStringAvailableEvent
Aspire.Hosting.ApplicationModel.ConnectionStringAvailableEvent.ConnectionStringAvailableEvent(Aspire.Hosting.ApplicationModel.IResource! resource, System.IServiceProvider! services) -> void
Aspire.Hosting.ApplicationModel.ConnectionStringAvailableEvent.Resource.get -> Aspire.Hosting.ApplicationModel.IResource!
Aspire.Hosting.ApplicationModel.ConnectionStringAvailableEvent.Services.get -> System.IServiceProvider!
Aspire.Hosting.ApplicationModel.ContainerLifetimeAnnotation
Aspire.Hosting.ApplicationModel.ContainerLifetimeAnnotation.ContainerLifetimeAnnotation() -> void
Aspire.Hosting.ApplicationModel.ContainerLifetimeAnnotation.Lifetime.get -> Aspire.Hosting.ApplicationModel.ContainerLifetime
Aspire.Hosting.ApplicationModel.ContainerLifetimeAnnotation.Lifetime.set -> void
Aspire.Hosting.ApplicationModel.ContainerLifetime
Aspire.Hosting.ApplicationModel.ContainerLifetime.Default = 0 -> Aspire.Hosting.ApplicationModel.ContainerLifetime
Aspire.Hosting.ApplicationModel.ContainerLifetime.Persistent = 1 -> Aspire.Hosting.ApplicationModel.ContainerLifetime
Aspire.Hosting.ApplicationModel.ConnectionStringReference.ConnectionName.get -> string?
Aspire.Hosting.ApplicationModel.ConnectionStringReference.ConnectionName.set -> void
Aspire.Hosting.ApplicationModel.ContainerNameAnnotation
Aspire.Hosting.ApplicationModel.ContainerNameAnnotation.ContainerNameAnnotation() -> void
Aspire.Hosting.ApplicationModel.ContainerNameAnnotation.Name.get -> string!
Aspire.Hosting.ApplicationModel.ContainerNameAnnotation.Name.set -> void
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.HealthStatus.get -> Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus?
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.HealthStatus.init -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.TargetHost.get -> string!
Aspire.Hosting.ApplicationModel.EndpointAnnotation.TargetHost.set -> void
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.Volumes.get -> System.Collections.Immutable.ImmutableArray<Aspire.Hosting.ApplicationModel.VolumeSnapshot!>
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.Volumes.init -> void
Aspire.Hosting.ApplicationModel.HealthCheckAnnotation
Aspire.Hosting.ApplicationModel.HealthCheckAnnotation.HealthCheckAnnotation(string! key) -> void
Aspire.Hosting.ApplicationModel.HealthCheckAnnotation.Key.get -> string!
Aspire.Hosting.ApplicationModel.ResourceNotificationService.ResourceNotificationService(Microsoft.Extensions.Logging.ILogger<Aspire.Hosting.ApplicationModel.ResourceNotificationService!>! logger, Microsoft.Extensions.Hosting.IHostApplicationLifetime! hostApplicationLifetime) -> void
Aspire.Hosting.ApplicationModel.ResourceNotificationService.WaitForResourceAsync(string! resourceName, System.Func<Aspire.Hosting.ApplicationModel.ResourceEvent!, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Aspire.Hosting.ApplicationModel.ResourceEvent!>!
Aspire.Hosting.ApplicationModel.VolumeSnapshot
Aspire.Hosting.ApplicationModel.VolumeSnapshot.IsReadOnly.get -> bool
Aspire.Hosting.ApplicationModel.VolumeSnapshot.IsReadOnly.init -> void
Aspire.Hosting.ApplicationModel.VolumeSnapshot.MountType.get -> string!
Aspire.Hosting.ApplicationModel.VolumeSnapshot.MountType.init -> void
Aspire.Hosting.ApplicationModel.VolumeSnapshot.Source.get -> string?
Aspire.Hosting.ApplicationModel.VolumeSnapshot.Source.init -> void
Aspire.Hosting.ApplicationModel.VolumeSnapshot.Target.get -> string!
Aspire.Hosting.ApplicationModel.VolumeSnapshot.Target.init -> void
Aspire.Hosting.ApplicationModel.VolumeSnapshot.VolumeSnapshot(string? Source, string! Target, string! MountType, bool IsReadOnly) -> void
Aspire.Hosting.DistributedApplicationBuilder.AppHostPath.get -> string!
Aspire.Hosting.DistributedApplicationBuilder.Eventing.get -> Aspire.Hosting.Eventing.IDistributedApplicationEventing!
Aspire.Hosting.Eventing.DistributedApplicationEventing
Aspire.Hosting.Eventing.DistributedApplicationEventing.DistributedApplicationEventing() -> void
Aspire.Hosting.Eventing.DistributedApplicationEventing.PublishAsync<T>(T event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Aspire.Hosting.Eventing.DistributedApplicationEventing.Subscribe<T>(Aspire.Hosting.ApplicationModel.IResource! resource, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! callback) -> Aspire.Hosting.Eventing.DistributedApplicationEventSubscription!
Aspire.Hosting.Eventing.DistributedApplicationEventing.Subscribe<T>(System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! callback) -> Aspire.Hosting.Eventing.DistributedApplicationEventSubscription!
Aspire.Hosting.Eventing.DistributedApplicationEventing.Unsubscribe(Aspire.Hosting.Eventing.DistributedApplicationEventSubscription! subscription) -> void
Aspire.Hosting.Eventing.DistributedApplicationEventSubscription
Aspire.Hosting.Eventing.DistributedApplicationEventSubscription.Callback.get -> System.Func<Aspire.Hosting.Eventing.IDistributedApplicationEvent!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>!
Aspire.Hosting.Eventing.DistributedApplicationEventSubscription.DistributedApplicationEventSubscription(System.Func<Aspire.Hosting.Eventing.IDistributedApplicationEvent!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! callback) -> void
Aspire.Hosting.Eventing.DistributedApplicationResourceEventSubscription
Aspire.Hosting.Eventing.DistributedApplicationResourceEventSubscription.DistributedApplicationResourceEventSubscription(Aspire.Hosting.ApplicationModel.IResource? resource, System.Func<Aspire.Hosting.Eventing.IDistributedApplicationResourceEvent!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! callback) -> void
Aspire.Hosting.Eventing.DistributedApplicationResourceEventSubscription.Resource.get -> Aspire.Hosting.ApplicationModel.IResource?
Aspire.Hosting.Eventing.IDistributedApplicationEvent
Aspire.Hosting.Eventing.IDistributedApplicationEventing
Aspire.Hosting.Eventing.IDistributedApplicationEventing.PublishAsync<T>(T event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Aspire.Hosting.Eventing.IDistributedApplicationEventing.Subscribe<T>(Aspire.Hosting.ApplicationModel.IResource! resource, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! callback) -> Aspire.Hosting.Eventing.DistributedApplicationEventSubscription!
Aspire.Hosting.Eventing.IDistributedApplicationEventing.Subscribe<T>(System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task!>! callback) -> Aspire.Hosting.Eventing.DistributedApplicationEventSubscription!
Aspire.Hosting.Eventing.IDistributedApplicationEventing.Unsubscribe(Aspire.Hosting.Eventing.DistributedApplicationEventSubscription! subscription) -> void
Aspire.Hosting.Eventing.IDistributedApplicationResourceEvent
Aspire.Hosting.Eventing.IDistributedApplicationResourceEvent.Resource.get -> Aspire.Hosting.ApplicationModel.IResource!
Aspire.Hosting.IDistributedApplicationBuilder.Eventing.get -> Aspire.Hosting.Eventing.IDistributedApplicationEventing!
static Aspire.Hosting.ApplicationModel.ResourceExtensions.GetEnvironmentVariableValuesAsync(this Aspire.Hosting.ApplicationModel.IResourceWithEnvironment! resource, Aspire.Hosting.DistributedApplicationOperation applicationOperation = Aspire.Hosting.DistributedApplicationOperation.Run) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.Dictionary<string!, string!>!>
Aspire.Hosting.ApplicationModel.ResourceNotificationService.WaitForResourceAsync(string! resourceName, string? targetState = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Aspire.Hosting.ApplicationModel.ResourceNotificationService.WaitForResourceAsync(string! resourceName, System.Collections.Generic.IEnumerable<string!>! targetStates, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithContainerName<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! name) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithLifetime<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, Aspire.Hosting.ApplicationModel.ContainerLifetime lifetime) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ParameterResourceBuilderExtensions.AddParameter(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, Aspire.Hosting.ApplicationModel.ParameterDefault! value, bool secret = false, bool persist = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>!
static Aspire.Hosting.ParameterResourceBuilderExtensions.AddParameter(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! value, bool secret = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.WithEndpointsInEnvironment(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>! builder, System.Func<Aspire.Hosting.ApplicationModel.EndpointAnnotation!, bool>! filter) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
Aspire.Hosting.DistributedApplicationExecutionContext.DistributedApplicationExecutionContext(Aspire.Hosting.DistributedApplicationExecutionContextOptions! options) -> void
Aspire.Hosting.DistributedApplicationExecutionContext.ServiceProvider.get -> System.IServiceProvider!
Aspire.Hosting.DistributedApplicationExecutionContextOptions
Aspire.Hosting.DistributedApplicationExecutionContextOptions.DistributedApplicationExecutionContextOptions(Aspire.Hosting.DistributedApplicationOperation operation) -> void
Aspire.Hosting.DistributedApplicationExecutionContextOptions.Operation.get -> Aspire.Hosting.DistributedApplicationOperation
Aspire.Hosting.DistributedApplicationExecutionContextOptions.ServiceProvider.get -> System.IServiceProvider?
Aspire.Hosting.DistributedApplicationExecutionContextOptions.ServiceProvider.set -> void
static Aspire.Hosting.ResourceBuilderExtensions.WaitFor<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.IResource!>! dependency) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WaitForCompletion<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.IResource!>! dependency, int exitCode = 0) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithHealthCheck<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! key) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.Exited -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.FailedToStart -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.Finished -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.Running -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.Starting -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.Stopping -> string!
Aspire.Hosting.ProjectResourceOptions
Aspire.Hosting.ProjectResourceOptions.ExcludeKestrelEndpoints.get -> bool
Aspire.Hosting.ProjectResourceOptions.ExcludeKestrelEndpoints.set -> void
Aspire.Hosting.ProjectResourceOptions.ExcludeLaunchProfile.get -> bool
Aspire.Hosting.ProjectResourceOptions.ExcludeLaunchProfile.set -> void
Aspire.Hosting.ProjectResourceOptions.LaunchProfileName.get -> string?
Aspire.Hosting.ProjectResourceOptions.LaunchProfileName.set -> void
Aspire.Hosting.ProjectResourceOptions.ProjectResourceOptions() -> void
Aspire.Hosting.DistributedApplicationBuilder.AppHostAssembly.get -> System.Reflection.Assembly?
Aspire.Hosting.IDistributedApplicationBuilder.AppHostAssembly.get -> System.Reflection.Assembly?
static Aspire.Hosting.ContainerResourceBuilderExtensions.AddDockerfile(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! contextPath, string? dockerfilePath = null, string? stage = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ContainerResource!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithDockerfile<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! contextPath, string? dockerfilePath = null, string? stage = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildArg<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! name, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>! value) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildArg<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! name, object! value) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithBuildSecret<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! name, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>! value) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! projectPath, System.Action<Aspire.Hosting.ProjectResourceOptions!>! configure) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject<TProject>(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, System.Action<Aspire.Hosting.ProjectResourceOptions!>! configure) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.TerminalStates -> System.Collections.Generic.IReadOnlyList<string!>!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.Waiting -> string!
static Aspire.Hosting.ExecutableResourceBuilderExtensions.AddExecutable(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! command, string! workingDirectory, params object![]? args) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ExecutableResource!>!
static Aspire.Hosting.ResourceBuilderExtensions.WithArgs<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, params object![]! args) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
