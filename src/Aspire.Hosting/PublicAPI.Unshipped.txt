#nullable enable
abstract Aspire.Hosting.ApplicationModel.ParameterDefault.GetDefaultValue() -> string!
abstract Aspire.Hosting.ApplicationModel.ParameterDefault.WriteToManifest(Aspire.Hosting.Publishing.ManifestPublishingContext! context) -> void
Aspire.Hosting.ApplicationModel.AllocatedEndpoint
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.Address.get -> string!
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.AllocatedEndpoint(Aspire.Hosting.ApplicationModel.EndpointAnnotation! endpoint, string! address, int port, string? containerHostAddress = null, string? targetPortExpression = null) -> void
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.ContainerHostAddress.get -> string?
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.Endpoint.get -> Aspire.Hosting.ApplicationModel.EndpointAnnotation!
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.EndPointString.get -> string!
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.Port.get -> int
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.TargetPortExpression.get -> string?
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.UriScheme.get -> string!
Aspire.Hosting.ApplicationModel.AllocatedEndpoint.UriString.get -> string!
Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation
Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation.Callback.get -> System.Func<Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext!, System.Threading.Tasks.Task!>!
Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation.CommandLineArgsCallbackAnnotation(System.Action<System.Collections.Generic.IList<object!>!>! callback) -> void
Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackAnnotation.CommandLineArgsCallbackAnnotation(System.Func<Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext!, System.Threading.Tasks.Task!>! callback) -> void
Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext
Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext.Args.get -> System.Collections.Generic.IList<object!>!
Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext.CancellationToken.get -> System.Threading.CancellationToken
Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext.CommandLineArgsCallbackContext(System.Collections.Generic.IList<object!>! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
Aspire.Hosting.ApplicationModel.ConnectionStringRedirectAnnotation
Aspire.Hosting.ApplicationModel.ConnectionStringRedirectAnnotation.ConnectionStringRedirectAnnotation(Aspire.Hosting.ApplicationModel.IResourceWithConnectionString! resource) -> void
Aspire.Hosting.ApplicationModel.ConnectionStringRedirectAnnotation.Resource.get -> Aspire.Hosting.ApplicationModel.IResourceWithConnectionString!
Aspire.Hosting.ApplicationModel.ConnectionStringReference
Aspire.Hosting.ApplicationModel.ConnectionStringReference.ConnectionStringReference(Aspire.Hosting.ApplicationModel.IResourceWithConnectionString! resource, bool optional) -> void
Aspire.Hosting.ApplicationModel.ConnectionStringReference.Optional.get -> bool
Aspire.Hosting.ApplicationModel.ConnectionStringReference.Resource.get -> Aspire.Hosting.ApplicationModel.IResourceWithConnectionString!
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.ContainerImageAnnotation() -> void
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Image.get -> string!
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Image.set -> void
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Registry.get -> string?
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Registry.set -> void
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.SHA256.get -> string?
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.SHA256.set -> void
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Tag.get -> string?
Aspire.Hosting.ApplicationModel.ContainerImageAnnotation.Tag.set -> void
Aspire.Hosting.ApplicationModel.ContainerMountAnnotation
Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.ContainerMountAnnotation(string? source, string! target, Aspire.Hosting.ApplicationModel.ContainerMountType type, bool isReadOnly) -> void
Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.IsReadOnly.get -> bool
Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.Source.get -> string?
Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.Target.get -> string!
Aspire.Hosting.ApplicationModel.ContainerMountAnnotation.Type.get -> Aspire.Hosting.ApplicationModel.ContainerMountType
Aspire.Hosting.ApplicationModel.ContainerMountType
Aspire.Hosting.ApplicationModel.ContainerMountType.BindMount = 0 -> Aspire.Hosting.ApplicationModel.ContainerMountType
Aspire.Hosting.ApplicationModel.ContainerMountType.Volume = 1 -> Aspire.Hosting.ApplicationModel.ContainerMountType
Aspire.Hosting.ApplicationModel.ContainerResource
Aspire.Hosting.ApplicationModel.ContainerResource.ContainerResource(string! name, string? entrypoint = null) -> void
Aspire.Hosting.ApplicationModel.ContainerResource.Entrypoint.get -> string?
Aspire.Hosting.ApplicationModel.ContainerResource.Entrypoint.set -> void
Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackAnnotation
Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackAnnotation.Callback.get -> System.Func<Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackContext!, System.Threading.Tasks.Task!>!
Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackAnnotation.ContainerRunArgsCallbackAnnotation(System.Action<System.Collections.Generic.IList<object!>!>! callback) -> void
Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackAnnotation.ContainerRunArgsCallbackAnnotation(System.Func<Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackContext!, System.Threading.Tasks.Task!>! callback) -> void
Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackContext
Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackContext.Args.get -> System.Collections.Generic.IList<object!>!
Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackContext.CancellationToken.get -> System.Threading.CancellationToken
Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackContext.ContainerRunArgsCallbackContext(System.Collections.Generic.IList<object!>! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
Aspire.Hosting.ApplicationModel.CustomResourceKnownProperties
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.CreationTimeStamp.get -> System.DateTime?
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.CreationTimeStamp.init -> void
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.EnvironmentVariables.get -> System.Collections.Immutable.ImmutableArray<Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot!>
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.EnvironmentVariables.init -> void
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.ExitCode.get -> int?
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.ExitCode.init -> void
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.Properties.get -> System.Collections.Immutable.ImmutableArray<Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot!>
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.Properties.init -> void
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.ResourceType.get -> string!
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.ResourceType.init -> void
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.State.get -> Aspire.Hosting.ApplicationModel.ResourceStateSnapshot?
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.State.init -> void
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.Urls.get -> System.Collections.Immutable.ImmutableArray<Aspire.Hosting.ApplicationModel.UrlSnapshot!>
Aspire.Hosting.ApplicationModel.CustomResourceSnapshot.Urls.init -> void
Aspire.Hosting.ApplicationModel.DisableForwardedHeadersAnnotation
Aspire.Hosting.ApplicationModel.DisableForwardedHeadersAnnotation.DisableForwardedHeadersAnnotation() -> void
Aspire.Hosting.ApplicationModel.DistributedApplicationModel
Aspire.Hosting.ApplicationModel.DistributedApplicationModel.DistributedApplicationModel(Aspire.Hosting.ApplicationModel.IResourceCollection! resources) -> void
Aspire.Hosting.ApplicationModel.DistributedApplicationModel.Resources.get -> Aspire.Hosting.ApplicationModel.IResourceCollection!
Aspire.Hosting.ApplicationModel.DockerBuildArg
Aspire.Hosting.ApplicationModel.DockerBuildArg.DockerBuildArg(string! name, object? value = null) -> void
Aspire.Hosting.ApplicationModel.DockerBuildArg.Name.get -> string!
Aspire.Hosting.ApplicationModel.DockerBuildArg.Name.init -> void
Aspire.Hosting.ApplicationModel.DockerBuildArg.Value.get -> object?
Aspire.Hosting.ApplicationModel.DockerBuildArg.Value.init -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation
Aspire.Hosting.ApplicationModel.EndpointAnnotation.AllocatedEndpoint.get -> Aspire.Hosting.ApplicationModel.AllocatedEndpoint?
Aspire.Hosting.ApplicationModel.EndpointAnnotation.AllocatedEndpoint.set -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.EndpointAnnotation(System.Net.Sockets.ProtocolType protocol, string? uriScheme = null, string? transport = null, string? name = null, int? port = null, int? targetPort = null, bool? isExternal = null, bool isProxied = true) -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.IsExternal.get -> bool
Aspire.Hosting.ApplicationModel.EndpointAnnotation.IsExternal.set -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.IsProxied.get -> bool
Aspire.Hosting.ApplicationModel.EndpointAnnotation.IsProxied.set -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.Name.get -> string!
Aspire.Hosting.ApplicationModel.EndpointAnnotation.Name.set -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.Port.get -> int?
Aspire.Hosting.ApplicationModel.EndpointAnnotation.Port.set -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.Protocol.get -> System.Net.Sockets.ProtocolType
Aspire.Hosting.ApplicationModel.EndpointAnnotation.Protocol.set -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.TargetPort.get -> int?
Aspire.Hosting.ApplicationModel.EndpointAnnotation.TargetPort.set -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.Transport.get -> string!
Aspire.Hosting.ApplicationModel.EndpointAnnotation.Transport.set -> void
Aspire.Hosting.ApplicationModel.EndpointAnnotation.UriScheme.get -> string!
Aspire.Hosting.ApplicationModel.EndpointAnnotation.UriScheme.set -> void
Aspire.Hosting.ApplicationModel.EndpointProperty
Aspire.Hosting.ApplicationModel.EndpointProperty.Host = 1 -> Aspire.Hosting.ApplicationModel.EndpointProperty
Aspire.Hosting.ApplicationModel.EndpointProperty.IPV4Host = 2 -> Aspire.Hosting.ApplicationModel.EndpointProperty
Aspire.Hosting.ApplicationModel.EndpointProperty.Port = 3 -> Aspire.Hosting.ApplicationModel.EndpointProperty
Aspire.Hosting.ApplicationModel.EndpointProperty.Scheme = 4 -> Aspire.Hosting.ApplicationModel.EndpointProperty
Aspire.Hosting.ApplicationModel.EndpointProperty.TargetPort = 5 -> Aspire.Hosting.ApplicationModel.EndpointProperty
Aspire.Hosting.ApplicationModel.EndpointProperty.Url = 0 -> Aspire.Hosting.ApplicationModel.EndpointProperty
Aspire.Hosting.ApplicationModel.EndpointReference
Aspire.Hosting.ApplicationModel.EndpointReference.ContainerHost.get -> string!
Aspire.Hosting.ApplicationModel.EndpointReference.EndpointName.get -> string!
Aspire.Hosting.ApplicationModel.EndpointReference.EndpointReference(Aspire.Hosting.ApplicationModel.IResourceWithEndpoints! owner, Aspire.Hosting.ApplicationModel.EndpointAnnotation! endpoint) -> void
Aspire.Hosting.ApplicationModel.EndpointReference.EndpointReference(Aspire.Hosting.ApplicationModel.IResourceWithEndpoints! owner, string! endpointName) -> void
Aspire.Hosting.ApplicationModel.EndpointReference.Exists.get -> bool
Aspire.Hosting.ApplicationModel.EndpointReference.Host.get -> string!
Aspire.Hosting.ApplicationModel.EndpointReference.IsAllocated.get -> bool
Aspire.Hosting.ApplicationModel.EndpointReference.Port.get -> int
Aspire.Hosting.ApplicationModel.EndpointReference.Property(Aspire.Hosting.ApplicationModel.EndpointProperty property) -> Aspire.Hosting.ApplicationModel.EndpointReferenceExpression!
Aspire.Hosting.ApplicationModel.EndpointReference.Resource.get -> Aspire.Hosting.ApplicationModel.IResourceWithEndpoints!
Aspire.Hosting.ApplicationModel.EndpointReference.Scheme.get -> string!
Aspire.Hosting.ApplicationModel.EndpointReference.TargetPort.get -> int?
Aspire.Hosting.ApplicationModel.EndpointReference.Url.get -> string!
Aspire.Hosting.ApplicationModel.EndpointReferenceExpression
Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.Endpoint.get -> Aspire.Hosting.ApplicationModel.EndpointReference!
Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.EndpointReferenceExpression(Aspire.Hosting.ApplicationModel.EndpointReference! endpointReference, Aspire.Hosting.ApplicationModel.EndpointProperty property) -> void
Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.GetValueAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<string?>
Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.Property.get -> Aspire.Hosting.ApplicationModel.EndpointProperty
Aspire.Hosting.ApplicationModel.EndpointReferenceExpression.ValueExpression.get -> string!
Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation
Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.Callback.get -> System.Func<Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext!, System.Threading.Tasks.Task!>!
Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.EnvironmentCallbackAnnotation(string! name, System.Func<string!>! callback) -> void
Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.EnvironmentCallbackAnnotation(System.Action<Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext!>! callback) -> void
Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.EnvironmentCallbackAnnotation(System.Action<System.Collections.Generic.Dictionary<string!, object!>!>! callback) -> void
Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation.EnvironmentCallbackAnnotation(System.Func<Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext!, System.Threading.Tasks.Task!>! callback) -> void
Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext
Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.CancellationToken.get -> System.Threading.CancellationToken
Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.EnvironmentCallbackContext(Aspire.Hosting.DistributedApplicationExecutionContext! executionContext, System.Collections.Generic.Dictionary<string!, object!>? environmentVariables = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.EnvironmentVariables.get -> System.Collections.Generic.Dictionary<string!, object!>!
Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.ExecutionContext.get -> Aspire.Hosting.DistributedApplicationExecutionContext!
Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.Logger.get -> Microsoft.Extensions.Logging.ILogger?
Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext.Logger.set -> void
Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot
Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.EnvironmentVariableSnapshot(string! Name, string? Value, bool IsFromSpec) -> void
Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.IsFromSpec.get -> bool
Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.IsFromSpec.init -> void
Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.Name.get -> string!
Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.Name.init -> void
Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.Value.get -> string?
Aspire.Hosting.ApplicationModel.EnvironmentVariableSnapshot.Value.init -> void
Aspire.Hosting.ApplicationModel.ExecutableResource
Aspire.Hosting.ApplicationModel.ExecutableResource.Command.get -> string!
Aspire.Hosting.ApplicationModel.ExecutableResource.ExecutableResource(string! name, string! command, string! workingDirectory) -> void
Aspire.Hosting.ApplicationModel.ExecutableResource.WorkingDirectory.get -> string!
Aspire.Hosting.ApplicationModel.GenerateParameterDefault
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.GenerateParameterDefault() -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Lower.get -> bool
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Lower.set -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinLength.get -> int
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinLength.set -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinLower.get -> int
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinLower.set -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinNumeric.get -> int
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinNumeric.set -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinSpecial.get -> int
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinSpecial.set -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinUpper.get -> int
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.MinUpper.set -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Numeric.get -> bool
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Numeric.set -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Special.get -> bool
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Special.set -> void
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Upper.get -> bool
Aspire.Hosting.ApplicationModel.GenerateParameterDefault.Upper.set -> void
Aspire.Hosting.ApplicationModel.HostUrl
Aspire.Hosting.ApplicationModel.HostUrl.HostUrl(string! Url) -> void
Aspire.Hosting.ApplicationModel.HostUrl.Url.get -> string!
Aspire.Hosting.ApplicationModel.HostUrl.Url.init -> void
Aspire.Hosting.ApplicationModel.IManifestExpressionProvider
Aspire.Hosting.ApplicationModel.IManifestExpressionProvider.ValueExpression.get -> string!
Aspire.Hosting.ApplicationModel.IResource
Aspire.Hosting.ApplicationModel.IResource.Annotations.get -> Aspire.Hosting.ApplicationModel.ResourceAnnotationCollection!
Aspire.Hosting.ApplicationModel.IResource.Name.get -> string!
Aspire.Hosting.ApplicationModel.IResourceAnnotation
Aspire.Hosting.ApplicationModel.IResourceBuilder<T>
Aspire.Hosting.ApplicationModel.IResourceBuilder<T>.ApplicationBuilder.get -> Aspire.Hosting.IDistributedApplicationBuilder!
Aspire.Hosting.ApplicationModel.IResourceBuilder<T>.Resource.get -> T
Aspire.Hosting.ApplicationModel.IResourceBuilder<T>.WithAnnotation<TAnnotation>(Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior behavior = Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior.Append) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
Aspire.Hosting.ApplicationModel.IResourceBuilder<T>.WithAnnotation<TAnnotation>(TAnnotation annotation, Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior behavior = Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior.Append) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
Aspire.Hosting.ApplicationModel.IResourceCollection
Aspire.Hosting.ApplicationModel.IResourceWithArgs
Aspire.Hosting.ApplicationModel.IResourceWithConnectionString
Aspire.Hosting.ApplicationModel.IResourceWithConnectionString.ConnectionStringEnvironmentVariable.get -> string?
Aspire.Hosting.ApplicationModel.IResourceWithConnectionString.ConnectionStringExpression.get -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
Aspire.Hosting.ApplicationModel.IResourceWithConnectionString.GetConnectionStringAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<string?>
Aspire.Hosting.ApplicationModel.IResourceWithEndpoints
Aspire.Hosting.ApplicationModel.IResourceWithEnvironment
Aspire.Hosting.ApplicationModel.IResourceWithParent
Aspire.Hosting.ApplicationModel.IResourceWithParent.Parent.get -> Aspire.Hosting.ApplicationModel.IResource!
Aspire.Hosting.ApplicationModel.IResourceWithParent<T>
Aspire.Hosting.ApplicationModel.IResourceWithParent<T>.Parent.get -> T
Aspire.Hosting.ApplicationModel.IValueProvider
Aspire.Hosting.ApplicationModel.IValueProvider.GetValueAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<string?>
Aspire.Hosting.ApplicationModel.IValueWithReferences
Aspire.Hosting.ApplicationModel.IValueWithReferences.References.get -> System.Collections.Generic.IEnumerable<object!>!
Aspire.Hosting.ApplicationModel.KnownResourceStates
Aspire.Hosting.ApplicationModel.KnownResourceStateStyles
Aspire.Hosting.ApplicationModel.LogLine
Aspire.Hosting.ApplicationModel.LogLine.Content.get -> string!
Aspire.Hosting.ApplicationModel.LogLine.Content.init -> void
Aspire.Hosting.ApplicationModel.LogLine.IsErrorMessage.get -> bool
Aspire.Hosting.ApplicationModel.LogLine.IsErrorMessage.init -> void
Aspire.Hosting.ApplicationModel.LogLine.LineNumber.get -> int
Aspire.Hosting.ApplicationModel.LogLine.LineNumber.init -> void
Aspire.Hosting.ApplicationModel.LogLine.LogLine() -> void
Aspire.Hosting.ApplicationModel.LogLine.LogLine(int LineNumber, string! Content, bool IsErrorMessage) -> void
Aspire.Hosting.ApplicationModel.LogSubscriber
Aspire.Hosting.ApplicationModel.LogSubscriber.AnySubscribers.get -> bool
Aspire.Hosting.ApplicationModel.LogSubscriber.AnySubscribers.init -> void
Aspire.Hosting.ApplicationModel.LogSubscriber.LogSubscriber() -> void
Aspire.Hosting.ApplicationModel.LogSubscriber.LogSubscriber(string! Name, bool AnySubscribers) -> void
Aspire.Hosting.ApplicationModel.LogSubscriber.Name.get -> string!
Aspire.Hosting.ApplicationModel.LogSubscriber.Name.init -> void
Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation
Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation.Callback.get -> System.Func<Aspire.Hosting.Publishing.ManifestPublishingContext!, System.Threading.Tasks.Task!>?
Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation.ManifestPublishingCallbackAnnotation(System.Action<Aspire.Hosting.Publishing.ManifestPublishingContext!>? callback) -> void
Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation.ManifestPublishingCallbackAnnotation(System.Func<Aspire.Hosting.Publishing.ManifestPublishingContext!, System.Threading.Tasks.Task!>? callback) -> void
Aspire.Hosting.ApplicationModel.ParameterDefault
Aspire.Hosting.ApplicationModel.ParameterDefault.ParameterDefault() -> void
Aspire.Hosting.ApplicationModel.ParameterResource
Aspire.Hosting.ApplicationModel.ParameterResource.Default.get -> Aspire.Hosting.ApplicationModel.ParameterDefault?
Aspire.Hosting.ApplicationModel.ParameterResource.Default.set -> void
Aspire.Hosting.ApplicationModel.ParameterResource.IsConnectionString.get -> bool
Aspire.Hosting.ApplicationModel.ParameterResource.IsConnectionString.set -> void
Aspire.Hosting.ApplicationModel.ParameterResource.ParameterResource(string! name, System.Func<Aspire.Hosting.ApplicationModel.ParameterDefault?, string!>! callback, bool secret = false) -> void
Aspire.Hosting.ApplicationModel.ParameterResource.Secret.get -> bool
Aspire.Hosting.ApplicationModel.ParameterResource.Value.get -> string!
Aspire.Hosting.ApplicationModel.ParameterResource.ValueExpression.get -> string!
Aspire.Hosting.ApplicationModel.ProjectResource
Aspire.Hosting.ApplicationModel.ProjectResource.ProjectResource(string! name) -> void
Aspire.Hosting.ApplicationModel.ProjectResourceExtensions
Aspire.Hosting.ApplicationModel.ReferenceExpression
Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler
Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.AppendFormatted(string? value) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.AppendFormatted<T>(T valueProvider) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.AppendLiteral(string! value) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.ExpressionInterpolatedStringHandler() -> void
Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler.ExpressionInterpolatedStringHandler(int literalLength, int formattedCount) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpression.Format.get -> string!
Aspire.Hosting.ApplicationModel.ReferenceExpression.GetValueAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<string?>
Aspire.Hosting.ApplicationModel.ReferenceExpression.ManifestExpressions.get -> System.Collections.Generic.IReadOnlyList<string!>!
Aspire.Hosting.ApplicationModel.ReferenceExpression.ValueExpression.get -> string!
Aspire.Hosting.ApplicationModel.ReferenceExpression.ValueProviders.get -> System.Collections.Generic.IReadOnlyList<Aspire.Hosting.ApplicationModel.IValueProvider!>!
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.Append(in Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler handler) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.AppendFormatted(string? value) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.AppendFormatted<T>(T valueProvider) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.AppendLiteral(string! value) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.Build() -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.IsEmpty.get -> bool
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilder() -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.AppendFormatted(string? value) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.AppendFormatted<T>(T valueProvider) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.AppendLiteral(string! value) -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.ReferenceExpressionBuilderInterpolatedStringHandler() -> void
Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder.ReferenceExpressionBuilderInterpolatedStringHandler.ReferenceExpressionBuilderInterpolatedStringHandler(int literalLength, int formattedCount, Aspire.Hosting.ApplicationModel.ReferenceExpressionBuilder! builder) -> void
Aspire.Hosting.ApplicationModel.ReplicaAnnotation
Aspire.Hosting.ApplicationModel.ReplicaAnnotation.ReplicaAnnotation(int replicas = 1) -> void
Aspire.Hosting.ApplicationModel.ReplicaAnnotation.Replicas.get -> int
Aspire.Hosting.ApplicationModel.Resource
Aspire.Hosting.ApplicationModel.Resource.Resource(string! name) -> void
Aspire.Hosting.ApplicationModel.ResourceAnnotationCollection
Aspire.Hosting.ApplicationModel.ResourceAnnotationCollection.ResourceAnnotationCollection() -> void
Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior
Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior.Append = 0 -> Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior
Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior.Replace = 1 -> Aspire.Hosting.ApplicationModel.ResourceAnnotationMutationBehavior
Aspire.Hosting.ApplicationModel.ResourceEvent
Aspire.Hosting.ApplicationModel.ResourceEvent.Resource.get -> Aspire.Hosting.ApplicationModel.IResource!
Aspire.Hosting.ApplicationModel.ResourceEvent.ResourceEvent(Aspire.Hosting.ApplicationModel.IResource! resource, string! resourceId, Aspire.Hosting.ApplicationModel.CustomResourceSnapshot! snapshot) -> void
Aspire.Hosting.ApplicationModel.ResourceEvent.ResourceId.get -> string!
Aspire.Hosting.ApplicationModel.ResourceEvent.Snapshot.get -> Aspire.Hosting.ApplicationModel.CustomResourceSnapshot!
Aspire.Hosting.ApplicationModel.ResourceExtensions
Aspire.Hosting.ApplicationModel.ResourceLoggerService
Aspire.Hosting.ApplicationModel.ResourceLoggerService.ClearBacklog(string! resourceName) -> void
Aspire.Hosting.ApplicationModel.ResourceLoggerService.Complete(Aspire.Hosting.ApplicationModel.IResource! resource) -> void
Aspire.Hosting.ApplicationModel.ResourceLoggerService.Complete(string! name) -> void
Aspire.Hosting.ApplicationModel.ResourceLoggerService.GetLogger(Aspire.Hosting.ApplicationModel.IResource! resource) -> Microsoft.Extensions.Logging.ILogger!
Aspire.Hosting.ApplicationModel.ResourceLoggerService.GetLogger(string! resourceName) -> Microsoft.Extensions.Logging.ILogger!
Aspire.Hosting.ApplicationModel.ResourceLoggerService.ResourceLoggerService() -> void
Aspire.Hosting.ApplicationModel.ResourceLoggerService.WatchAnySubscribersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<Aspire.Hosting.ApplicationModel.LogSubscriber>!
Aspire.Hosting.ApplicationModel.ResourceLoggerService.WatchAsync(Aspire.Hosting.ApplicationModel.IResource! resource) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Aspire.Hosting.ApplicationModel.LogLine>!>!
Aspire.Hosting.ApplicationModel.ResourceLoggerService.WatchAsync(string! resourceName) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Aspire.Hosting.ApplicationModel.LogLine>!>!
Aspire.Hosting.ApplicationModel.ResourceNotificationService
Aspire.Hosting.ApplicationModel.ResourceNotificationService.PublishUpdateAsync(Aspire.Hosting.ApplicationModel.IResource! resource, string! resourceId, System.Func<Aspire.Hosting.ApplicationModel.CustomResourceSnapshot!, Aspire.Hosting.ApplicationModel.CustomResourceSnapshot!>! stateFactory) -> System.Threading.Tasks.Task!
Aspire.Hosting.ApplicationModel.ResourceNotificationService.PublishUpdateAsync(Aspire.Hosting.ApplicationModel.IResource! resource, System.Func<Aspire.Hosting.ApplicationModel.CustomResourceSnapshot!, Aspire.Hosting.ApplicationModel.CustomResourceSnapshot!>! stateFactory) -> System.Threading.Tasks.Task!
Aspire.Hosting.ApplicationModel.ResourceNotificationService.ResourceNotificationService(Microsoft.Extensions.Logging.ILogger<Aspire.Hosting.ApplicationModel.ResourceNotificationService!>! logger) -> void
Aspire.Hosting.ApplicationModel.ResourceNotificationService.WatchAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<Aspire.Hosting.ApplicationModel.ResourceEvent!>!
Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot
Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot.Name.get -> string!
Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot.Name.init -> void
Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot.ResourcePropertySnapshot(string! Name, object? Value) -> void
Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot.Value.get -> object?
Aspire.Hosting.ApplicationModel.ResourcePropertySnapshot.Value.init -> void
Aspire.Hosting.ApplicationModel.ResourceSnapshotAnnotation
Aspire.Hosting.ApplicationModel.ResourceSnapshotAnnotation.InitialSnapshot.get -> Aspire.Hosting.ApplicationModel.CustomResourceSnapshot!
Aspire.Hosting.ApplicationModel.ResourceSnapshotAnnotation.ResourceSnapshotAnnotation(Aspire.Hosting.ApplicationModel.CustomResourceSnapshot! initialSnapshot) -> void
Aspire.Hosting.ApplicationModel.ResourceStateSnapshot
Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.ResourceStateSnapshot(string! Text, string? Style) -> void
Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.Style.get -> string?
Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.Style.init -> void
Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.Text.get -> string!
Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.Text.init -> void
Aspire.Hosting.ApplicationModel.UrlSnapshot
Aspire.Hosting.ApplicationModel.UrlSnapshot.IsInternal.get -> bool
Aspire.Hosting.ApplicationModel.UrlSnapshot.IsInternal.init -> void
Aspire.Hosting.ApplicationModel.UrlSnapshot.Name.get -> string!
Aspire.Hosting.ApplicationModel.UrlSnapshot.Name.init -> void
Aspire.Hosting.ApplicationModel.UrlSnapshot.Url.get -> string!
Aspire.Hosting.ApplicationModel.UrlSnapshot.Url.init -> void
Aspire.Hosting.ApplicationModel.UrlSnapshot.UrlSnapshot(string! Name, string! Url, bool IsInternal) -> void
Aspire.Hosting.ContainerResourceBuilderExtensions
Aspire.Hosting.ContainerResourceExtensions
Aspire.Hosting.CustomResourceExtensions
Aspire.Hosting.DistributedApplication
Aspire.Hosting.DistributedApplication.DistributedApplication(Microsoft.Extensions.Hosting.IHost! host) -> void
Aspire.Hosting.DistributedApplication.Run() -> void
Aspire.Hosting.DistributedApplication.Services.get -> System.IServiceProvider!
Aspire.Hosting.DistributedApplicationBuilder
Aspire.Hosting.DistributedApplicationBuilder.AddResource<T>(T resource) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
Aspire.Hosting.DistributedApplicationBuilder.AppHostDirectory.get -> string!
Aspire.Hosting.DistributedApplicationBuilder.Build() -> Aspire.Hosting.DistributedApplication!
Aspire.Hosting.DistributedApplicationBuilder.Configuration.get -> Microsoft.Extensions.Configuration.ConfigurationManager!
Aspire.Hosting.DistributedApplicationBuilder.CreateResourceBuilder<T>(T resource) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
Aspire.Hosting.DistributedApplicationBuilder.DistributedApplicationBuilder(Aspire.Hosting.DistributedApplicationOptions! options) -> void
Aspire.Hosting.DistributedApplicationBuilder.DistributedApplicationBuilder(string![]! args) -> void
Aspire.Hosting.DistributedApplicationBuilder.Environment.get -> Microsoft.Extensions.Hosting.IHostEnvironment!
Aspire.Hosting.DistributedApplicationBuilder.ExecutionContext.get -> Aspire.Hosting.DistributedApplicationExecutionContext!
Aspire.Hosting.DistributedApplicationBuilder.Resources.get -> Aspire.Hosting.ApplicationModel.IResourceCollection!
Aspire.Hosting.DistributedApplicationBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Aspire.Hosting.DistributedApplicationException
Aspire.Hosting.DistributedApplicationException.DistributedApplicationException() -> void
Aspire.Hosting.DistributedApplicationException.DistributedApplicationException(string! message) -> void
Aspire.Hosting.DistributedApplicationException.DistributedApplicationException(string! message, System.Exception! inner) -> void
Aspire.Hosting.DistributedApplicationExecutionContext
Aspire.Hosting.DistributedApplicationExecutionContext.DistributedApplicationExecutionContext(Aspire.Hosting.DistributedApplicationOperation operation) -> void
Aspire.Hosting.DistributedApplicationExecutionContext.IsPublishMode.get -> bool
Aspire.Hosting.DistributedApplicationExecutionContext.IsRunMode.get -> bool
Aspire.Hosting.DistributedApplicationExecutionContext.Operation.get -> Aspire.Hosting.DistributedApplicationOperation
Aspire.Hosting.DistributedApplicationOperation
Aspire.Hosting.DistributedApplicationOperation.Publish = 1 -> Aspire.Hosting.DistributedApplicationOperation
Aspire.Hosting.DistributedApplicationOperation.Run = 0 -> Aspire.Hosting.DistributedApplicationOperation
Aspire.Hosting.DistributedApplicationOptions
Aspire.Hosting.DistributedApplicationOptions.AllowUnsecuredTransport.get -> bool
Aspire.Hosting.DistributedApplicationOptions.AllowUnsecuredTransport.set -> void
Aspire.Hosting.DistributedApplicationOptions.Args.get -> string![]?
Aspire.Hosting.DistributedApplicationOptions.Args.set -> void
Aspire.Hosting.DistributedApplicationOptions.AssemblyName.get -> string?
Aspire.Hosting.DistributedApplicationOptions.AssemblyName.set -> void
Aspire.Hosting.DistributedApplicationOptions.ContainerRegistryOverride.get -> string?
Aspire.Hosting.DistributedApplicationOptions.ContainerRegistryOverride.set -> void
Aspire.Hosting.DistributedApplicationOptions.DisableDashboard.get -> bool
Aspire.Hosting.DistributedApplicationOptions.DisableDashboard.set -> void
Aspire.Hosting.DistributedApplicationOptions.DistributedApplicationOptions() -> void
Aspire.Hosting.ExecutableResourceBuilderExtensions
Aspire.Hosting.ExecutableResourceExtensions
Aspire.Hosting.IDistributedApplicationBuilder
Aspire.Hosting.IDistributedApplicationBuilder.AddResource<T>(T resource) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
Aspire.Hosting.IDistributedApplicationBuilder.AppHostDirectory.get -> string!
Aspire.Hosting.IDistributedApplicationBuilder.Build() -> Aspire.Hosting.DistributedApplication!
Aspire.Hosting.IDistributedApplicationBuilder.Configuration.get -> Microsoft.Extensions.Configuration.ConfigurationManager!
Aspire.Hosting.IDistributedApplicationBuilder.CreateResourceBuilder<T>(T resource) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
Aspire.Hosting.IDistributedApplicationBuilder.Environment.get -> Microsoft.Extensions.Hosting.IHostEnvironment!
Aspire.Hosting.IDistributedApplicationBuilder.ExecutionContext.get -> Aspire.Hosting.DistributedApplicationExecutionContext!
Aspire.Hosting.IDistributedApplicationBuilder.Resources.get -> Aspire.Hosting.ApplicationModel.IResourceCollection!
Aspire.Hosting.IDistributedApplicationBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Aspire.Hosting.IProjectMetadata
Aspire.Hosting.IProjectMetadata.ProjectPath.get -> string!
Aspire.Hosting.IResourceWithServiceDiscovery
Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook
Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterEndpointsAllocatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel! appModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.AfterResourcesCreatedAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel! appModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Aspire.Hosting.Lifecycle.IDistributedApplicationLifecycleHook.BeforeStartAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel! appModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions
Aspire.Hosting.OtlpConfigurationExtensions
Aspire.Hosting.ParameterResourceBuilderExtensions
Aspire.Hosting.ProjectResourceBuilderExtensions
Aspire.Hosting.Publishing.IDistributedApplicationPublisher
Aspire.Hosting.Publishing.IDistributedApplicationPublisher.PublishAsync(Aspire.Hosting.ApplicationModel.DistributedApplicationModel! model, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Aspire.Hosting.Publishing.ManifestPublishingContext
Aspire.Hosting.Publishing.ManifestPublishingContext.CancellationToken.get -> System.Threading.CancellationToken
Aspire.Hosting.Publishing.ManifestPublishingContext.ExecutionContext.get -> Aspire.Hosting.DistributedApplicationExecutionContext!
Aspire.Hosting.Publishing.ManifestPublishingContext.GetManifestRelativePath(string? path) -> string?
Aspire.Hosting.Publishing.ManifestPublishingContext.ManifestPath.get -> string!
Aspire.Hosting.Publishing.ManifestPublishingContext.ManifestPublishingContext(Aspire.Hosting.DistributedApplicationExecutionContext! executionContext, string! manifestPath, System.Text.Json.Utf8JsonWriter! writer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
Aspire.Hosting.Publishing.ManifestPublishingContext.TryAddDependentResources(object? value) -> void
Aspire.Hosting.Publishing.ManifestPublishingContext.WriteBindings(Aspire.Hosting.ApplicationModel.IResource! resource) -> void
Aspire.Hosting.Publishing.ManifestPublishingContext.WriteCommandLineArgumentsAsync(Aspire.Hosting.ApplicationModel.IResource! resource) -> System.Threading.Tasks.Task!
Aspire.Hosting.Publishing.ManifestPublishingContext.WriteConnectionString(Aspire.Hosting.ApplicationModel.IResource! resource) -> void
Aspire.Hosting.Publishing.ManifestPublishingContext.WriteContainerAsync(Aspire.Hosting.ApplicationModel.ContainerResource! container) -> System.Threading.Tasks.Task!
Aspire.Hosting.Publishing.ManifestPublishingContext.WriteEnvironmentVariablesAsync(Aspire.Hosting.ApplicationModel.IResource! resource) -> System.Threading.Tasks.Task!
Aspire.Hosting.Publishing.ManifestPublishingContext.Writer.get -> System.Text.Json.Utf8JsonWriter!
Aspire.Hosting.Publishing.PublishingOptions
Aspire.Hosting.Publishing.PublishingOptions.OutputPath.get -> string?
Aspire.Hosting.Publishing.PublishingOptions.OutputPath.set -> void
Aspire.Hosting.Publishing.PublishingOptions.Publisher.get -> string?
Aspire.Hosting.Publishing.PublishingOptions.Publisher.set -> void
Aspire.Hosting.Publishing.PublishingOptions.PublishingOptions() -> void
Aspire.Hosting.ResourceBuilderExtensions
const Aspire.Hosting.Publishing.PublishingOptions.Publishing = "Publishing" -> string!
override Aspire.Hosting.ApplicationModel.AllocatedEndpoint.ToString() -> string!
override Aspire.Hosting.ApplicationModel.GenerateParameterDefault.GetDefaultValue() -> string!
override Aspire.Hosting.ApplicationModel.GenerateParameterDefault.WriteToManifest(Aspire.Hosting.Publishing.ManifestPublishingContext! context) -> void
static Aspire.Hosting.ApplicationModel.CustomResourceKnownProperties.Source.get -> string!
static Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation.Ignore.get -> Aspire.Hosting.ApplicationModel.ManifestPublishingCallbackAnnotation!
static Aspire.Hosting.ApplicationModel.ProjectResourceExtensions.GetProjectMetadata(this Aspire.Hosting.ApplicationModel.ProjectResource! projectResource) -> Aspire.Hosting.IProjectMetadata!
static Aspire.Hosting.ApplicationModel.ProjectResourceExtensions.GetProjectResources(this Aspire.Hosting.ApplicationModel.DistributedApplicationModel! model) -> System.Collections.Generic.IEnumerable<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static Aspire.Hosting.ApplicationModel.ReferenceExpression.Create(in Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler handler) -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
static Aspire.Hosting.ApplicationModel.ResourceExtensions.GetEndpoint(this Aspire.Hosting.ApplicationModel.IResourceWithEndpoints! resource, string! endpointName) -> Aspire.Hosting.ApplicationModel.EndpointReference!
static Aspire.Hosting.ApplicationModel.ResourceExtensions.GetEndpoints(this Aspire.Hosting.ApplicationModel.IResourceWithEndpoints! resource) -> System.Collections.Generic.IEnumerable<Aspire.Hosting.ApplicationModel.EndpointReference!>!
static Aspire.Hosting.ApplicationModel.ResourceExtensions.GetReplicaCount(this Aspire.Hosting.ApplicationModel.IResource! resource) -> int
static Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetAnnotationsOfType<T>(this Aspire.Hosting.ApplicationModel.IResource! resource, out System.Collections.Generic.IEnumerable<T>? result) -> bool
static Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetContainerImageName(this Aspire.Hosting.ApplicationModel.IResource! resource, out string? imageName) -> bool
static Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetContainerMounts(this Aspire.Hosting.ApplicationModel.IResource! resource, out System.Collections.Generic.IEnumerable<Aspire.Hosting.ApplicationModel.ContainerMountAnnotation!>? volumeMounts) -> bool
static Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetEndpoints(this Aspire.Hosting.ApplicationModel.IResource! resource, out System.Collections.Generic.IEnumerable<Aspire.Hosting.ApplicationModel.EndpointAnnotation!>? endpoints) -> bool
static Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetEnvironmentVariables(this Aspire.Hosting.ApplicationModel.IResource! resource, out System.Collections.Generic.IEnumerable<Aspire.Hosting.ApplicationModel.EnvironmentCallbackAnnotation!>? environmentVariables) -> bool
static Aspire.Hosting.ApplicationModel.ResourceExtensions.TryGetLastAnnotation<T>(this Aspire.Hosting.ApplicationModel.IResource! resource, out T? annotation) -> bool
static Aspire.Hosting.ApplicationModel.ResourceStateSnapshot.implicit operator Aspire.Hosting.ApplicationModel.ResourceStateSnapshot?(string? s) -> Aspire.Hosting.ApplicationModel.ResourceStateSnapshot?
static Aspire.Hosting.ContainerResourceBuilderExtensions.AddContainer(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! image) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ContainerResource!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.AddContainer(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! image, string! tag) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ContainerResource!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.PublishAsContainer<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithBindMount<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! source, string! target, bool isReadOnly = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithContainerRunArgs<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, params string![]! args) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithContainerRunArgs<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, System.Action<Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackContext!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithContainerRunArgs<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, System.Func<Aspire.Hosting.ApplicationModel.ContainerRunArgsCallbackContext!, System.Threading.Tasks.Task!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithEntrypoint<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! entrypoint) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithImage<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! image, string! tag = "latest") -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithImageRegistry<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! registry) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithImageSHA256<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! sha256) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithImageTag<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! tag) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithVolume<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! name, string! target, bool isReadOnly = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceBuilderExtensions.WithVolume<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, string! target) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ContainerResourceExtensions.GetContainerResources(this Aspire.Hosting.ApplicationModel.DistributedApplicationModel! model) -> System.Collections.Generic.IEnumerable<Aspire.Hosting.ApplicationModel.IResource!>!
static Aspire.Hosting.ContainerResourceExtensions.IsContainer(this Aspire.Hosting.ApplicationModel.IResource! resource) -> bool
static Aspire.Hosting.CustomResourceExtensions.WithInitialState<TResource>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<TResource>! builder, Aspire.Hosting.ApplicationModel.CustomResourceSnapshot! initialSnapshot) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<TResource>!
static Aspire.Hosting.DistributedApplication.CreateBuilder() -> Aspire.Hosting.IDistributedApplicationBuilder!
static Aspire.Hosting.DistributedApplication.CreateBuilder(Aspire.Hosting.DistributedApplicationOptions! options) -> Aspire.Hosting.IDistributedApplicationBuilder!
static Aspire.Hosting.DistributedApplication.CreateBuilder(string![]! args) -> Aspire.Hosting.IDistributedApplicationBuilder!
static Aspire.Hosting.ExecutableResourceBuilderExtensions.AddExecutable(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! command, string! workingDirectory, params string![]? args) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ExecutableResource!>!
static Aspire.Hosting.ExecutableResourceBuilderExtensions.PublishAsDockerFile<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, System.Collections.Generic.IEnumerable<Aspire.Hosting.ApplicationModel.DockerBuildArg!>? buildArgs = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ExecutableResourceExtensions.GetExecutableResources(this Aspire.Hosting.ApplicationModel.DistributedApplicationModel! model) -> System.Collections.Generic.IEnumerable<Aspire.Hosting.ApplicationModel.ExecutableResource!>!
static Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions.AddLifecycleHook<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
static Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions.AddLifecycleHook<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, T!>! implementationFactory) -> void
static Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions.TryAddLifecycleHook<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
static Aspire.Hosting.Lifecycle.LifecycleHookServiceCollectionExtensions.TryAddLifecycleHook<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<System.IServiceProvider!, T!>! implementationFactory) -> void
static Aspire.Hosting.OtlpConfigurationExtensions.AddOtlpEnvironment(Aspire.Hosting.ApplicationModel.IResource! resource, Microsoft.Extensions.Configuration.IConfiguration! configuration, Microsoft.Extensions.Hosting.IHostEnvironment! environment) -> void
static Aspire.Hosting.OtlpConfigurationExtensions.WithOtlpExporter<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ParameterResourceBuilderExtensions.AddConnectionString(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string? environmentVariableName = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.IResourceWithConnectionString!>!
static Aspire.Hosting.ParameterResourceBuilderExtensions.AddParameter(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, bool secret = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>!
static Aspire.Hosting.ParameterResourceBuilderExtensions.ConfigureConnectionStringManifestPublisher(Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.IResourceWithConnectionString!>! builder) -> void
static Aspire.Hosting.ParameterResourceBuilderExtensions.CreateDefaultPasswordParameter(Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, bool lower = true, bool upper = true, bool numeric = true, bool special = true, int minLower = 0, int minUpper = 0, int minNumeric = 0, int minSpecial = 0) -> Aspire.Hosting.ApplicationModel.ParameterResource!
static Aspire.Hosting.ParameterResourceBuilderExtensions.CreateGeneratedParameter(Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, bool secret, Aspire.Hosting.ApplicationModel.GenerateParameterDefault! parameterDefault) -> Aspire.Hosting.ApplicationModel.ParameterResource!
static Aspire.Hosting.ParameterResourceBuilderExtensions.PublishAsConnectionString<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! projectPath) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string! projectPath, string? launchProfileName) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject<TProject>(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.AddProject<TProject>(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string? launchProfileName) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.DisableForwardedHeaders(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>! builder) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static Aspire.Hosting.ProjectResourceBuilderExtensions.WithReplicas(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>! builder, int replicas) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ProjectResource!>!
static Aspire.Hosting.ResourceBuilderExtensions.AsHttp2Service<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.ExcludeFromManifest<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.GetEndpoint<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! name) -> Aspire.Hosting.ApplicationModel.EndpointReference!
static Aspire.Hosting.ResourceBuilderExtensions.WithArgs<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, params string![]! args) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithArgs<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, System.Action<Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithArgs<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, System.Func<Aspire.Hosting.ApplicationModel.CommandLineArgsCallbackContext!, System.Threading.Tasks.Task!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithConnectionStringRedirection<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, Aspire.Hosting.ApplicationModel.IResourceWithConnectionString! resource) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEndpoint<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, int? port = null, int? targetPort = null, string? scheme = null, string? name = null, string? env = null, bool isProxied = true, bool? isExternal = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEndpoint<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! endpointName, System.Action<Aspire.Hosting.ApplicationModel.EndpointAnnotation!>! callback, bool createIfNotExists = true) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! envVarName, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.IResourceWithConnectionString!>! resource) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! name, Aspire.Hosting.ApplicationModel.EndpointReference! endpointReference) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! name, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>! parameter) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! name, in Aspire.Hosting.ApplicationModel.ReferenceExpression.ExpressionInterpolatedStringHandler value) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! name, string? value) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, string! name, System.Func<string!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, System.Action<Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithEnvironment<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, System.Func<Aspire.Hosting.ApplicationModel.EnvironmentCallbackContext!, System.Threading.Tasks.Task!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithExternalHttpEndpoints<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithHttpEndpoint<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, int? port = null, int? targetPort = null, string? name = null, string? env = null, bool isProxied = true) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithHttpsEndpoint<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, int? port = null, int? targetPort = null, string? name = null, string? env = null, bool isProxied = true) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithManifestPublishingCallback<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, System.Action<Aspire.Hosting.Publishing.ManifestPublishingContext!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithManifestPublishingCallback<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T>! builder, System.Func<Aspire.Hosting.Publishing.ManifestPublishingContext!, System.Threading.Tasks.Task!>! callback) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T>!
static Aspire.Hosting.ResourceBuilderExtensions.WithReference<TDestination>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<TDestination>! builder, Aspire.Hosting.ApplicationModel.EndpointReference! endpointReference) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<TDestination>!
static Aspire.Hosting.ResourceBuilderExtensions.WithReference<TDestination>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<TDestination>! builder, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.IResourceWithConnectionString!>! source, string? connectionName = null, bool optional = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<TDestination>!
static Aspire.Hosting.ResourceBuilderExtensions.WithReference<TDestination>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<TDestination>! builder, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.IResourceWithServiceDiscovery!>! source) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<TDestination>!
static Aspire.Hosting.ResourceBuilderExtensions.WithReference<TDestination>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<TDestination>! builder, string! name, System.Uri! uri) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<TDestination>!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStates.Hidden -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStateStyles.Error -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStateStyles.Info -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStateStyles.Success -> string!
static readonly Aspire.Hosting.ApplicationModel.KnownResourceStateStyles.Warn -> string!
virtual Aspire.Hosting.ApplicationModel.Resource.Annotations.get -> Aspire.Hosting.ApplicationModel.ResourceAnnotationCollection!
virtual Aspire.Hosting.ApplicationModel.Resource.Name.get -> string!
virtual Aspire.Hosting.DistributedApplication.Dispose() -> void
virtual Aspire.Hosting.DistributedApplication.DisposeAsync() -> System.Threading.Tasks.ValueTask
virtual Aspire.Hosting.DistributedApplication.RunAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
virtual Aspire.Hosting.DistributedApplication.StartAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
virtual Aspire.Hosting.DistributedApplication.StopAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
