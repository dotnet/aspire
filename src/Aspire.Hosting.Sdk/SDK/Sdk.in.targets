<Project>

  <PropertyGroup>
    <!-- Ensure this property is set even if Aspire.Hosting.Sdk was imported directly instead of via the workload targets -->
    <IsAspireHost>true</IsAspireHost>
    <AspireHostingVersion Condition=" '$(AspireHostingVersion)' == '' ">@VERSION@</AspireHostingVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Aspire.Hosting" IsImplicitlyDefined="true" Version="$(AspireHostingVersion)" />
  </ItemGroup>

  <!-- *** BEGIN *** -->

  <!--
  A property-based workload cannot import props files (except AutoImport.props, which has very tight limitations.
  Instead, we copy everything from Aspire.Hosting.props into these targets.
  This means they cannot be overridden in the csproj, and may cause ordering issues, particularly StaticWebAssets.
  -->

  <ItemGroup>
    <ProjectCapability Include="Aspire" />
    <ProjectCapability Include="AspireHost" />
    <!-- TODO: remove this once VS supports the new name. -->
    <ProjectCapability Include="Astra" />
  </ItemGroup>

  <PropertyGroup>
    <!-- Aspire hosting projects aren't publishable right now until https://github.com/dotnet/astra/issues/268 is good -->
    <IsPublishable Condition="'$(IsPublishable)' == ''">false</IsPublishable>
    <IsPackable Condition="'$(IsPackable)' == ''">false</IsPackable>
  </PropertyGroup>

  <!-- *** END ***  -->

  <!--
  This SDK comes from a workload pack, so normally should only be referenced from
  the WorkloadManifest.targets so as not to cause workload restore to require multiple
  phases, but it's okay here because every workload that contains Aspire.Hosting.Sdk
  also contains Aspire.Hosting.Orchestration and vice versa. Once Aspire/DCP are public
  we can move it to WorkloadManifest.targets to ensure future correctness.
  -->
  <Import Project="Sdk.targets" Sdk="Aspire.Hosting.Orchestration" />

</Project>
