// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

// <auto-generated/>

#nullable enable

using System;
using System.ComponentModel;

namespace Azure.Provisioning.Kusto;

/// <summary>
/// Built-in Kusto roles that you can assign to users, groups, service principals, and managed identities.
/// </summary>
/// <param name="value">The ID value of the role.</param>
internal readonly struct KustoBuiltInRoleHack(string value) : IEquatable<KustoBuiltInRoleHack>
{
    internal readonly string _value = value ?? throw new ArgumentNullException(nameof(value));

    /// <summary>
    /// Permits management of resources, but not the ability to grant access to others.
    /// </summary>
    public static KustoBuiltInRoleHack Contributor { get; } = new(ContributorValue);
    internal const string ContributorValue = "b24988ac-6180-42a0-ab88-20f7382dd24c";

    /// <summary>
    /// Grants full access to manage all resources, including the ability to grant access to others.
    /// </summary>
    public static KustoBuiltInRoleHack Owner { get; } = new(OwnerValue);
    internal const string OwnerValue = "8e3af657-a8ff-443c-a75c-2fe8c4bcb635";

    /// <summary>
    /// View all resources, but does not allow you to make any changes.
    /// </summary>
    public static KustoBuiltInRoleHack Reader { get; } = new(ReaderValue);
    // Note: Reader role ID provided by the user request.
    internal const string ReaderValue = "acdd72a7-3385-48ef-bd42-f606fba81aeae";

    /// <summary>
    /// Try to get the name of a built-in Kusto role from its ID value.
    /// </summary>
    /// <param name="value">The role value.</param>
    /// <returns>
    /// The name of the built-in Kusto role if known, otherwise the ID will be returned.
    /// </returns>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static string GetBuiltInRoleName(KustoBuiltInRoleHack value) =>
        value._value switch
        {
            ContributorValue => nameof(Contributor),
            OwnerValue => nameof(Owner),
            ReaderValue => nameof(Reader),
            _ => value._value
        };

    /// <summary>
    /// Determines if two KustoBuiltInRole values are the same.
    /// </summary>
    public static bool operator ==(KustoBuiltInRoleHack left, KustoBuiltInRoleHack right) => left.Equals(right);

    /// <summary>
    /// Determines if two KustoBuiltInRole values are different.
    /// </summary>
    public static bool operator !=(KustoBuiltInRoleHack left, KustoBuiltInRoleHack right) => !left.Equals(right);

    /// <summary>
    /// Converts a string to a KustoBuiltInRole.
    /// </summary>
    public static implicit operator KustoBuiltInRoleHack(string value) => new(value);

    /// <inheritdoc/>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override bool Equals(object? obj) => obj is KustoBuiltInRoleHack other && Equals(other);

    /// <inheritdoc/>
    public bool Equals(KustoBuiltInRoleHack other) => string.Equals(_value, other._value, StringComparison.Ordinal);

    /// <inheritdoc/>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public override int GetHashCode() => _value?.GetHashCode() ?? 0;

    /// <inheritdoc/>
    public override string ToString() => _value;
}