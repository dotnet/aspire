//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class AzureOpenAIExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.AzureOpenAIResource> AddAzureOpenAI(this IDistributedApplicationBuilder builder, string name) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.AzureOpenAIResource> AddDeployment(this ApplicationModel.IResourceBuilder<ApplicationModel.AzureOpenAIResource> builder, ApplicationModel.AzureOpenAIDeployment deployment) { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class AzureOpenAIDeployment
    {
        public AzureOpenAIDeployment(string name, string modelName, string modelVersion, string? skuName = null, int? skuCapacity = null) { }

        public string ModelName { get { throw null; } }

        public string ModelVersion { get { throw null; } }

        public string Name { get { throw null; } }

        public int SkuCapacity { get { throw null; } set { } }

        public string SkuName { get { throw null; } set { } }
    }

    public partial class AzureOpenAIResource : Azure.AzureProvisioningResource, IResourceWithConnectionString, IResource, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public AzureOpenAIResource(string name, System.Action<Azure.AzureResourceInfrastructure> configureInfrastructure) : base(default!, default!) { }

        public Azure.BicepOutputReference ConnectionString { get { throw null; } }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<AzureOpenAIDeployment> Deployments { get { throw null; } }
    }
}