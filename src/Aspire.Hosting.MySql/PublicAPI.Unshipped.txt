#nullable enable
Aspire.Hosting.ApplicationModel.MySqlDatabaseResource
Aspire.Hosting.ApplicationModel.MySqlDatabaseResource.ConnectionStringExpression.get -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
Aspire.Hosting.ApplicationModel.MySqlDatabaseResource.DatabaseName.get -> string!
Aspire.Hosting.ApplicationModel.MySqlDatabaseResource.MySqlDatabaseResource(string! name, string! databaseName, Aspire.Hosting.ApplicationModel.MySqlServerResource! parent) -> void
Aspire.Hosting.ApplicationModel.MySqlDatabaseResource.Parent.get -> Aspire.Hosting.ApplicationModel.MySqlServerResource!
Aspire.Hosting.ApplicationModel.MySqlServerResource
Aspire.Hosting.ApplicationModel.MySqlServerResource.ConnectionStringExpression.get -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
Aspire.Hosting.ApplicationModel.MySqlServerResource.Databases.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
Aspire.Hosting.ApplicationModel.MySqlServerResource.MySqlServerResource(string! name, Aspire.Hosting.ApplicationModel.ParameterResource! password) -> void
Aspire.Hosting.ApplicationModel.MySqlServerResource.PasswordParameter.get -> Aspire.Hosting.ApplicationModel.ParameterResource!
Aspire.Hosting.ApplicationModel.MySqlServerResource.PrimaryEndpoint.get -> Aspire.Hosting.ApplicationModel.EndpointReference!
Aspire.Hosting.MySqlBuilderExtensions
static Aspire.Hosting.MySqlBuilderExtensions.AddDatabase(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlServerResource!>! builder, string! name, string? databaseName = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlDatabaseResource!>!
static Aspire.Hosting.MySqlBuilderExtensions.AddMySql(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.ParameterResource!>? password = null, int? port = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlServerResource!>!
static Aspire.Hosting.MySqlBuilderExtensions.WithDataBindMount(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlServerResource!>! builder, string! source, bool isReadOnly = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlServerResource!>!
static Aspire.Hosting.MySqlBuilderExtensions.WithDataVolume(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlServerResource!>! builder, string? name = null, bool isReadOnly = false) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlServerResource!>!
static Aspire.Hosting.MySqlBuilderExtensions.WithInitBindMount(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlServerResource!>! builder, string! source, bool isReadOnly = true) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.MySqlServerResource!>!
static Aspire.Hosting.MySqlBuilderExtensions.WithPhpMyAdmin<T>(this Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>! builder, int? hostPort = null, string? containerName = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<T!>!
