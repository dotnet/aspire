import * as vscode from 'vscode';

export const noCsprojFound = vscode.l10n.t('No apphost found in the current workspace.');
export const errorMessage = (error: any) => vscode.l10n.t('Error: {0}', error);
export const yesLabel = vscode.l10n.t('Yes');
export const noLabel = vscode.l10n.t('No');
export const directUrl = (url: string) => vscode.l10n.t('Direct: {0}', url);
export const codespacesUrl = (url: string) => vscode.l10n.t('Codespaces: {0}', url);
export const directLink = vscode.l10n.t('Open local URL');
export const codespacesLink = vscode.l10n.t('Open codespaces URL');
export const openAspireDashboard = vscode.l10n.t('Launch Aspire Dashboard');
export const noWorkspaceOpen = vscode.l10n.t('No workspace is open. Please open a folder or workspace before running this command.');
export const failedToShowPromptEmpty = vscode.l10n.t('Failed to show prompt, text was empty.');
export const rpcServerAddressError = vscode.l10n.t('Failed to get RPC server address. The extension may not function correctly.');
export const rpcServerError = (err: any) => vscode.l10n.t('RPC server error: {0}.', err);
export const incompatibleAppHostError = vscode.l10n.t('The apphost is not compatible. Consider upgrading the apphost or Aspire CLI.');
export const aspireHostingSdkVersion = (version: string) => vscode.l10n.t('Aspire Hosting SDK Version: {0}.', version);
export const aspireCliVersion = (version: string) => vscode.l10n.t('Aspire CLI Version: {0}.', version);
export const requiredCapability = (capability: string) => vscode.l10n.t('Required capability: {0}.', capability);
export const aspireTerminalName = vscode.l10n.t('Aspire terminal');
export const aspireOutputChannelName = vscode.l10n.t('Aspire Extension');
export const fieldRequired = vscode.l10n.t('This field is required.');
export const runProject = (projectName: string) => vscode.l10n.t('Run {0}', projectName);
export const debugProject = (projectName: string) => vscode.l10n.t('Debug {0}', projectName);
export const watchProject = (projectName: string, projectType: string) => vscode.l10n.t('Watch {0} ({1})', projectName, projectType);
export const noCsharpBuildTask = vscode.l10n.t('No C# Dev Kit build task found.');
export const noWatchTask = vscode.l10n.t('No watch task found. Please ensure a watch task is defined in your workspace.');
export const buildFailedWithExitCode = (exitCode: number | string) => vscode.l10n.t('Build failed with exit code {0}.', exitCode);
export const noOutputFromMsbuild = vscode.l10n.t('No output from msbuild.');
export const failedToGetTargetPath = (err: string) => vscode.l10n.t('Failed to get TargetPath: {0}.', err);
export const unsupportedResourceType = (type: string) => vscode.l10n.t('Attempted to start unsupported resource type: {0}.', type);
export const rpcServerNotInitialized = vscode.l10n.t('RPC server is not initialized.');
export const extensionContextNotInitialized = vscode.l10n.t('Extension context is not initialized.');
export const aspireDebugSessionNotInitialized = vscode.l10n.t('Aspire debug session is not initialized');
export const errorRetrievingAppHosts = vscode.l10n.t('Error retrieving apphosts in the current workspace. Debug options may be incomplete.');
export const launchingWithDirectory = (appHostPath: string) => vscode.l10n.t('Launching Aspire debug session using directory {0}: attempting to determine effective apphost...', appHostPath);
export const launchingWithAppHost = (appHostPath: string) => vscode.l10n.t('Launching Aspire debug session for apphost {0}...', appHostPath);
export const disconnectingFromSession = vscode.l10n.t('Disconnecting from Aspire debug session... Child processes will be stopped.');
export const processExitedWithCode = (code: number | string) => vscode.l10n.t('Process exited with code {0}.', code);
export const failedToStartPythonProgram = (errorMessage: string) => vscode.l10n.t('Failed to start Python program: {0}.', errorMessage);
export const csharpSupportNotEnabled = vscode.l10n.t('C# support is not enabled in this workspace. This project should have started through the Aspire CLI.');
export const failedToStartProject = (errorMessage: string) => vscode.l10n.t('Failed to start project: {0}.', errorMessage);
export const dcpServerNotInitialized = vscode.l10n.t('DCP server not initialized - cannot forward debug output.');
export const invalidTokenProvided = vscode.l10n.t('Invalid token provided.');
export const noWorkspaceFolder = vscode.l10n.t('No workspace folder found.');
export const aspireConfigExists = vscode.l10n.t('Aspire launch configuration already exists in launch.json.');
export const failedToConfigureLaunchJson = (error: any) => vscode.l10n.t('Failed to configure launch.json: {0}.', error);
export const defaultConfigurationName = vscode.l10n.t('Aspire: Launch default apphost');
export const debugSessionAlreadyExists = (id: string) => vscode.l10n.t('A debug session is already active for id {0}.', id);
export const processExceptionOccurred = (error: string, command: string) => vscode.l10n.t('Encountered an exception ({0}) while running the following command: {1}.', error, command);
export const failedToStartDebugSession = vscode.l10n.t('Failed to start debug session.');
export const invalidLaunchConfiguration = (projectPath: string) => vscode.l10n.t('Invalid launch configuration for {0}.', projectPath);
export const dontShowAgainLabel = vscode.l10n.t("Don't Show Again");
export const doYouWantToSetDefaultApphost = (appHost: string) => vscode.l10n.t('Do you want to set {0} as the default apphost for this workspace?', appHost);
export const doYouWantToSelectDefaultApphost = vscode.l10n.t('Do you want to select the default apphost for this workspace?');
export const selectDefaultLaunchApphost = vscode.l10n.t('Select the default apphost to launch when starting an Aspire debug session');
export const noAppHostInWorkspace = vscode.l10n.t('No apphost found in the Aspire settings file.');
export const dashboard = vscode.l10n.t('Dashboard');
export const codespaces = vscode.l10n.t('Codespaces');
export const encounteredErrorStartingResource = (error: string) => vscode.l10n.t('Encountered an error starting resource: {0}', error);
export const invalidOrMissingToken = vscode.l10n.t('Invalid or missing token in Authorization header.');
export const invalidTokenLength = vscode.l10n.t('Invalid token length in Authorization header.');
export const authorizationHeaderMustStartWithBearer = vscode.l10n.t('Authorization header must start with \'Bearer \'.');
export const authorizationAndDcpHeadersRequired = vscode.l10n.t('Authorization and Microsoft-Developer-DCP-Instance-ID headers are required.');
export const buildFailedForProjectWithError = (projectPath: string, error: string) => vscode.l10n.t('Build failed for project {0} with error: {1}.', projectPath, error);
export const cliInstalled = vscode.l10n.t('Aspire CLI is installed and available on PATH!');
export const cliNotAvailable = vscode.l10n.t('Aspire CLI is not available on PATH. Please install it and restart VS Code.');
export const aspireCliInstallation = vscode.l10n.t('Aspire CLI Installation');
export const cliInstallationStarted = vscode.l10n.t('Aspire CLI installation started. Please restart VS Code after installation completes.');
export const openCliInstallInstructions = vscode.l10n.t('See CLI installation instructions');
export const dismissLabel = vscode.l10n.t('Dismiss');
